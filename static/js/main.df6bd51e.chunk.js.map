{"version":3,"sources":["../node_modules/jspdf/dist sync","redux/Provider.js","redux/actions.js","redux/initialState.js","redux/reducer.js","redux/store.js","components/CityScopeJS/CityIO/utils.js","components/CityScopeJS/CityIO/cityIO.js","components/CityScopeJS/BaseMap/utils/BaseMapUtils.js","components/CityScopeJS/MenuContainer/EditMenu/EditMenu.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/ABMLegend.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/styles.js","components/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/AccessSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/index.js","components/CityScopeJS/MenuContainer/FABMenu/index.js","components/CityScopeJS/MenuContainer/SaveMenu/styles.js","components/CityScopeJS/MenuContainer/SaveMenu/components/SaveAsScenario/index.js","components/CityScopeJS/MenuContainer/SaveMenu/components/ScenarioItems/index.js","components/CityScopeJS/MenuContainer/SaveMenu/index.js","components/CityScopeJS/MenuContainer/MenuContainer.js","components/CityScopeJS/BaseMap/components/PaintBrush/PaintBrush.js","components/CityScopeJS/BaseMap/components/CellMeta.js","components/CityScopeJS/BaseMap/components/PaintBrush/index.js","components/CityScopeJS/BaseMap/components/AnimationComponent.js","components/CityScopeJS/BaseMap/utils/EffectsUtils.js","components/CityScopeJS/BaseMap/layers/AccessLayer.js","components/CityScopeJS/BaseMap/layers/AggregatedTripsLayer.js","components/CityScopeJS/BaseMap/layers/ABMLayer.js","components/CityScopeJS/BaseMap/layers/GridLayer.js","components/CityScopeJS/BaseMap/BaseMap.js","components/CityScopeJS/ProjectionMapping/util.ts","components/CityScopeJS/ProjectionMapping/anchor.tsx","components/CityScopeJS/ProjectionMapping/deleteLocalStorage.js","components/CityScopeJS/ProjectionMapping/ProjectionMapping.tsx","components/CityScopeJS/BaseMap/index.js","components/CityScopeJS/VisContainer/Radar/Radar.js","components/CityScopeJS/VisContainer/DownloadRawData/DownloadRawData.js","components/CityScopeJS/VisContainer/BarChart/BarChart.js","components/CityScopeJS/VisContainer/AreaCalc/AreaCalc.js","components/CityScopeJS/VisContainer/VisContainer.js","components/CityScopeJS/CityIO/LoadingSpinner/index.js","components/CityScopeJS/CityScopeJS.js","components/SplashScreen/SplashScreen.js","components/GridEditor/EditorMap/EditorBrush.js","components/GridEditor/EditorMap/EditorMap.js","components/GridEditor/EditorMenu/TypesEditor/TypesEditor.js","components/GridEditor/EditorMenu/GridProps/GridMaker/gridCreator.js","components/GridEditor/EditorMenu/GridProps/GridMaker/GridMaker.js","components/GridEditor/EditorMenu/GridProps/CommitGrid/CommitGrid.js","components/GridEditor/EditorMenu/GridProps/CenterMapButton/CenterMapButton.js","components/GridEditor/EditorMenu/GridProps/GridProps.js","components/GridEditor/EditorMenu/EditorMenu.js","components/GridEditor/GridEditor.js","components/Router/Router.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","ProviderWrapper","children","store","getCityioData","data","type","listenToSlidersEvents","listenToEditMenu","setReadyState","setLoadingState","setScenarioNames","listenToRowEdits","listenToBaseMapCenter","listOfToggles","Object","settings","menu","toggles","menuInitState","i","length","values","showOnInit","push","initialState","MENU","CITYIO","SCENARIO_NAMES","MAP","SLIDERS","time","map","layers","ABM","startSimHour","currentSimHour","endSimHour","speed","animationSpeed","ABM_MODE","ACCESS_TOGGLE","SELECTED_TYPE","READY","LOADING","ROW_EDIT","BASE_MAP_CENTER","latCenter","lonCenter","TYPES_LIST","GRID_CREATED","reducer","state","action","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","configureStore","createStore","getScenarioIndices","tableName","url","cityIO","baseURL","axios","get","then","res","scenarioIndices","filter","str","includes","parseInt","replace","promises","getScenarioName","Promise","all","r","name","catch","err","console","log","getAPICall","URL","a","response","CityIO","props","useState","hashId","setHashId","hashes","setHashes","cityioURL","cityioData","useSelector","dispatch","useDispatch","update","newHashId","setTimeout","interval","newHashes","pickedModules","cityIOmodules","forEach","modules","modulesData","reduce","obj","k","useEffect","timer","clearTimeout","getModules","hexToRgb","hex","result","exec","testHex","hexString","test","_postMapEditsToCityIO","endPoint","options","method","headers","Accept","error","_handleGridcellEditing","selectedType","setSelectedCellsState","pickingRadius","deckGLRef","height","color","multiSelectedObj","dim","x","y","current","pickObjects","width","_multipleObjPicked","selected","thisCellProps","object","properties","interactive","connect","classes","makeStyles","theme","drawer","zIndex","marginAutoContainer","display","marginAutoItem","margin","useStyles","React","selectedIndex","setSelectedIndex","marks","value","label","Drawer","className","variant","anchor","open","paper","List","LanduseTypesList","iconsArr","col","rgbCol","typeHasHeightProps","Fragment","key","Math","random","Divider","component","root","dividerColor","ListItem","alignItems","button","onClick","event","typeProps","list","ListItemAvatar","Avatar","style","backgroundColor","charAt","ListItemText","primary","listItemPrimaryText","secondary","listItemSecondaryText","Collapse","in","Slider","valueLabelDisplay","slider","onChangeCommitted","getAriaLabel","index","toString","min","max","createTypesIcons","GEOGRID","types","marginLeft","subtitle1","marginTop","subtitle2","ABMLegend","tripsAttr","trips","tripsData","modes","mode","profiles","profile","Typography","gutterBottom","tripTypeValue","items","string","legendData","title","prepareLegendData","ABMSubmenu","sliders","settripTypeValue","FormControl","RadioGroup","aria-label","onChange","target","FormControlLabel","control","Radio","newValue","aria-labelledby","ShadowSubmenu","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","access","c","heatmap","colors","l","startColor","endColor","startTitle","endTitle","p","textTransform","ListItemSecondaryAction","Switch","edge","checked","TogglesMenu","paddingLeft","paddingRight","padding","spacing","drawerPaper","toggleDrawer","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","thisToggle","displayName","ABM2","attr","elevation","BackdropProps","invisible","onClose","FABMenu","flexDirection","position","paddingTop","toggleSaveDrawer","Tooltip","Fab","disabled","SaveAsScenario","setOpen","setName","handleClose","scenarioNames","postScenario","GEOGRIDDATA","info","Button","startIcon","Dialog","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","fullWidth","DialogActions","newScenarioIndex","getScenarioIndex","ScenarioItems","scenario","getScenario","deleteScenario","SaveMenu","MenuContainer","drawerOpen","saveDrawerOpen","setState","indexOf","updatedMenuState","splice","showEditMenu","PaintBrush","mousePos","hoveredCells","isInteractiveCell","divSize","colorTrans","mouseX","clientX","mouseY","clientY","msg","border","mouseDown","borderColor","borderRadius","pointerEvents","left","top","fontSize","CellMeta","fontWeight","hoveredObj","PaintBrushContainer","editOn","AnimationComponent","animationFrame","this","cancelAnimationFrame","_animate","rotateOn","ABMOn","viewState","updaters","sunEffects","setViewState","bearing","startHour","endHour","t","updateSunDirection","requestAnimationFrame","bind","Component","effectsRef","currentDateMidnight","Date","setHours","date","getTime","directionalLights","timestamp","UTC","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","AccessLayer","HeatmapLayer","colorRange","radiusPixels","opacity","getPosition","d","coordinates","getWeight","updateTriggers","AggregatedTripsLayer","ABMmode","PathLayer","_shadow","getPath","noisePath","path","getColor","getWidth","transitions","ABMLayer","zoomLevel","TripsLayer","getTimestamps","timestamps","widthScale","rounded","trailLength","currentTime","GridLayer","keyDownState","selectedCellsState","setDraggingWhileEditing","setHoveredObj","deckGL","GeoJsonLayer","pickable","extruded","wireframe","lineWidthScale","lineWidthMinPixels","getElevation","getFillColor","onDrag","onDragStart","onHover","onDragEnd","Map","draggingWhileEditing","initialViewState","setKeyDownState","setMousePos","setMouseDown","setAccess","setGEOGRID","setABM","loaded","setLoaded","useRef","shadowsOn","resetViewOn","_rightClickViewRotate","ambientLight","AmbientLight","intensity","dirLight","_SunLight","lightingEffect","LightingEffect","shadowColor","_setupSunEffects","_setViewStateToTableHeader","features","JSON","parse","stringify","_proccessGridData","accessData","geometry","_proccessAccessData","dataProps","pitch","header","longitude","latitude","zoom","rotation","orthographic","document","getElementById","addEventListener","evt","preventDefault","layersKey","AGGREGATED_TRIPS","GRID","ACCESS","layerOrder","onKeyDown","nativeEvent","onKeyUp","onMouseMove","onMouseUp","onMouseDown","ref","onViewStateChange","layer","_renderLayers","effects","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","asyncRender","reuseMaps","mapboxApiAccessToken","process","mapStyle","blue","preventStyleDiffing","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","vectorToTransform","vector","styles","container","cursor","anchorSize","bottom","right","AnchorComponent","translation","onMouseEnter","transform","DeleteLocalStorage","Grid","justify","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","ProjectionMapping","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","onAnchorMouseUp","isEditMode","newVector","_clearLocalStraoge","localStorage","getItem","removeItem","location","reload","getBoundingClientRect","prevProps","prevState","ls","setItem","removeEventListener","anchorStyle","anchorClassName","MapContainer","_checkKeystone","overflow","Radar","domains","radarData","radarSize","drawerWidth","indicators","refData","viz_type","ref_value","domain","generateData","animation","polygons","fillOpacity","strokeWidth","axes","text","fill","labels","textAnchor","stroke","tickValues","Array","v","DownloadRawData","element","createElement","file","Blob","href","createObjectURL","download","body","appendChild","click","downloadTxtFile","size","barChartData","hoverdNode","dataArr","hoveredNode","xType","stackBy","yDomain","tickLabelAngle","onValueMouseOver","refChartData","AreaCalc","radialRadius","hoveredRadial","setHoveredRadial","cellSize","geoGridData","calcAreaObj","gridCellData","typeName","hasOwnProperty","count","area","g","valToHex","rgbToHex","radialData","calcArea","colorType","innerRadius","radius","getLabel","labelsRadiusMultiplier","labelsStyle","textShadow","showLabels","getAngle","onSeriesMouseOut","padAngle","background","showRadar","Paper","BarChart","override","css","LoadingSpinner","loading","App","ready","maxWidth","textAlign","maxHeight","inputRoot","labelRoot","labelFocused","caption","SplashScreen","textFieldContent","setTextFieldContent","Box","autoComplete","handleTextFieldChange","InputProps","InputLabelProps","focused","loadCityScopeJSproject","SelectionTarget","_hexToRgb","BaseMap","_toggleOrthoView","_onViewStateChange","componentDidUpdate","mapCenter","_mulipleObjPicked","_renderSelectionTarget","_handleKeyUp","_handleKeyDown","dirLightSettings","_setupEffects","_effects","stroked","filled","createdGrid","visible","cellInfo","rightButton","deck","sat","mapDispatchToProps","TypesEditor","columns","field","lookup","No","Web","TUI","typesArray","LBCS","NAICS","createtypesArray","selectedRow","setSelectedRow","rowColor","setRowColor","item","xs","paging","search","selection","rowStyle","rowData","tableData","onRowClick","row","editable","onRowAdd","newData","onRowUpdate","oldData","onRowDelete","deg_to_rad","deg","PI","rad_to_deg","rad","randomProperty","GridMaker","handleGridCreation","grid","gridProps","top_left_lon","parseFloat","top_left_lat","userPrj","projection","cell_size","nrows","ncols","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","rndType","geojsonPolygon","polygon_xy","polygon_ll","ll","gridCreator","prepareData","struct","typesList","geoJsonFeatures","geoGridObject","newTypesList","oldType","CommitGrid","reqResonse","setReqResonse","reduxState","hasGrid","postGridToCityIO","geoGridObj","toLowerCase","requestsList","geoGridURL","geoGridDataURL","cityscopeJSendpoint","status","Link","reqResonseUI","dataStr","encodeURIComponent","downloadAnchorNode","setAttribute","remove","downloadObjectAsJson","CenterMapButton","GridProps","flexWrap","formValues","setformValues","handleChangeForm","noValidate","textField","defaultValue","inputProps","helperText","EditMenu","GridEditor","EditorMap","createMuiTheme","palette","default","AppRouter","pre","cityscopePrjName","substring","app","Router","ThemeProvider","CssBaseline","Provider","ReactDOM","render"],"mappings":"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","file":"static/js/main.df6bd51e.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 530;","import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","/**\n * ACTIONS\n */\nexport const GET_CITYIO_DATA = \"GET_CITYIO_DATA\";\nexport function getCityioData(data) {\n    return { type: GET_CITYIO_DATA, data };\n}\n\nexport const LISTEN_TO_MAP_EVENTS = \"LISTEN_TO_MAP_EVENTS\";\nexport function listenToMapEvents(data) {\n    return { type: LISTEN_TO_MAP_EVENTS, data };\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = \"LISTEN_TO_ABM_SLIDERS\";\nexport function listenToSlidersEvents(data) {\n    return { type: LISTEN_TO_ABM_SLIDERS, data };\n}\n\nexport const LISTEN_TO_ABM_MODE = \"LISTEN_TO_ABM_MODE\";\nexport function listenToABMmode(data) {\n    return { type: LISTEN_TO_ABM_MODE, data };\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = \"LISTEN_TO_ACCESS_TOGGLE\";\nexport function listenToAccessToggle(data) {\n    return { type: LISTEN_TO_ACCESS_TOGGLE, data };\n}\n\nexport const MENU_INTERACTION = \"MENU_INTERACTION\";\nexport function listenToMenuUI(data) {\n    return { type: MENU_INTERACTION, data };\n}\n\nexport const LISTEN_TO_EDIT_MENU = \"LISTEN_TO_EDIT_MENU\";\nexport function listenToEditMenu(data) {\n    return { type: LISTEN_TO_EDIT_MENU, data };\n}\n\nexport const SET_READY_STATE = \"SET_READY_STATE\";\nexport function setReadyState(data) {\n    return { type: SET_READY_STATE, data };\n}\n\nexport const SET_LOADING_STATE = \"SET_LOADING_STATE\";\nexport function setLoadingState(data) {\n    return { type: SET_LOADING_STATE, data };\n}\n\nexport const SET_SCENARIO_NAMES = \"SET_SCENARIO_NAMES\";\nexport function setScenarioNames(data) {\n    return { type: SET_SCENARIO_NAMES, data };\n}\n\n/**\n * Editor Actions\n */\n\nexport const LISTEN_TO_GRID_CREATOR = \"LISTEN_TO_GRID_CREATOR\";\nexport function listenToGridCreator(data) {\n    return { type: LISTEN_TO_GRID_CREATOR, data };\n}\n\nexport const LISTEN_TO_ROW_EDIT = \"LISTEN_TO_ROW_EDIT\";\nexport function listenToRowEdits(data) {\n    return { type: LISTEN_TO_ROW_EDIT, data };\n}\n\nexport const LISTEN_TO_TYPES_LIST = \"LISTEN_TO_TYPES_LIST\";\nexport function listeonToTypesList(data) {\n    return { type: LISTEN_TO_TYPES_LIST, data };\n}\n\nexport const LISTEN_TO_BASE_MAP_CENTER = \"LISTEN_TO_BASE_MAP_CENTER\";\nexport function listenToBaseMapCenter(data) {\n    return { type: LISTEN_TO_BASE_MAP_CENTER, data };\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    SCENARIO_NAMES: [],\n    MAP: {},\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.currentSimHour,\n            settings.map.layers.ABM.endSimHour,\n        ],\n        speed: settings.map.layers.ABM.animationSpeed,\n    },\n    ABM_MODE: \"mode\",\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: null,\n    READY: false,\n    LOADING: false,\n\n    /**\n     * ! EDITOR INIT STATE\n     */\n\n    ROW_EDIT: null,\n    BASE_MAP_CENTER: {\n        latCenter: null,\n        lonCenter: null,\n    },\n    TYPES_LIST: null,\n    GRID_CREATED: null,\n};\n\nexport default initialState;\n","import {\n    GET_CITYIO_DATA,\n    MENU_INTERACTION,\n    LISTEN_TO_MAP_EVENTS,\n    LISTEN_TO_ABM_SLIDERS,\n    LISTEN_TO_EDIT_MENU,\n    SET_READY_STATE,\n    SET_LOADING_STATE,\n    SET_SCENARIO_NAMES,\n    LISTEN_TO_ACCESS_TOGGLE,\n    LISTEN_TO_ROW_EDIT,\n    LISTEN_TO_TYPES_LIST,\n    LISTEN_TO_GRID_CREATOR,\n    LISTEN_TO_BASE_MAP_CENTER,\n    LISTEN_TO_ABM_MODE,\n} from \"./actions\";\nimport initialState from \"./initialState\";\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_CITYIO_DATA:\n            return { ...state, CITYIO: action.data };\n        case MENU_INTERACTION:\n            return { ...state, MENU: action.data };\n        case LISTEN_TO_MAP_EVENTS:\n            return { ...state, MAP: action.data };\n        case LISTEN_TO_ABM_SLIDERS:\n            return { ...state, SLIDERS: action.data };\n        case LISTEN_TO_ABM_MODE:\n            return { ...state, ABM_MODE: action.data };\n        case LISTEN_TO_ACCESS_TOGGLE:\n            return { ...state, ACCESS_TOGGLE: action.data };\n        case LISTEN_TO_EDIT_MENU:\n            return { ...state, SELECTED_TYPE: action.data };\n        case SET_READY_STATE:\n            return { ...state, READY: action.data };\n        case SET_LOADING_STATE:\n            return { ...state, LOADING: action.data };\n        case SET_SCENARIO_NAMES:\n            return { ...state, SCENARIO_NAMES: action.data };\n\n        //! Editor\n        case LISTEN_TO_ROW_EDIT:\n            return { ...state, ROW_EDIT: action.data };\n\n        case LISTEN_TO_TYPES_LIST:\n            return { ...state, TYPES_LIST: action.data };\n\n        case LISTEN_TO_GRID_CREATOR:\n            return { ...state, GRID_CREATED: action.data };\n\n        case LISTEN_TO_BASE_MAP_CENTER:\n            return { ...state, BASE_MAP_CENTER: action.data };\n\n        default:\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nexport default configureStore;\n","import axios from \"axios\";\nimport settings from \"../../../settings/settings.json\";\n\nexport const getScenarioIndices = (\n    tableName,\n    setScenarioNames,\n    setLoadingState\n) => {\n    var url = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n    axios\n        .get(url)\n        .then((res) => {\n            const metaDataKeys = Object.keys(res.data);\n            const scenarioIndices = metaDataKeys\n                .filter((str) => str.includes(\"scenarios\"))\n                .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n            const promises = [];\n            for (const id of scenarioIndices) {\n                promises.push(getScenarioName(tableName, id));\n            }\n            Promise.all(promises)\n                .then((res) => {\n                    setScenarioNames(\n                        res.map((r) => ({\n                            name: r.data.name,\n                            id: r.data.id,\n                        }))\n                    );\n                    setLoadingState && setLoadingState(false);\n                })\n                .catch((err) =>\n                    console.log(\"error getting scenario names\", err)\n                );\n        })\n        .catch((err) => {\n            console.log(\"Error getting scenarios\", err);\n        });\n};\n\nexport const getScenarioName = (tableName, id) => {\n    const url =\n        settings.cityIO.baseURL + tableName + \"/scenarios\" + id + \"/info\";\n    return axios.get(url);\n};\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n    setScenarioNames,\n} from \"../../../redux/actions\";\nimport settings from \"../../../settings/settings.json\";\nimport { getScenarioIndices } from \"./utils\";\n\nconst getAPICall = async (URL) => {\n    try {\n        const response = await axios.get(URL);\n        return response.data;\n    } catch (err) {\n        console.log(err);\n    }\n};\n\nexport default function CityIO(props) {\n    const { tableName } = props;\n    const [hashId, setHashId] = useState(null);\n    const [hashes, setHashes] = useState({});\n    const cityioURL = settings.cityIO.baseURL + tableName;\n    const cityioData = useSelector((state) => state.CITYIO);\n\n    const dispatch = useDispatch();\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    useEffect(() => {\n        const timer = setTimeout(update, settings.cityIO.interval);\n        console.log(\"reading cityIO every\" + settings.cityIO.interval + \"ms\");\n        return () => clearTimeout(timer);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    async function update() {\n        // recursively get hashes\n        const newHashId = await getAPICall(cityioURL + \"/meta/id\");\n        if (hashId !== newHashId) {\n            setHashId(newHashId);\n        }\n        setTimeout(update, settings.cityIO.interval);\n    }\n\n    async function getModules() {\n        const newHashes = await getAPICall(cityioURL + \"/meta/hashes\");\n        const promises = [];\n        const pickedModules = settings.cityIO.cityIOmodules;\n        // for each of the modules in settings, add api call to promises\n        pickedModules.forEach((module) => {\n            if (hashes[module] !== newHashes[module]) {\n                promises.push(getAPICall(cityioURL + \"/\" + module));\n            } else {\n                promises.push(null);\n            }\n        });\n        const modules = await Promise.all(promises);\n        setHashes(newHashes);\n\n        // update cityio object with modules data\n        const modulesData = pickedModules.reduce((obj, k, i) => {\n            if (modules[i]) {\n                console.log(`updating ${k}`);\n                return { ...obj, [k]: modules[i] };\n            } else {\n                return obj;\n            }\n        }, cityioData);\n        modulesData.tableName = tableName;\n\n        // send to cityio\n        dispatch(getCityioData(modulesData));\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        dispatch(setReadyState(true));\n        dispatch(setLoadingState(false));\n    }\n\n    useEffect(() => {\n        //! only update if hashId changes\n        if (!hashId) {\n            return;\n        }\n        // reset the state of loading flag\n        dispatch(setLoadingState(true));\n        // set Scenario Names and Ids\n        getScenarioIndices(tableName, (data) =>\n            dispatch(setScenarioNames(data))\n        );\n        getModules();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [hashId]);\n\n    return null;\n}\n","import axios from \"axios\";\n\n/**\n * conver rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n    function valToHex(c) {\n        var hex = c.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n    return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n/**\n * conver hex to rgb array\n */\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n    let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n    return isHex;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n    // get the static grid\n    const GEOGRID = cityioData.GEOGRID;\n    // if GEOGRRIDDATA exist and is the same length as our grid\n    if (\n        cityioData.GEOGRIDDATA &&\n        cityioData.GEOGRIDDATA.length === cityioData.GEOGRID.features.length\n    ) {\n        // get the grid data\n        const GEOGRIDDATA = cityioData.GEOGRIDDATA;\n        // update GEOGRID features from GEOGRIDDATA on cityio\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n            // inject id\n            GEOGRID.features[i].properties.id = i;\n        }\n    }\n    const newGrid = JSON.parse(JSON.stringify(GEOGRID));\n    return newGrid;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (data) => {\n    const accessData = data.access;\n    // get colors from settings\n    let coordinates = accessData.features.map((d) => d.geometry.coordinates);\n    let values = accessData.features.map((d) => d.properties);\n    let heatmap = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        heatmap.push({\n            coordinates: coordinates[i],\n            values: values[i],\n        });\n    }\n    return heatmap;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n    let postURL =\n        \"https://cityio.media.mit.edu/api/table/update/\" + tableName + endPoint;\n\n    const options = {\n        method: \"post\",\n        url: postURL,\n        data: data,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options).catch((error) => {\n        console.log(\"ERROR:\", error);\n    });\n};\n\n// /**\n//  * Description. uses deck api to\n//  * collect objects in a region\n//  * @argument{object} e  picking event\n//  */\nexport const _multipleObjPicked = (e, pickingRadius, deckGLRef) => {\n    const dim = pickingRadius;\n    const x = e.x - dim / 2;\n    const y = e.y - dim / 2;\n    let multipleObj = deckGLRef.current.pickObjects({\n        x: x,\n        y: y,\n        width: dim,\n        height: dim,\n    });\n    return multipleObj;\n};\n\n// /**\n//  * Description. allow only to pick cells that are\n//  *  not of CityScope TUI & that are interactable\n//  * so to not overlap TUI activity\n//  */\nexport const _handleGridcellEditing = (\n    e,\n    selectedType,\n    setSelectedCellsState,\n    pickingRadius,\n    deckGLRef\n) => {\n    const { height, color, name } = selectedType;\n    const multiSelectedObj = _multipleObjPicked(e, pickingRadius, deckGLRef);\n    multiSelectedObj.forEach((selected) => {\n        const thisCellProps = selected.object.properties;\n        if (thisCellProps && thisCellProps.interactive) {\n            thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n            thisCellProps.height = height;\n            thisCellProps.name = name;\n        }\n    });\n    setSelectedCellsState(multiSelectedObj);\n};\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { listenToEditMenu } from \"../../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { testHex, hexToRgb } from \"../../BaseMap/utils/BaseMapUtils\";\n\nfunction EditMenu(props) {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            width: 300,\n            zIndex: theme.zIndex.drawer + 1,\n        },\n\n        marginAutoContainer: {\n            width: \"100%\",\n            display: \"flex\",\n        },\n        marginAutoItem: {\n            margin: \"auto\",\n            width: \"80%\",\n        },\n    }));\n\n    const classes = useStyles();\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    let selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const height = selectedType ? selectedType.height : null;\n\n    const marks = [\n        { value: 0, label: \"0 floors\" },\n        { value: 50, label: \"50 floors\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            let col = LanduseTypesList[type].color;\n            if (testHex(col)) {\n                col = hexToRgb(col);\n            }\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n            let typeHasHeightProps = false;\n            if (LanduseTypesList[type].height) {\n                typeHasHeightProps = true;\n            }\n\n            iconsArr.push(\n                <React.Fragment key={Math.random()}>\n                    <Divider\n                        key={Math.random()}\n                        variant=\"inset\"\n                        component=\"li\"\n                        classes={{ root: classes.dividerColor }}\n                    />\n\n                    <ListItem\n                        key={Math.random()}\n                        alignItems=\"flex-start\"\n                        button\n                        variant=\"raised\"\n                        selected={selected}\n                        onClick={(event) =>\n                            handleListItemClick(\n                                event,\n                                type,\n                                LanduseTypesList[type]\n                            )\n                        }\n                        className={classes.list}\n                    >\n                        <ListItemAvatar key={Math.random()}>\n                            <Avatar style={{ backgroundColor: rgbCol }}>\n                                {type.charAt(0)}\n                            </Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            key={Math.random()}\n                            classes={{\n                                primary: classes.listItemPrimaryText,\n                                secondary: classes.listItemSecondaryText,\n                            }}\n                            primary={type}\n                        />\n                    </ListItem>\n\n                    {typeHasHeightProps && (\n                        <div className={classes.marginAutoContainer}>\n                            <div className={classes.marginAutoItem}>\n                                <Collapse in={selected} key={Math.random()}>\n                                    <Slider\n                                        key={Math.random()}\n                                        value={height}\n                                        valueLabelDisplay=\"auto\"\n                                        className={classes.slider}\n                                        onChangeCommitted={(event, value) =>\n                                            dispatch(\n                                                listenToEditMenu({\n                                                    ...selectedType,\n                                                    height: value,\n                                                })\n                                            )\n                                        }\n                                        getAriaLabel={(index) =>\n                                            index.toString()\n                                        }\n                                        min={0}\n                                        max={50}\n                                        marks={marks}\n                                    ></Slider>\n                                </Collapse>\n                            </div>\n                        </div>\n                    )}\n                </React.Fragment>\n            );\n        });\n        return iconsArr;\n    };\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            <List>\n                {createTypesIcons(props.cityioData.GEOGRID.properties.types)}\n            </List>\n        </Drawer>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { DiscreteColorLegend } from \"react-vis\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// ! https://github.com/uber/react-vis/blob/premodern/showcase/legends/searchable-discrete-color.js\n\nexport default function ABMLegend(props) {\n    const tripsAttr = props.trips.tripsData;\n    const modes = tripsAttr.mode;\n    const profiles = tripsAttr.profile;\n\n    const prepareLegendData = (string) => {\n        let data = string === \"mode\" ? modes : profiles;\n\n        let legendData = [];\n        for (const key in data) {\n            legendData.push({ title: data[key].name, color: data[key].color });\n        }\n        return legendData;\n    };\n\n    return (\n        <>\n            <Typography variant=\"h6\" gutterBottom>\n                {props.tripTypeValue === \"mode\" ? \"Mode Choise\" : \"Profiles \"}\n            </Typography>\n            <DiscreteColorLegend\n                height={300}\n                width={150}\n                items={prepareLegendData(props.tripTypeValue)}\n            />\n        </>\n    );\n}\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    listenToSlidersEvents,\n    listenToABMmode,\n} from \"../../../../../redux/actions\";\nimport ABMLegend from \"./ABMLegend\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst marks = [\n    {\n        value: 0,\n        label: \"12AM\",\n    },\n    {\n        value: 21600,\n        label: \"6AM\",\n    },\n    {\n        value: 43200,\n        label: \"12PM\",\n    },\n    {\n        value: 64800,\n        label: \"6PM\",\n    },\n    {\n        value: 86400,\n        label: \"12AM\",\n    },\n];\n\nfunction ABMSubmenu(props) {\n    const classes = useStyles();\n    const sliders = useSelector((state) => state.SLIDERS);\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const handleSetSpeedValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                speed: newValue,\n            })\n        );\n    };\n\n    const [tripTypeValue, settripTypeValue] = React.useState(\"mode\");\n\n    const handleABMmodeChange = (event) => {\n        dispatch(listenToABMmode(event.target.value));\n        settripTypeValue(event.target.value);\n    };\n\n    return (\n        <div className={classes.root}>\n            <FormControl component=\"fieldset\">\n                <RadioGroup\n                    aria-label=\"tripType\"\n                    name=\"tripType\"\n                    value={tripTypeValue}\n                    onChange={handleABMmodeChange}\n                >\n                    <FormControlLabel\n                        value=\"mode\"\n                        control={<Radio />}\n                        label=\"Mode Choice\"\n                    />\n                    <FormControlLabel\n                        value=\"profile\"\n                        control={<Radio />}\n                        label=\"Profile\"\n                    />\n                </RadioGroup>\n            </FormControl>\n\n            <ABMLegend trips={props} tripTypeValue={tripTypeValue} />\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Simulation Range\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n            <Typography\n                className={classes.subtitle2}\n                variant=\"subtitle2\"\n                id=\"continuous-slider\"\n                gutterBottom\n            >\n                Simulation Speed\n            </Typography>\n            <Slider\n                min={0}\n                max={100}\n                value={sliders.speed}\n                onChange={handleSetSpeedValue}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"continuous-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ABMSubmenu;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../../redux/actions\";\n\nfunction ShadowSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector((state) => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\",\n        },\n        {\n            value: 21600,\n            label: \"6AM\",\n        },\n        {\n            value: 43200,\n            label: \"12PM\",\n        },\n        {\n            value: 64800,\n            label: \"6PM\",\n        },\n        {\n            value: 86400,\n            label: \"12AM\",\n        },\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Time of day\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ShadowSubmenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { listenToAccessToggle } from \"../../../../../redux/actions\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { ContinuousColorLegend } from \"react-vis\";\n\nimport settings from \"../../../../../settings/settings.json\";\n\nfunction AccessSubmenu(props) {\n    const accessToggle = useSelector((state) => state.ACCESS_TOGGLE);\n\n    const { cityioData } = props;\n\n    const ACCESS_PROPERTIES =\n        cityioData && cityioData.access && cityioData.access.properties\n            ? cityioData.access.properties\n            : [];\n\n    const dispatch = useDispatch();\n    const c = settings.map.layers.heatmap.colors;\n    const l = c.length - 1;\n    return (\n        <List>\n            <ListItem>\n                <ContinuousColorLegend\n                    width={500}\n                    startColor={\n                        \"rgb(\" + c[0][0] + \",\" + c[0][1] + \",\" + c[0][2] + \")\"\n                    }\n                    endColor={\n                        \"rgb(\" + c[l][0] + \",\" + c[l][1] + \",\" + c[l][2] + \")\"\n                    }\n                    startTitle=\"No Access\"\n                    endTitle=\"Full Access\"\n                />\n            </ListItem>\n            {ACCESS_PROPERTIES.map((p, i) => (\n                <ListItem key={p}>\n                    <ListItemText\n                        primary={p}\n                        style={{ textTransform: \"capitalize\" }}\n                    />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            checked={accessToggle === i}\n                            onChange={() => {\n                                dispatch(listenToAccessToggle(i));\n                            }}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AccessSubmenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport settings from \"../../../../settings/settings.json\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ABMSubmenu from \"./ABMSubmenu\";\nimport ShadowSubmenu from \"./ShadowSubmenu\";\nimport AccessSubmenu from \"./AccessSubmenu\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction TogglesMenu(props) {\n    let drawerWidth = 300;\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            display: \"flex\",\n            paddingLeft: 16,\n            paddingRight: 16,\n            width: drawerWidth,\n            padding: theme.spacing(0, 1),\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const { open, toggleDrawer, handleToggle } = props;\n\n    const { menuState, cityioData } = useSelector((state) => ({\n        menuState: state.MENU,\n        cityioData: state.CITYIO,\n    }));\n\n    const togglesMeta = settings.menu.toggles;\n    const listOfToggles = Object.keys(togglesMeta);\n\n    /**\n     * gets props with initial menu state\n     * and turn on the layer on init\n     */\n    let togglesCompsArray = [];\n    // array of loaded API modules\n    const loadedModules = Object.keys(cityioData);\n    // create each toggle\n    for (let i = 0; i < listOfToggles.length; i++) {\n        // check if the mdoule of this toggle\n        // was loaded on the API\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\n\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\n\n        if (loadedModules.includes(requireModule) || requireModule === false) {\n            const thisToggle = (\n                <div key={listOfToggles[i]}>\n                    <ListItem>\n                        <ListItemText\n                            primary={togglesMeta[listOfToggles[i]].displayName}\n                        />\n                        <ListItemSecondaryAction>\n                            <Switch\n                                edge=\"end\"\n                                onChange={handleToggle(listOfToggles[i])}\n                                checked={checked}\n                            />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"SHADOWS\" && (\n                            <Collapse in={checked} style={{ width: \"100%\" }}>\n                                <ShadowSubmenu />\n                            </Collapse>\n                        )\n                    }\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"ABM\" && (\n                            <Collapse in={checked} style={{ width: \"100%\" }}>\n                                <ABMSubmenu tripsData={cityioData.ABM2.attr} />\n                            </Collapse>\n                        )\n                    }\n                    {listOfToggles[i] === \"ACCESS\" && (\n                        <Collapse\n                            in={checked}\n                            style={{\n                                width: \"80%\",\n                                marginLeft: 24,\n                            }}\n                        >\n                            <AccessSubmenu cityioData={cityioData} />\n                        </Collapse>\n                    )}\n                </div>\n            );\n            togglesCompsArray.push(thisToggle);\n        }\n    }\n\n    return (\n        <Drawer\n            elevation={3}\n            className={classes.drawer}\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n            BackdropProps={{\n                invisible: true,\n            }}\n            anchor=\"left\"\n            open={open}\n            onClose={toggleDrawer}\n        >\n            <List className={classes.list}>\n                <ListItem>\n                    <Typography variant=\"h6\" gutterBottom>\n                        MIT CityScope\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Toggle layers visibility\n                    </Typography>\n                </ListItem>\n                {togglesCompsArray}\n            </List>\n        </Drawer>\n    );\n}\n\nexport default TogglesMenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Fab from \"@material-ui/core/Fab\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function FABMenu(props) {\n    const useStyles = makeStyles({\n        root: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            position: \"fixed\",\n            paddingLeft: 16,\n            paddingTop: 8,\n            zIndex: 1,\n        },\n    });\n\n    const classes = useStyles();\n\n    const menuState = useSelector((state) => state.MENU);\n    const { handleToggle, toggleDrawer, toggleSaveDrawer } = props;\n\n    return (\n        <List className={classes.root}>\n            <ListItem>\n                <Tooltip title=\"Open Layer + Settings Menu\">\n                    <Fab color=\"default\" onClick={toggleDrawer}>\n                        <MenuIcon />\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Toggle Edit Grid Mode, send to cityIO\">\n                    <Fab color=\"default\" onClick={handleToggle(\"EDIT\")}>\n                        {menuState.includes(\"EDIT\") ? (\n                            <CloudUploadIcon />\n                        ) : (\n                            <EditIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Reset View/Toggle Ortho\">\n                    <Fab color=\"default\" onClick={handleToggle(\"RESET_VIEW\")}>\n                        {menuState.includes(\"RESET_VIEW\") ? (\n                            <NavigationIcon />\n                        ) : (\n                            <NearMeIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Save/Load Scenario\">\n                    <Fab\n                        disabled={menuState.includes(\"EDIT\")}\n                        color=\"default\"\n                        onClick={toggleSaveDrawer}\n                    >\n                        <InsertDriveFileIcon />\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n        </List>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(0, 1),\n\n        display: \"flex\",\n        paddingLeft: 16,\n        paddingRight: 16,\n    },\n    list: {\n        paddingLeft: 16,\n        paddingRight: 16,\n        width: 300,\n        padding: theme.spacing(0, 1),\n    },\n}));\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLoadingState } from \"../../../../../../redux/actions\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport axios from \"axios\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function SaveAsScenario(props) {\n    const maxNumOfScenarios = 10;\n    const [open, setOpen] = React.useState(false);\n    const [name, setName] = React.useState(\"\");\n    const dispatch = useDispatch();\n    const { tableName, toggleDrawer } = props;\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const useStyles = makeStyles((theme) => ({\n        button: {\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n\n    const getScenarioIndex = () => {\n        var getURL = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const metaDataKeys = Object.keys(res.data);\n                const scenarioIndices = metaDataKeys\n                    .filter((str) => str.includes(\"scenarios\"))\n                    .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n                console.log(\"successfully got scenarios\");\n                const newScenarioIndex = scenarioIndices.length\n                    ? Math.max(...scenarioIndices) + 1\n                    : 0;\n                postScenario(newScenarioIndex);\n            })\n            .catch((err) => {\n                console.log(\"Error getting scenarios\", err);\n            });\n    };\n\n    const postScenario = (id) => {\n        const data = {\n            GEOGRIDDATA: cityioData.GEOGRIDDATA,\n            info: {\n                id,\n                name,\n            },\n        };\n\n        var postURL =\n            settings.cityIO.baseURL + \"update/\" + tableName + \"/scenarios\" + id;\n\n        const options = {\n            method: \"post\",\n            url: postURL,\n            data,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                console.log(\"Successfully saved grid data and network\");\n                dispatch(setLoadingState(false));\n                toggleDrawer();\n                handleClose();\n            })\n            .catch((error) => {\n                console.log(\"%c\" + error);\n                console.log(\"ERROR:\", error);\n                handleClose();\n            });\n    };\n\n    return (\n        <div style={{ marginLeft: 12 }}>\n            <Button\n                disabled={scenarioNames.length >= maxNumOfScenarios}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleClickOpen}\n                className={classes.button}\n                startIcon={<CloudUploadIcon />}\n            >\n                Save Scenario\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Save Scenario</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Name:</DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        fullWidth\n                        value={name}\n                        onChange={(event) => setName(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"default\">\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            dispatch(setLoadingState(true));\n                            getScenarioIndex();\n                        }}\n                        color=\"default\"\n                    >\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    setScenarioNames,\n    setLoadingState,\n} from \"../../../../../../redux/actions\";\nimport axios from \"axios\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { _postMapEditsToCityIO } from \"../../../../BaseMap/utils/BaseMapUtils\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { getScenarioIndices } from \"../../../../CityIO/utils\";\n\nfunction ScenarioItems(props) {\n    const { toggleDrawer } = props;\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n    const dispatch = useDispatch();\n\n    const getScenario = (tableName, id) => {\n        const getURL = settings.cityIO.baseURL + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const { GEOGRIDDATA } = res.data;\n                _postMapEditsToCityIO(\n                    GEOGRIDDATA,\n                    cityioData.tableName,\n                    \"/GEOGRIDDATA\"\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const deleteScenario = (tableName, id) => {\n        const getURL =\n            settings.cityIO.baseURL + \"clear/\" + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                getScenarioIndices(\n                    cityioData.tableName,\n                    (data) => dispatch(setScenarioNames(data)),\n                    (state) => dispatch(setLoadingState(state))\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const generateListItems = () =>\n        scenarioNames.map((scenario) => (\n            <ListItem key={scenario.id}>\n                <Button\n                    style={{ textTransform: \"none\" }}\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        getScenario(cityioData.tableName, scenario.id);\n                        toggleDrawer();\n                    }}\n                >\n                    <Typography variant=\"h6\">{scenario.name}</Typography>\n                </Button>\n                <Button\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        deleteScenario(cityioData.tableName, scenario.id);\n                    }}\n                >\n                    <CancelIcon />\n                </Button>\n            </ListItem>\n        ));\n\n    return <div>{generateListItems()}</div>;\n}\n\nexport default ScenarioItems;\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport SaveAsScenario from \"./components/SaveAsScenario\";\nimport ScenarioItems from \"./components/ScenarioItems\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nexport default function SaveMenu(props) {\n    const classes = useStyles();\n\n    const { tableName, open, toggleDrawer } = props;\n\n    return (\n        <Drawer\n            className={classes.root}\n            BackdropProps={{\n                invisible: true,\n            }}\n            classes={{\n                paper: classes.paper,\n            }}\n            anchor=\"left\"\n            open={open}\n            onClose={toggleDrawer}\n        >\n            <List className={classes.list}>\n                <ListItem>\n                    <Typography variant=\"h5\" gutterBottom>\n                        Scenarios\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Use this menu to save, load or delete design scenarios.\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <SaveAsScenario\n                        tableName={tableName}\n                        toggleDrawer={toggleDrawer}\n                    />\n                </ListItem>\n                <ScenarioItems toggleDrawer={toggleDrawer} />\n            </List>\n        </Drawer>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToMenuUI } from \"../../../redux/actions\";\nimport EditMenu from \"./EditMenu/EditMenu\";\nimport TogglesMenu from \"./TogglesMenu\";\nimport FABMenu from \"./FABMenu\";\nimport SaveMenu from \"./SaveMenu\";\n\nfunction MenuContainer(props) {\n    const { tableName } = props;\n    const menuState = useSelector((state) => state.MENU);\n    const dispatch = useDispatch();\n\n    const [state, setState] = React.useState({\n        drawerOpen: false,\n        saveDrawerOpen: false,\n    });\n\n    const toggleDrawer = () => {\n        setState({ ...state, drawerOpen: !state.drawerOpen });\n    };\n\n    const toggleSaveDrawer = () => {\n        setState({ ...state, saveDrawerOpen: !state.saveDrawerOpen });\n    };\n\n    const handleToggle = (value) => () => {\n        const i = menuState.indexOf(value);\n        const updatedMenuState = [...menuState];\n        if (i === -1) {\n            updatedMenuState.push(value);\n        } else {\n            updatedMenuState.splice(i, 1);\n        }\n\n        dispatch(listenToMenuUI(updatedMenuState));\n    };\n\n    const showEditMenu = menuState && menuState.includes(\"EDIT\");\n\n    return (\n        <div>\n            <TogglesMenu\n                open={state.drawerOpen}\n                toggleDrawer={toggleDrawer}\n                handleToggle={handleToggle}\n            />\n            <FABMenu\n                toggleDrawer={toggleDrawer}\n                handleToggle={handleToggle}\n                toggleSaveDrawer={toggleSaveDrawer}\n            />\n            {showEditMenu && <EditMenu key={\"EDIT\"} />}\n            <SaveMenu\n                tableName={tableName}\n                handleToggle={handleToggle}\n                toggleDrawer={toggleSaveDrawer}\n                open={state.saveDrawerOpen}\n            />\n        </div>\n    );\n}\n\nexport default MenuContainer;\n","import React from \"react\";\nimport { testHex, hexToRgb } from \"../../utils/BaseMapUtils\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \"Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}:\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    return (\n        <div\n            style={{\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                pointerEvents: \"none\",\n                backgroundColor: \"rgba(0,0,0,0.5)\",\n                padding: \"1vw\",\n                color: \"rgba(255,255,255,0.9)\",\n                zIndex: 1,\n                left: mousePos.clientX,\n                top: mousePos.clientY,\n                fontSize: \"0.65em\",\n                fontWeight: 500,\n            }}\n        >\n            <p>\n                Type:\n                {props.hoveredObj.object.properties.name}\n            </p>\n            <p>\n                Floors:\n                {props.hoveredObj.object.properties.height}\n            </p>\n            <p>\n                ID:\n                {props.hoveredObj.object.properties.id}\n            </p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { PaintBrush } from \"./PaintBrush\";\nimport { CellMeta } from \"../CellMeta\";\n\nexport default function PaintBrushContainer({\n    editOn,\n    mousePos,\n    selectedType,\n    pickingRadius,\n    mouseDown,\n    hoveredObj,\n}) {\n    if (editOn) {\n        return (\n            selectedType && (\n                <PaintBrush\n                    mousePos={mousePos}\n                    selectedType={selectedType}\n                    divSize={pickingRadius}\n                    mouseDown={mouseDown}\n                    hoveredCells={hoveredObj}\n                />\n            )\n        );\n    } else {\n        return (\n            hoveredObj && (\n                <CellMeta mousePos={mousePos} hoveredObj={hoveredObj} />\n            )\n        );\n    }\n}\n","import { Component } from \"react\";\n\nclass AnimationComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.animationFrame = null;\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    _animate() {\n        const {\n            toggles: { rotateOn, ABMOn },\n            state: { viewState, sliders },\n            updaters: { listenToSlidersEvents, sunEffects, setViewState },\n            dispatch,\n        } = this.props;\n        if (rotateOn) {\n            let bearing = viewState.bearing ? viewState.bearing : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            setViewState({\n                ...viewState,\n                bearing: bearing,\n            });\n        }\n\n        if (ABMOn) {\n            const time = sliders.time[1];\n            const speed = sliders.speed;\n            const startHour = sliders.time[0];\n            const endHour = sliders.time[2];\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n\n            dispatch(\n                listenToSlidersEvents({\n                    ...sliders,\n                    time: [sliders.time[0], t, sliders.time[2]],\n                })\n            );\n\n            // update sun position\n            if (sunEffects) {\n                sunEffects.updateSunDirection(t);\n            }\n        }\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default AnimationComponent;\n","import { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\n\nexport const _setupSunEffects = (effectsRef) => {\n    const ambientLight = new AmbientLight({\n        color: [255, 255, 255],\n        intensity: 0.85,\n    });\n    const dirLight = new _SunLight({\n        timestamp: 1554927200000,\n        color: [255, 255, 255],\n        intensity: 1.0,\n        _shadow: true,\n    });\n    const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n    lightingEffect.shadowColor = [0, 0, 0, 0.5];\n    effectsRef.current = [lightingEffect];\n};\n\nexport const updateSunDirection = (time, effectsRef) => {\n    var currentDateMidnight = new Date();\n    currentDateMidnight.setHours(0, 0, 0, 0);\n    var date = new Date(currentDateMidnight.getTime() + time * 1000);\n    effectsRef.current[0].directionalLights[0].timestamp = Date.UTC(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDay(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds()\n    );\n};\n","import { HeatmapLayer } from \"deck.gl\";\nimport settings from \"../../../../settings/settings.json\";\n\nexport default function AccessLayer({ data, accessToggle }) {\n    return new HeatmapLayer({\n        id: \"ACCESS\",\n        colorRange: settings.map.layers.heatmap.colors,\n        radiusPixels: 200,\n        opacity: 0.25,\n        data,\n        getPosition: (d) => d.coordinates,\n        getWeight: (d) => d.values[accessToggle],\n        updateTriggers: {\n            getWeight: [accessToggle],\n        },\n    });\n}\n","import { PathLayer } from \"deck.gl\";\nimport { hexToRgb } from \"../utils/BaseMapUtils\";\n\nexport default function AggregatedTripsLayer({ data, cityioData, ABMmode }) {\n    return new PathLayer({\n        id: \"AGGREGATED_TRIPS\",\n        _shadow: false,\n        data,\n        getPath: (d) => {\n            const noisePath =\n                Math.random() < 0.5\n                    ? Math.random() * 0.00005\n                    : Math.random() * -0.00005;\n            for (let i in d.path) {\n                d.path[i][0] = d.path[i][0] + noisePath;\n                d.path[i][1] = d.path[i][1] + noisePath;\n                d.path[i][2] = d.mode[0] * 2;\n            }\n            return d.path;\n        },\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n        opacity: 0.2,\n        getWidth: 1.5,\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\nimport { hexToRgb } from \"../utils/BaseMapUtils\";\n\n//  * remap line width\nconst _remapValues = (value) => {\n    let remap =\n        value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n    return remap;\n};\n\nexport default function ABMLayer({\n    data,\n    cityioData,\n    ABMmode,\n    zoomLevel,\n    sliders,\n}) {\n    return new TripsLayer({\n        id: \"ABM\",\n        data,\n        getPath: (d) => d.path,\n        getTimestamps: (d) => d.timestamps,\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n\n        getWidth: 1,\n        widthScale: _remapValues(zoomLevel),\n        opacity: 0.8,\n        rounded: true,\n        trailLength: 500,\n        currentTime: sliders.time[1],\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { GeoJsonLayer } from \"deck.gl\";\nimport { _handleGridcellEditing } from \"../utils/BaseMapUtils\";\n\nexport default function GridLayer({\n    data,\n    editOn,\n    state: { selectedType, keyDownState, selectedCellsState, pickingRadius },\n    updaters: { setSelectedCellsState, setDraggingWhileEditing, setHoveredObj },\n    deckGL,\n}) {\n    return new GeoJsonLayer({\n        id: \"GRID\",\n        data,\n        pickable: true,\n        extruded: true,\n        wireframe: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 2,\n        getElevation: (d) => d.properties.height,\n        getFillColor: (d) => d.properties.color,\n\n        onClick: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDrag: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDragStart: () => {\n            if (selectedType && editOn && keyDownState !== \"Shift\") {\n                setDraggingWhileEditing(true);\n            }\n        },\n\n        onHover: (e) => {\n            if (e.object) {\n                setHoveredObj(e);\n            }\n        },\n\n        onDragEnd: () => {\n            setDraggingWhileEditing(false);\n        },\n        updateTriggers: {\n            getFillColor: selectedCellsState,\n            getElevation: selectedCellsState,\n        },\n        transitions: {\n            getFillColor: 500,\n            getElevation: 500,\n        },\n    });\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport PaintBrush from \"./components/PaintBrush\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../redux/actions\";\nimport {\n    _proccessAccessData,\n    _proccessGridData,\n    _postMapEditsToCityIO,\n} from \"./utils/BaseMapUtils\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport settings from \"../../../settings/settings.json\";\nimport AnimationComponent from \"./components/AnimationComponent\";\nimport { updateSunDirection, _setupSunEffects } from \"./utils/EffectsUtils\";\nimport {\n    AccessLayer,\n    AggregatedTripsLayer,\n    ABMLayer,\n    GridLayer,\n} from \"./layers\";\n\nexport default function Map(props) {\n    const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n    const [selectedCellsState, setSelectedCellsState] = useState(null);\n    const [viewState, setViewState] = useState(settings.map.initialViewState);\n    const [keyDownState, setKeyDownState] = useState(null);\n    const [mousePos, setMousePos] = useState(null);\n    const [mouseDown, setMouseDown] = useState(null);\n    const [hoveredObj, setHoveredObj] = useState(null);\n    const [access, setAccess] = useState(null);\n    const [GEOGRID, setGEOGRID] = useState(null);\n    const [ABM, setABM] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const effectsRef = useRef();\n    const deckGL = useRef();\n\n    const dispatch = useDispatch();\n\n    const pickingRadius = 40;\n\n    const [\n        cityioData,\n        sliders,\n        menu,\n        accessToggle,\n        selectedType,\n        ABMmode,\n    ] = useSelector((state) => [\n        state.CITYIO,\n        state.SLIDERS,\n        state.MENU,\n        state.ACCESS_TOGGLE,\n        state.SELECTED_TYPE,\n        state.ABM_MODE,\n    ]);\n\n    var ABMOn = menu.includes(\"ABM\");\n    var rotateOn = menu.includes(\"ROTATE\");\n    var shadowsOn = menu.includes(\"SHADOWS\");\n    var editOn = menu.includes(\"EDIT\");\n    var resetViewOn = menu.includes(\"RESET_VIEW\");\n\n    useEffect(() => {\n        // fix deck view rotate\n        _rightClickViewRotate();\n        // setup sun effects\n        _setupSunEffects(effectsRef);\n        // zoom map on CS table location\n        _setViewStateToTableHeader();\n        setLoaded(true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (!loaded) return;\n        updateSunDirection(sliders.time[1], effectsRef);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sliders.time]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        let shadowColor = shadowsOn ? [0, 0, 0, 0.5] : [0, 0, 0, 0];\n        effectsRef.current[0].shadowColor = shadowColor;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [shadowsOn]);\n\n    useEffect(() => {\n        setGEOGRID(_proccessGridData(cityioData));\n\n        if (cityioData.access) {\n            setAccess(_proccessAccessData(cityioData));\n        }\n\n        if (cityioData.ABM2) {\n            setABM(cityioData.ABM2);\n        }\n    }, [cityioData]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        if (!editOn) {\n            let dataProps = [];\n\n            for (let i = 0; i < GEOGRID.features.length; i++) {\n                dataProps[i] = GEOGRID.features[i].properties;\n            }\n            _postMapEditsToCityIO(\n                dataProps,\n                cityioData.tableName,\n                \"/GEOGRIDDATA\"\n            );\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [editOn]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        if (resetViewOn) {\n            _setViewStateToTableHeader();\n        } else {\n            setViewState({\n                ...viewState,\n                pitch: 45,\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [resetViewOn]);\n\n    const onViewStateChange = ({ viewState }) => {\n        viewState.orthographic = menu.includes(\"RESET_VIEW\") ? true : false;\n        setViewState(viewState);\n    };\n\n    // /**\n    //  * resets the camera viewport\n    //  * to cityIO header data\n    //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n    //  */\n    const _setViewStateToTableHeader = () => {\n        const header = cityioData.GEOGRID.properties.header;\n\n        setViewState({\n            ...viewState,\n            longitude: header.longitude,\n            latitude: header.latitude,\n            zoom: 15,\n            pitch: 0,\n            bearing: 360 - header.rotation,\n            orthographic: true,\n        });\n    };\n\n    // /**\n    //  * Description. fix deck issue\n    //  * with rotate right botton\n    //  */\n    const _rightClickViewRotate = () => {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    };\n\n    const layersKey = {\n        ABM: ABMLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n            zoomLevel: viewState.zoom,\n            sliders,\n        }),\n        AGGREGATED_TRIPS: AggregatedTripsLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n        }),\n        GRID: GridLayer({\n            data: GEOGRID,\n            editOn: menu.includes(\"EDIT\"),\n            state: {\n                selectedType,\n                keyDownState,\n                selectedCellsState,\n                pickingRadius,\n            },\n            updaters: {\n                setSelectedCellsState,\n                setDraggingWhileEditing,\n                setHoveredObj,\n            },\n            deckGL,\n        }),\n        ACCESS: AccessLayer({\n            data: access,\n            accessToggle,\n        }),\n    };\n\n    const layerOrder = [\"ABM\", \"AGGREGATED_TRIPS\", \"GRID\", \"ACCESS\"];\n\n    const _renderLayers = () => {\n        let layers = [];\n        for (var layer of layerOrder) {\n            if (menu.includes(layer)) {\n                layers.push(layersKey[layer]);\n            }\n        }\n        return layers;\n    };\n\n    return (\n        <div\n            className=\"baseMap\"\n            onKeyDown={(e) => {\n                setKeyDownState(e.nativeEvent.key);\n            }}\n            onKeyUp={() => setKeyDownState(null)}\n            onMouseMove={(e) => setMousePos(e.nativeEvent)}\n            onMouseUp={() => setMouseDown(false)}\n            onMouseDown={() => setMouseDown(true)}\n        >\n            <PaintBrush\n                editOn={editOn}\n                mousePos={mousePos}\n                selectedType={selectedType}\n                pickingRadius={pickingRadius}\n                mouseDown={mouseDown}\n                hoveredObj={hoveredObj}\n            />\n            <AnimationComponent\n                toggles={{ ABMOn, rotateOn }}\n                state={{ sliders, viewState }}\n                updaters={{\n                    listenToSlidersEvents,\n                    updateSunDirection,\n                    setViewState,\n                }}\n                dispatch={dispatch}\n            />\n            <DeckGL\n                ref={deckGL}\n                viewState={viewState}\n                onViewStateChange={onViewStateChange}\n                layers={_renderLayers()}\n                effects={effectsRef.current}\n                controller={{\n                    touchZoom: true,\n                    touchRotate: true,\n                    dragPan: !draggingWhileEditing,\n                    dragRotate: !draggingWhileEditing,\n                    keyboard: false,\n                }}\n            >\n                <StaticMap\n                    asyncRender={false}\n                    dragRotate={true}\n                    reuseMaps={true}\n                    mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                    mapStyle={settings.map.mapStyle.blue}\n                    preventStyleDiffing={true}\n                />\n            </DeckGL>\n        </div>\n    );\n}\n","import { Matrix3d, RectPoints, Vector } from \"./ProjectionMapping\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1,\n    ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./ProjectionMapping\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 30;\nconst halfAnchor = anchorSize / 2;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"4px solid white\",\n        cursor: \"move\",\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor,\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor,\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor,\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor,\n    },\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {},\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={(evt) => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation),\n        }}\n    />\n);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        top: \"50vh\",\n        zIndex: 1000\n    }\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\nimport DeleteLocalStorage from \"./deleteLocalStorage\";\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport class ProjectionMapping extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n        // if entered keystone mode\n        if (!prevProps.isEditMode && this.props.isEditMode) {\n            // if found prev. keystone data\n            if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }\n            // if left keystone mode\n        } else if (prevProps.isEditMode && !this.props.isEditMode) {\n            console.log(\"saving edited projMap...\");\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n    _clearLocalStraoge = () => {\n        if (localStorage.getItem(\"projMap\")) {\n            localStorage.removeItem(\"projMap\");\n        }\n        window.location.reload();\n    };\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <React.Fragment>\n                {isEditMode && (\n                    <div onClick={() => this._clearLocalStraoge()}>\n                        <DeleteLocalStorage />\n                    </div>\n                )}\n\n                <div\n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport BaseMap from \"./BaseMap\";\nimport { connect } from \"react-redux\";\nimport { ProjectionMapping } from \"../ProjectionMapping/ProjectionMapping\";\n\nclass MapContainer extends Component {\n    _checkKeystone = () => {\n        return this.props.menu.includes(\"KEYSTONE\") ? true : false;\n    };\n\n    render() {\n        return (\n            <div\n                style={{\n                    height: \"100vh\",\n                    width: \"100vw\",\n                    overflow: \"hidden\",\n                }}\n            >\n                <ProjectionMapping\n                    style={{\n                        height: \"100vh\",\n                        width: \"100vw\",\n                    }}\n                    isEditMode={this._checkKeystone()}\n                >\n                    <BaseMap\n                        menu={this.props.menu}\n                        selectedType={this.props.selectedType}\n                    />\n                </ProjectionMapping>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        menu: state.MENU,\n        selectedType: state.SELECTED_TYPE,\n    };\n};\n\nexport default connect(mapStateToProps, null)(MapContainer);\n","import React, { Component } from \"react\";\nimport { CircularGridLines, RadarChart } from \"react-vis\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\nimport \"./Radar.css\";\nimport { DiscreteColorLegend } from \"react-vis\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            domains: [],\n            radarData: [],\n        };\n        this.radarSize = this.props.drawerWidth - 50;\n\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n        let radarData = {};\n        let refData = {};\n        let domains = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"radar\") {\n                radarData[indicators[i].name] = [indicators[i].value];\n                refData[indicators[i].name] = [indicators[i].ref_value];\n                indicators[i].domain = [0, 1];\n                domains.push(indicators[i]);\n            }\n        }\n        this.setState({ radarData: [radarData, refData], domains: domains });\n    }\n\n    componentDidMount() {\n        this.setState({ indicators: this.props.indicators });\n        this.generateData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.setState({ indicators: this.props.indicators });\n            console.log(\"new radar data..\");\n            this.generateData();\n        }\n    }\n\n    render() {\n        if (this.props.cityioData.indicators) {\n            return (\n                <div>\n                    <RadarChart\n                        className=\"Radar blur\"\n                        animation\n                        data={this.state.radarData}\n                        domains={this.state.domains}\n                        colorRange={this.colorRange}\n                        style={{\n                            polygons: {\n                                fillOpacity: 0.2,\n                                strokeWidth: 2,\n                            },\n                            axes: {\n                                text: {\n                                    opacity: 0,\n                                    fontWeight: 700,\n                                    fill: \"white\",\n                                },\n                                strokeWidth: 0,\n                            },\n                            labels: {\n                                textAnchor: \"middle\",\n                                fontSize: 10,\n                                fill: \"white\",\n                            },\n                        }}\n                        margin={{\n                            left: this.radarSize / 6,\n                            top: this.radarSize / 6,\n                            bottom: this.radarSize / 6,\n                            right: this.radarSize / 6,\n                        }}\n                        width={this.radarSize}\n                        height={this.radarSize}\n                    >\n                        <CircularGridLines\n                            style={{\n                                fill: \"white\",\n                                fillOpacity: 0.1,\n                                backgroundColor: \"#FFF\",\n                                opacity: 0.5,\n                                stroke: \"white\",\n                                width: 0.1,\n                            }}\n                            tickValues={[...new Array(11)].map(\n                                (v, i) => i / 10 - 1\n                            )}\n                        />\n                    </RadarChart>\n\n                    <DiscreteColorLegend\n                        items={[\"Design\", \"Reference\"]}\n                        colors={this.colorRange}\n                    />\n                </div>\n            );\n        } else return null;\n    }\n}\n\nexport default Radar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst downloadTxtFile = (props) => {\n    let data = JSON.stringify(props);\n    const element = document.createElement(\"a\");\n    const file = new Blob([data], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"data.json\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n};\n\nexport default function DownloadRawData(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Button\n                onClick={() => {\n                    downloadTxtFile(props);\n                }}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<SaveIcon />}\n            >\n                {props.title}\n            </Button>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalBarSeries,\n} from \"react-vis\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            barChartData: null,\n            hoverdNode: null,\n        };\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    componentDidMount() {\n        this.generateData();\n    }\n\n    /**\n   data format \n    [\n    { x: 2, y: 10 },\n    { x: 4, y: 5 },\n    { x: 12, y: 15 },\n    ]\n     */\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n\n        let dataArr = [];\n        // let refDataArr = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"bar\") {\n                dataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].value,\n                });\n\n                // refDataArr.push({\n                //     x: indicators[i].name,\n                //     y: indicators[i].ref_value,\n                // });\n            }\n        }\n\n        this.setState({\n            barChartData: dataArr,\n            // refChartData: refDataArr\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.generateData();\n        }\n    }\n\n    render() {\n        const { hoveredNode } = this.state;\n\n        return (\n            <>\n                {this.state.barChartData && (\n                    <div>\n                        {hoveredNode && (\n                            <Typography gutterBottom>\n                                {hoveredNode.x} : {hoveredNode.y}\n                            </Typography>\n                        )}\n\n                        <FlexibleWidthXYPlot\n                            opacity={0.2}\n                            xType=\"ordinal\"\n                            width={this.props.drawerWidth - 50}\n                            height={this.props.drawerWidth - 50}\n                            stackBy=\"y\"\n                            yDomain={[0, 1]}\n                        >\n                            <XAxis\n                                style={{\n                                    text: {\n                                        fill: \"#FFF\",\n                                    },\n                                }}\n                                tickLabelAngle={90}\n                            />\n                            <YAxis style={{ text: { fill: \"#FFF\" } }} />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.barChartData}\n                            />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.refChartData}\n                            />\n                        </FlexibleWidthXYPlot>\n\n                        <DownloadRawData\n                            data={this.props.cityioData.indicators}\n                            title={\"radar & bars data\"}\n                        />\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nexport default Radar;\n","import React, { useState } from \"react\";\nimport { rgbToHex } from \"../../BaseMap/utils/BaseMapUtils\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function AreaCalc(props) {\n    const radialRadius = props.drawerWidth - 100;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    const useStyles = makeStyles((theme) => ({\n        list: {\n            width: props.drawerWidth - 50,\n        },\n    }));\n\n    const classes = useStyles();\n\n    const calcArea = () => {\n        let gridProps = props.cityioData.GEOGRID.properties;\n        let cellSize = gridProps.header.cellSize;\n        let geoGridData = props.cityioData.GEOGRIDDATA;\n        let calcAreaObj = {};\n        geoGridData.forEach((gridCellData) => {\n            let typeName = gridCellData.name;\n            if (\n                //    if this type is not null\n                gridCellData.name !== \"None\"\n            ) {\n                if (calcAreaObj.hasOwnProperty(typeName)) {\n                    calcAreaObj[typeName].count =\n                        calcAreaObj[typeName].count + 1;\n                    // avoid landuse with no height\n                    let height =\n                        gridCellData.height < 1 ? 1 : gridCellData.height;\n                    calcAreaObj[typeName].area =\n                        calcAreaObj[typeName].area + height * cellSize;\n                } else {\n                    calcAreaObj[typeName] = {};\n                    calcAreaObj[typeName].area = 0;\n                    calcAreaObj[typeName].count = 0;\n                    calcAreaObj[typeName].name = typeName;\n                    calcAreaObj[typeName].color = rgbToHex(\n                        gridCellData.color[0],\n                        gridCellData.color[1],\n                        gridCellData.color[2]\n                    );\n                }\n            }\n        });\n        //  convert to react-vis happy data format\n        let radialData = [];\n        for (const k in calcAreaObj) {\n            radialData.push(calcAreaObj[k]);\n        }\n\n        let data = {\n            children: radialData,\n            color: 1,\n        };\n        return data;\n    };\n\n    const data = calcArea();\n\n    return (\n        <List className={classes.list}>\n            <ListItem>\n                {hoveredRadial.name ? (\n                    <Typography gutterBottom>\n                        {hoveredRadial.name}: {hoveredRadial.area} sqm\n                    </Typography>\n                ) : (\n                    <Typography gutterBottom>Hover on chart...</Typography>\n                )}\n            </ListItem>\n\n            <ListItem>\n                <RadialChart\n                    colorType=\"literal\"\n                    animation={true}\n                    className={\"donut-chart-example\"}\n                    innerRadius={radialRadius / 2 - radialRadius / 5}\n                    radius={radialRadius / 2}\n                    getLabel={(d) => d.name}\n                    labelsRadiusMultiplier={0.95}\n                    labelsStyle={{\n                        textAnchor: \"middle\",\n\n                        fontSize: 11,\n                        fill: \"#FFF\",\n                        textShadow: \"2px 2px 2px #000\",\n                    }}\n                    showLabels\n                    getAngle={(d) => d.area}\n                    data={data.children}\n                    onValueMouseOver={(evt) => setHoveredRadial(evt)}\n                    onSeriesMouseOut={() => setHoveredRadial(false)}\n                    width={radialRadius}\n                    height={radialRadius}\n                    padAngle={0.01}\n                >\n                    {hoveredRadial !== false && (\n                        <Hint value={hoveredRadial}>\n                            <div\n                                style={{\n                                    background: \"rgba(0,0,0,0.8)\",\n                                    fontSize: 14,\n                                }}\n                            >\n                                <Typography variant={\"caption\"} gutterBottom>\n                                    Area: {hoveredRadial.area} sqm\n                                </Typography>\n                            </div>\n                        </Hint>\n                    )}\n                </RadialChart>\n            </ListItem>\n\n            <ListItem>\n                <DownloadRawData data={data.children} title={\"area data\"} />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Radar from \"./Radar/Radar\";\nimport BarChart from \"./BarChart/BarChart\";\nimport AreaCalc from \"./AreaCalc/AreaCalc\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction VisContainer(props) {\n    const drawerWidth = 450;\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n            display: \"flex\",\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const showRadar = props.menu && props.menu.includes(\"RADAR\");\n\n    return (\n        <React.Fragment>\n            {showRadar && (\n                <Drawer\n                    variant=\"persistent\"\n                    anchor=\"right\"\n                    open={true}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <List className={classes.list}>\n                        <ListItem>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Urban Indicators\n                            </Typography>\n                        </ListItem>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <Radar\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <BarChart\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <AreaCalc\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n                    </List>\n                </Drawer>\n            )}\n        </React.Fragment>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        menu: state.MENU,\n    };\n};\n\nexport default connect(mapStateToProps, null)(VisContainer);\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { useSelector } from \"react-redux\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: none;\n`;\n\nfunction LoadingSpinner() {\n    const loading = useSelector((state) => state.LOADING);\n    return (\n        <div\n            style={{\n                position: \"fixed\",\n                bottom: 50,\n                right: 50,\n                zIndex: 1,\n            }}\n        >\n            <PulseLoader\n                css={override}\n                size={20}\n                color=\"white\"\n                loading={loading}\n            />\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CityIO from \"./CityIO/cityIO\";\nimport MenuContainer from \"./MenuContainer/MenuContainer\";\nimport MapContainer from \"./BaseMap\";\nimport VisContainer from \"./VisContainer/VisContainer\";\nimport LoadingSpinner from \"./CityIO/LoadingSpinner\";\n\nexport default function App(props) {\n    // wait for 'ready' flag from cityIO when app is ready to start\n    const ready = useSelector((state) => state.READY);\n    // get the table name for cityIO comp\n    const { tableName } = props;\n\n    return (\n        <>\n            <CityIO tableName={tableName} />\n            {/* if ready, render the app*/}\n            {ready && (\n                <>\n                    <MenuContainer tableName={tableName} />\n                    <MapContainer />\n                    <VisContainer />\n                </>\n            )}\n            <LoadingSpinner />\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Box from \"@material-ui/core/Box\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        margin: theme.spacing(2),\n    },\n\n    root: {\n        maxWidth: \"50%\",\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n\n        textAlign: \"center\",\n        rounded: true,\n        maxHeight: \"50%\",\n        paddingTop: 65,\n        margin: \"auto\",\n    },\n\n    inputRoot: {\n        fontSize: 60,\n    },\n    labelRoot: {\n        fontSize: 50,\n        color: \"white\",\n        \"&$labelFocused\": {\n            fontSize: 10,\n            color: \"white\",\n        },\n    },\n    labelFocused: { color: \"white\" },\n    caption: { margin: \"auto\", maxWidth: \"30%\" },\n}));\n\nexport default function SplashScreen() {\n    const [textFieldContent, setTextFieldContent] = useState(null);\n\n    const handleTextFieldChange = (e) => {\n        const { value } = e.target;\n        setTextFieldContent(value);\n    };\n\n    const loadCityScopeJSproject = () => {\n        let url =\n            \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" +\n            textFieldContent;\n        window.location.href = url;\n    };\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Typography variant=\"h1\" gutterBottom>\n                CityScopeJS\n            </Typography>\n            <Typography gutterBottom>\n                CityScopeJS is a unified front-end for MIT CityScope project, an\n                open-source urban modeling and simulation platform. CityScopeJS\n                allows users to examine different urban-design alternatives, and\n                observe their impact through multiple layers of urban analytics\n                modules, such as economy, traffic and ABM simulation, urban\n                access, storm-water, noise and more.\n            </Typography>\n            <Box p={5} />\n\n            <div>\n                <TextField\n                    autoComplete=\"off\"\n                    onChange={(event) => handleTextFieldChange(event)}\n                    InputProps={{ classes: { root: classes.inputRoot } }}\n                    InputLabelProps={{\n                        classes: {\n                            root: classes.labelRoot,\n                            focused: classes.labelFocused,\n                        },\n                    }}\n                    id=\"outlined-basic\"\n                    label=\"CityScope Project...\"\n                ></TextField>\n                <div>\n                    {textFieldContent && (\n                        <Button\n                            onClick={() => {\n                                loadCityScopeJSproject();\n                            }}\n                            variant=\"outlined\"\n                            className={classes.button}\n                        >\n                            <SendIcon />\n                            Load CityScope Project\n                        </Button>\n                    )}\n                </div>\n            </div>\n\n            <Box p={5} />\n            <div>\n                <Fab\n                    color=\"default\"\n                    href=\"https://cityscope.media.mit.edu/CS_cityscopeJS/?editor\"\n                >\n                    <EditIcon />\n                </Fab>\n            </div>\n\n            <div className={classes.caption}>\n                <Typography variant=\"caption\" gutterBottom>\n                    Click here to design and deploy a new CityScope project\n                    using Grid Editor\n                </Typography>\n            </div>\n\n            <Box p={2} />\n            <div>\n                <Fab\n                    href=\"http://github.com/CityScope/CS_cityscopeJS/\"\n                    color=\"default\"\n                >\n                    <GitHubIcon />\n                </Fab>\n            </div>\n            <div className={classes.caption}>\n                <Typography variant=\"caption\" gutterBottom>\n                    This open-source project is developed by the CityScope\n                    Network. Join us!\n                </Typography>\n            </div>\n            <Box p={5} />\n        </div>\n    );\n}\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport default function SelectionTarget(props) {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n    const selectedType = props.selectedType;\n    const divSize = props.divSize;\n\n    const colorTrans =\n        \"rgba(\" +\n        selectedType.color[0] +\n        \",\" +\n        selectedType.color[1] +\n        \",\" +\n        selectedType.color[2] +\n        \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: selectedType.color,\n                color: selectedType.color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\",\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport EditorBrush from \"./EditorBrush\";\nimport { connect } from \"react-redux\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\nimport settings from \"../GridEditorSettings.json\";\nimport { listenToBaseMapCenter } from \"../../../redux/actions\";\n\nexport const _hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n};\n\nclass BaseMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 12),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n        // setup sun effects\n        this._setupEffects();\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n    }\n\n    _toggleOrthoView = (viewState) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n    };\n\n    _onViewStateChange = ({ viewState }) => {\n        this.setState({ viewState });\n    };\n\n    componentDidUpdate = (prevProps) => {\n        if (this.props.mapCenter !== prevProps.mapCenter)\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    latitude: this.props.mapCenter.latCenter,\n                    longitude: this.props.mapCenter.lonCenter,\n                    pitch: 0,\n                    bearing: 0,\n                    orthographic: false,\n                },\n            });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                latitude: settings.GEOGRID.properties.header.latitude,\n                longitude: settings.GEOGRID.properties.header.longitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 0,\n                orthographic: true,\n            },\n        });\n    }\n\n    _setupEffects() {\n        const ambientLight = new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 0.85,\n        });\n        const dirLight = new _SunLight(this.dirLightSettings);\n        const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n        lightingEffect.shadowColor = [0, 0, 0, 0.5];\n        this._effects = [lightingEffect];\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        if (!this.props.selectedType) return;\n        const { height, name, color, interactive } = this.props.selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n\n        multiSelectedObj.forEach((selected) => {\n            let thisCellProps = selected.object.properties;\n            thisCellProps.color = _hexToRgb(color);\n            thisCellProps.height = parseInt(height);\n            thisCellProps.name = name;\n            if (interactive !== \"No\") {\n                thisCellProps.interactive = interactive;\n            } else {\n                delete thisCellProps.interactive;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        return (\n            this.props.selectedType && (\n                <EditorBrush\n                    mousePos={this.state.mousePos}\n                    selectedType={this.props.selectedType}\n                    divSize={this.state.pickingRadius}\n                    mouseDown={this.state.mouseDown}\n                />\n            )\n        );\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        let layers = [];\n        layers.push(\n            new GeoJsonLayer({\n                id: \"GRID\",\n                opacity: 0.5,\n                stroked: false,\n                filled: true,\n                wireframe: true,\n                data: this.props.createdGrid,\n                visible: true,\n                pickable: true,\n                extruded: true,\n                lineWidthScale: 1,\n                lineWidthMinPixels: 1,\n                getElevation: (d) => d.properties.height,\n                getFillColor: (d) => d.properties.color,\n\n                onClick: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n\n                onDrag: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n                onDragStart: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    ) {\n                        this.setState({ draggingWhileEditing: true });\n                    }\n                },\n                onDragEnd: () => {\n                    this.setState({ draggingWhileEditing: false });\n                },\n                updateTriggers: {\n                    getFillColor: this.state.selectedCellsState,\n                    getElevation: this.state.selectedCellsState,\n                },\n                transitions: {\n                    getFillColor: 500,\n                    getElevation: 500,\n                },\n            })\n        );\n\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {this._renderSelectionTarget()}\n\n                <DeckGL\n                    // sets the cursor on paint\n                    // getCursor={() => \"none\"}\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    effects={this._effects}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.sat}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    listenToBaseMapCenter: listenToBaseMapCenter,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedType: state.ROW_EDIT,\n        mapCenter: state.BASE_MAP_CENTER,\n        createdGrid: state.GRID_CREATED,\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap);\n","import MaterialTable from \"material-table\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport {\n    listenToRowEdits,\n    listeonToTypesList,\n} from \"../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport settings from \"../../GridEditorSettings.json\";\n\nexport default function TypesEditor() {\n    const createtypesArray = (LanduseTypesList) => {\n        let typesArray = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            typesArray.push({\n                name: type,\n                color: LanduseTypesList[type].color,\n                height: LanduseTypesList[type].height\n                    ? LanduseTypesList[type].height\n                    : null,\n                LBCS: JSON.stringify(LanduseTypesList[type].LBCS),\n                NAICS: JSON.stringify(LanduseTypesList[type].NAICS),\n                interactive: LanduseTypesList[type].interactive,\n            });\n        });\n        return typesArray;\n    };\n\n    const [state, setState] = React.useState({\n        columns: [\n            { title: \"Type\", field: \"name\" },\n            { title: \"Height\", field: \"height\", type: \"numeric\" },\n            {\n                title: \"Interactive\",\n                field: \"interactive\",\n                lookup: { No: \"No\", Web: \"Web\", TUI: \"TUI\" },\n            },\n            { title: \"Color\", field: \"color\", type: \"string\" },\n            { title: \"LBCS\", field: \"LBCS\", type: \"string\" },\n            { title: \"NAICS\", field: \"NAICS\", type: \"string\" },\n        ],\n        data: createtypesArray(settings.GEOGRID.properties.types),\n    });\n    // redux the type list on every change\n    useEffect(() => {\n        dispatch(listeonToTypesList(state.data));\n    });\n    const dispatch = useDispatch();\n    const [selectedRow, setSelectedRow] = useState(null);\n    const [rowColor, setRowColor] = useState(null);\n\n    return (\n        <div style={{ maxWidth: \"100%\" }}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <MaterialTable\n                        title=\"Types Editor\"\n                        columns={state.columns}\n                        data={state.data}\n                        options={{\n                            paging: false,\n                            search: false,\n                            selection: false,\n                            rowStyle: (rowData) => ({\n                                backgroundColor:\n                                    selectedRow === rowData.tableData.id\n                                        ? rowColor\n                                        : null,\n                            }),\n                        }}\n                        onRowClick={(evt, row) => {\n                            setSelectedRow(row.tableData.id);\n                            setRowColor(row.color);\n                            dispatch(listenToRowEdits(row));\n                        }}\n                        editable={{\n                            onRowAdd: (newData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data.push(newData);\n                                            return { ...prevState, data };\n                                        });\n                                    }, 600);\n                                }),\n                            onRowUpdate: (newData, oldData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        if (oldData) {\n                                            setState((prevState) => {\n                                                const data = [\n                                                    ...prevState.data,\n                                                ];\n                                                data[\n                                                    data.indexOf(oldData)\n                                                ] = newData;\n\n                                                return { ...prevState, data };\n                                            });\n                                        }\n\n                                        // dispath change to redux\n                                        dispatch(listenToRowEdits(newData));\n                                    }, 600);\n                                }),\n                            onRowDelete: (oldData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data.splice(\n                                                data.indexOf(oldData),\n                                                1\n                                            );\n                                            return { ...prevState, data };\n                                        });\n                                    }, 600);\n                                }),\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import proj4 from \"proj4\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport { _hexToRgb } from \"../../../EditorMap/EditorMap\";\n\nfunction deg_to_rad(deg) {\n    return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n    return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n    var keys = Object.keys(obj);\n    return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps) => {\n    let top_left_lon = parseFloat(gridProps.longitude);\n    let top_left_lat = parseFloat(gridProps.latitude);\n    let rotation = parseFloat(gridProps.rotation);\n    let userPrj = gridProps.projection;\n    let cell_size = parseFloat(gridProps.cellSize);\n    let nrows = parseFloat(gridProps.nrows);\n    let ncols = parseFloat(gridProps.ncols);\n\n    const webMercator = proj4.defs(\"EPSG:4326\");\n    let EARTH_RADIUS_M = 6.371e6;\n    let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n    let bearing = (90 - rotation + 360) % 360;\n    let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n    let la1 = deg_to_rad(top_left_lon_lat.lat);\n    let lo1 = deg_to_rad(top_left_lon_lat.lon);\n    let bearing_rad = deg_to_rad(bearing);\n    let la2 = Math.asin(\n        Math.sin(la1) * Math.cos(Ad) +\n            Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n    );\n    let lo2 =\n        lo1 +\n        Math.atan2(\n            Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n            Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n        );\n    let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n    let top_left_xy = proj4(webMercator, userPrj, [\n        top_left_lon_lat.lon,\n        top_left_lon_lat.lat,\n    ]);\n\n    let top_right_xy = proj4(webMercator, userPrj, [\n        top_right_lon_lat.lon,\n        top_right_lon_lat.lat,\n    ]);\n\n    let dydx =\n        (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n    let theta = Math.atan(dydx);\n    let cosTheta = Math.cos(theta);\n    let sinTheta = Math.sin(theta);\n    // create rotate matrix\n    let x_unRot = [];\n    let y_unRot = [];\n    for (let i = 0; i < nrows; i++) {\n        for (let j = 0; j < ncols; j++) {\n            x_unRot.push(j * cell_size);\n            y_unRot.push(-i * cell_size);\n        }\n    }\n\n    let x_rot = [];\n    let y_rot = [];\n    for (let i = 0; i < x_unRot.length; i++) {\n        x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n        y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n    }\n\n    let x_rot_trans = [];\n    let y_rot_trans = [];\n    for (let i = 0; i < x_rot.length; i++) {\n        x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n        y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n    }\n\n    var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n    var dydCol = y_rot_trans[1] - y_rot_trans[0];\n    var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n    var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n    let gridPnts = [];\n    let geojsonFeatureCollection = {\n        type: \"FeatureCollection\",\n        // polygons go here\n        features: [],\n    };\n\n    let types = settings.GEOGRID.properties.types;\n\n    for (let i = 0; i < x_rot_trans.length; i++) {\n        let rndType = randomProperty(types);\n\n        let geojsonPolygon = {\n            type: \"Feature\",\n            geometry: {\n                type: \"Polygon\",\n                coordinates: null,\n            },\n            properties: {\n                color: _hexToRgb(rndType.color),\n                height: rndType.height,\n                name: rndType.name,\n                interactive: rndType.interactive,\n            },\n        };\n\n        var polygon_xy = [\n            [x_rot_trans[i], y_rot_trans[i]],\n            [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n            [\n                x_rot_trans[i] + dxdRow + dxdCol,\n                y_rot_trans[i] + dydRow + dydCol,\n            ],\n            [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n            [x_rot_trans[i], y_rot_trans[i]],\n        ];\n\n        var polygon_ll = [];\n        for (var v = 0; v < 5; v++) {\n            let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n            polygon_ll.push(ll);\n        }\n\n        geojsonPolygon.geometry.coordinates = [polygon_ll];\n        gridPnts.push(geojsonPolygon);\n    }\n    geojsonFeatureCollection.features = gridPnts;\n\n    return geojsonFeatureCollection;\n};\n","import React from \"react\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport Button from \"@material-ui/core/Button\";\nimport { gridCreator } from \"./gridCreator\";\nimport { listenToGridCreator } from \"../../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function GridMaker(props) {\n    const dispatch = useDispatch();\n\n    const handleGridCreation = () => {\n        let grid = gridCreator(props.gridProps);\n        dispatch(listenToGridCreator(grid));\n    };\n\n    return (\n        <Button\n            onClick={() => {\n                handleGridCreation();\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<AppsIcon />}\n        >\n            Create Grid\n        </Button>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport axios from \"axios\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSelector } from \"react-redux\";\nimport Link from \"@material-ui/core/Link\";\n\nconst reqResonseUI = (response, tableName) => {\n    let cityscopeJSendpoint =\n        \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" +\n        tableName;\n    // create the feedback text\n    let resText = (\n        <Typography variant=\"caption\">\n            CityIO is {response.data.status}. Grid deployed to{\" \"}\n            <Link href={cityscopeJSendpoint}>{cityscopeJSendpoint}</Link>\n        </Typography>\n    );\n\n    return resText;\n};\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst prepareData = (struct, typesList, geoJsonFeatures, gridProps) => {\n    let geoGridObject = struct;\n\n    // take types list and prepare to csJS format\n    let newTypesList = {};\n\n    typesList.forEach((oldType) => {\n        newTypesList[oldType.name] = oldType;\n\n        // fixes JSON => string in material-table\n        newTypesList[oldType.name].LBCS = JSON.parse(oldType.LBCS);\n        newTypesList[oldType.name].NAICS = JSON.parse(oldType.NAICS);\n    });\n\n\n    geoGridObject.properties.types = newTypesList;\n\n    // inject table props to grid\n    geoGridObject.properties.header = gridProps;\n    geoGridObject.properties.header.longitude = parseFloat(\n        geoGridObject.properties.header.longitude\n    );\n    geoGridObject.properties.header.latitude = parseFloat(\n        geoGridObject.properties.header.latitude\n    );\n    geoGridObject.properties.header.rotation = parseFloat(\n        geoGridObject.properties.header.rotation\n    );\n    geoGridObject.properties.header.nrows = parseFloat(\n        geoGridObject.properties.header.nrows\n    );\n    geoGridObject.properties.header.ncols = parseFloat(\n        geoGridObject.properties.header.ncols\n    );\n    geoGridObject.properties.header.cellSize = parseFloat(\n        geoGridObject.properties.header.cellSize\n    );\n\n    // lastly get the grid features\n    geoGridObject.features = geoJsonFeatures;\n\n    return geoGridObject;\n};\n\nexport default function CommitGrid(props) {\n    const [reqResonse, setReqResonse] = React.useState(null);\n\n    const reduxState = useSelector((state) => state);\n    const hasGrid = reduxState.GRID_CREATED;\n\n    const downloadObjectAsJson = () => {\n        let struct = settings.GEOGRID;\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        let geoGridObj = prepareData(\n            struct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n        var dataStr =\n            \"data:text/json;charset=utf-8,\" +\n            encodeURIComponent(JSON.stringify(geoGridObj));\n        var downloadAnchorNode = document.createElement(\"a\");\n        downloadAnchorNode.setAttribute(\"href\", dataStr);\n        downloadAnchorNode.setAttribute(\"download\", \"grid.json\");\n        document.body.appendChild(downloadAnchorNode); // required for firefox\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    };\n\n    const postGridToCityIO = () => {\n        let struct = settings.GEOGRID;\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        // take grid struct from settings\n        let geoGridObj = prepareData(\n            struct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n\n        let tableName = geoGridObj.properties.header.tableName.toLowerCase();\n        let requestsList = {\n            geoGridURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRID\",\n\n            geoGridDataURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRIDDATA\",\n        };\n\n        const options = {\n            method: \"post\",\n            url: requestsList.geoGridURL,\n            data: geoGridObj,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n\n        axios(options)\n            .then(function (response) {\n                setReqResonse(reqResonseUI(response, tableName));\n            })\n            // then reset GEOGRIDDATA of that new grid\n\n            .then(function () {\n                options.url = requestsList.geoGridDataURL;\n                options.data = {};\n                axios(options);\n                console.log(\"removed GEOGRIDDATA\");\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    return (\n        <>\n            {hasGrid && (\n                <>\n                    <Button\n                        onClick={() => {\n                            postGridToCityIO();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudUploadIcon />}\n                    >\n                        Commit Grid to cityIO\n                    </Button>\n\n                    <Button\n                        onClick={() => {\n                            // ! download as json\n                            downloadObjectAsJson();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudDownloadIcon />}\n                    >\n                        Download JSON\n                    </Button>\n\n                    <div style={{ width: \"100%\" }}> {reqResonse}</div>\n                </>\n            )}\n        </>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CenterFocusStrongIcon from \"@material-ui/icons/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\n\nimport { listenToBaseMapCenter } from \"../../../../../redux/actions\";\n\nexport default function CenterMapButton(props) {\n    const dispatch = useDispatch();\n\n    return (\n        <Button\n            onClick={() => {\n                dispatch(\n                    listenToBaseMapCenter({\n                        latCenter: parseFloat(props.mapCenter[0]),\n                        lonCenter: parseFloat(props.mapCenter[1]),\n                    })\n                );\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<CenterFocusStrongIcon />}\n            style={{ fontSize: \"12px\" }}\n        >\n            Center Map\n        </Button>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GridMaker from \"./GridMaker/GridMaker\";\nimport CommitGrid from \"./CommitGrid/CommitGrid\";\nimport CenterMapButton from \"./CenterMapButton/CenterMapButton\";\nimport settings from \"../../GridEditorSettings.json\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default function GridProps() {\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            \"& .MuiTextField-root\": {\n                margin: theme.spacing(1),\n                flexWrap: \"wrap\",\n            },\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n        paper: {\n            width: \"100%\",\n        },\n    }));\n\n    const [formValues, setformValues] = React.useState({\n        tableName: \"CityScopeJS\",\n        latitude: settings.GEOGRID.properties.header.latitude,\n        longitude: settings.GEOGRID.properties.header.longitude,\n        nrows: settings.GEOGRID.properties.header.nrows,\n        ncols: settings.GEOGRID.properties.header.nrows,\n        rotation: settings.GEOGRID.properties.header.rotation,\n        cellSize: settings.GEOGRID.properties.header.cellSize,\n        projection: settings.GEOGRID.properties.header.projection,\n    });\n\n    const handleChangeForm = (event) => {\n        const { id, value } = event.target;\n        setformValues({ ...formValues, [id]: value });\n    };\n\n    const classes = useStyles();\n\n    //  get all data\n    // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n    return (\n        <Paper elevation={3} className={classes.paper}>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <Typography variant=\"h6\">Grid Properties</Typography>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"tableName\"\n                        label=\"CityScope Project Name\"\n                        defaultValue={formValues.tableName}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"latitude\"\n                        label=\"Latitude\"\n                        defaultValue={formValues.latitude}\n                        type=\"number\"\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"longitude\"\n                        label=\"Longitude\"\n                        defaultValue={formValues.longitude}\n                        type=\"number\"\n                    />\n                </div>\n                <div className={classes.root}>\n                    <CenterMapButton\n                        mapCenter={[formValues.latitude, formValues.longitude]}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"nrows\"\n                        label=\"Rows\"\n                        defaultValue={formValues.nrows}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 100,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"ncols\"\n                        label=\"Columns\"\n                        defaultValue={formValues.ncols}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 100,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"rotation\"\n                        label=\"Rotation (deg)\"\n                        defaultValue={formValues.rotation}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 360,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"cellSize\"\n                        label=\"Cell Size (m^2)\"\n                        defaultValue={formValues.cellSize}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 1000,\n                                min: 0,\n                            },\n                        }}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        id=\"projection\"\n                        label=\"Projection\"\n                        defaultValue={formValues.projection}\n                        type=\"string\"\n                        helperText=\"Note: wrong projection might break app. Find the relevant projection at: https://epsg.io/\"\n                    />\n                </div>\n                <div className={classes.root}>\n                    <GridMaker gridProps={formValues} />\n                    <CommitGrid gridProps={formValues} />\n                </div>\n            </form>\n        </Paper>\n    );\n}\n","// // export default EditMenuMain;\n\nimport React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TypesEditor from \"./TypesEditor/TypesEditor\";\nimport GridProps from \"./GridProps/GridProps\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function EditMenu() {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            width: \"50%\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            <List>\n                <ListItem>\n                    <Typography variant=\"h5\">CityScope Grid Editor</Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\">\n                        Tool for creating CityScope endpoints with virtual\n                        editable girds, types, and props, and deploy them to\n                        cityIO.\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <GridProps />\n                </ListItem>\n                <ListItem>\n                    <TypesEditor />\n                </ListItem>\n            </List>\n        </Drawer>\n    );\n}\n","import React, { Component } from \"react\";\nimport EditorMap from \"./EditorMap/EditorMap\";\nimport EditorMenu from \"./EditorMenu/EditorMenu\";\nexport default class GridEditor extends Component {\n    render() {\n        return (\n            <>\n                <EditorMap />\n                <EditorMenu />\n            </>\n        );\n    }\n}\n","import Provider from \"../../redux/Provider\";\nimport \"./Router.css\";\nimport configureStore from \"../../redux/store\";\nimport CityScopeJS from \"../CityScopeJS/CityScopeJS\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport React, { Component } from \"react\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport SplashScreen from \"../SplashScreen/SplashScreen\";\nimport GridEditor from \"../GridEditor/GridEditor\";\n\n/**\n *  ! https://material-ui.com/customization/palette/\n */\nconst theme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        background: { default: \"#000\", paper: \"#29323c\" },\n    },\n});\n\nconst AppRouter = () => {\n    let url = window.location.toString();\n    let pre = \"cityscope=\";\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length);\n    let app = null;\n    // check URL for proper CS project link\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\n        console.log(\"Loading CityScope project: \" + cityscopePrjName);\n        app = <CityScopeJS tableName={cityscopePrjName} />;\n    } else if (window.location.search === \"?editor\") {\n        app = <GridEditor />;\n    } else {\n        app = <SplashScreen />;\n    }\n\n    return app;\n};\n\nexport default class Router extends Component {\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Provider store={configureStore()}>\n                    <AppRouter />\n                </Provider>\n            </ThemeProvider>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Router from \"./components/Router/Router\";\n\nconst root = document.getElementById(\"root\");\nconst render = () => {\n    return ReactDOM.render(<Router />, root);\n};\n\nrender(Router);\n\nif (module.hot) {\n    module.hot.accept(Router, () => {\n        const hotModule = require(\"./components/Router/Router\").default;\n        render(hotModule);\n    });\n}\n"],"sourceRoot":""}