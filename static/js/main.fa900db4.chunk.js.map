{"version":3,"sources":["redux/Provider.js","redux/actions.js","redux/initialState.js","redux/reducer.js","redux/store.js","components/CityScopeJS/CityIO/utils.js","components/CityScopeJS/CityIO/cityIO.js","components/CityScopeJS/BaseMap/utils/BaseMapUtils.js","components/CityScopeJS/MenuContainer/EditMenu/TypeInfo.js","components/CityScopeJS/MenuContainer/EditMenu/EditMenu.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/ABMLegend.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/styles.js","components/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/AccessSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/index.js","components/CityScopeJS/MenuContainer/FABMenu/index.js","components/CityScopeJS/MenuContainer/SaveMenu/styles.js","components/CityScopeJS/MenuContainer/SaveMenu/components/SaveAsScenario/index.js","components/CityScopeJS/MenuContainer/SaveMenu/components/ScenarioItems/index.js","components/CityScopeJS/MenuContainer/SaveMenu/index.js","components/CityScopeJS/MenuContainer/MenuContainer.js","components/CityScopeJS/BaseMap/components/PaintBrush/PaintBrush.js","components/CityScopeJS/BaseMap/components/CellMeta.js","components/CityScopeJS/BaseMap/components/PaintBrush/index.js","components/CityScopeJS/BaseMap/components/AnimationComponent.js","components/CityScopeJS/BaseMap/utils/EffectsUtils.js","components/CityScopeJS/BaseMap/layers/AccessLayer.js","components/CityScopeJS/BaseMap/layers/AggregatedTripsLayer.js","components/CityScopeJS/BaseMap/layers/ABMLayer.js","components/CityScopeJS/BaseMap/layers/GridLayer.js","components/CityScopeJS/BaseMap/BaseMap.js","components/CityScopeJS/ProjectionMapping/util.ts","components/CityScopeJS/ProjectionMapping/anchor.tsx","components/CityScopeJS/ProjectionMapping/deleteLocalStorage.js","components/CityScopeJS/ProjectionMapping/ProjectionMapping.tsx","components/CityScopeJS/BaseMap/index.js","components/CityScopeJS/VisContainer/Radar/Radar.js","components/CityScopeJS/VisContainer/DownloadRawData/DownloadRawData.js","components/CityScopeJS/VisContainer/BarChart/BarChart.js","components/CityScopeJS/VisContainer/AreaCalc/AreaCalc.js","components/CityScopeJS/VisContainer/VisContainer.js","components/CityScopeJS/CityIO/LoadingSpinner/index.js","components/CityScopeJS/CityScopeJS.js","components/SplashScreen/GetGITdate.js","components/SplashScreen/SplashScreen.js","components/GridEditor/EditorMap/EditorBrush.js","components/GridEditor/EditorMap/EditorMap.js","components/GridEditor/EditorMenu/TypesEditor/TypesEditor.js","components/GridEditor/EditorMenu/GridProps/GridMaker/gridCreator.js","components/GridEditor/EditorMenu/GridProps/GridMaker/GridMaker.js","components/GridEditor/EditorMenu/GridProps/CommitGrid/CommitGrid.js","components/GridEditor/EditorMenu/GridProps/CenterMapButton/CenterMapButton.js","components/GridEditor/EditorMenu/GridProps/GridProps.js","components/GridEditor/EditorMenu/EditorMenu.js","components/GridEditor/GridEditor.js","components/Router/Router.js","index.js"],"names":["ProviderWrapper","children","store","getCityioData","data","type","listenToSlidersEvents","listenToEditMenu","setReadyState","setLoadingState","setScenarioNames","addLoadingModules","removeLoadingModules","listenToRowEdits","listenToBaseMapCenter","listOfToggles","Object","keys","settings","menu","toggles","menuInitState","i","length","values","showOnInit","push","initialState","MENU","CITYIO","SCENARIO_NAMES","MAP","LOADING_MODULES","SLIDERS","time","map","layers","ABM","startSimHour","currentSimHour","endSimHour","speed","animationSpeed","ABM_MODE","ACCESS_TOGGLE","SELECTED_TYPE","READY","LOADING","ROW_EDIT","BASE_MAP_CENTER","latCenter","lonCenter","TYPES_LIST","GRID_CREATED","reducer","state","action","Set","filter","x","includes","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","getScenarioIndices","tableName","url","cityIO","baseURL","axios","get","then","res","scenarioIndices","str","parseInt","replace","promises","id","getScenarioName","Promise","all","r","name","catch","err","console","log","getAPICall","URL","a","response","CityIO","props","useState","hashId","setHashId","hashes","setHashes","cityioURL","cityioData","useSelector","dispatch","useDispatch","update","newHashId","setTimeout","interval","newHashes","loadingModules","pickedModules","cityIOmodules","forEach","module","modules","modulesData","reduce","obj","k","useEffect","timer","clearTimeout","getModules","hexToRgb","hex","result","exec","testHex","hexString","test","_postMapEditsToCityIO","endPoint","expectUpdateModules","val","expectUpdate","cityIOKeys","getState","has","options","method","headers","Accept","status","error","_handleGridcellEditing","e","selectedType","setSelectedCellsState","pickingRadius","deckGLRef","height","color","multiSelectedObj","dim","y","current","pickObjects","width","_multipleObjPicked","selected","thisCellProps","object","properties","interactive","TypeInfo","COLOR_SCALE","hoveredRadial","setHoveredRadial","typeInfo","attr","index","angle","proportion","label","JSON","stringify","use","careateData","colorType","animation","className","innerRadius","radialRadius","radius","getLabel","d","showLabels","getAngle","onValueMouseOver","evt","onSeriesMouseOut","padAngle","value","style","background","fontSize","Typography","variant","gutterBottom","connect","classes","makeStyles","theme","drawer","zIndex","marginAutoContainer","display","margin","marginAutoItem","useStyles","React","selectedIndex","setSelectedIndex","marks","parseTypeInfo","parse","Drawer","anchor","open","paper","LanduseTypesList","iconsArr","col","LBCS","GEOGRID","types","NAICS","rgbCol","typeHasHeightProps","Fragment","key","Math","random","Paper","elevation","ListItem","alignItems","button","onClick","event","typeProps","list","ListItemAvatar","Avatar","backgroundColor","charAt","ListItemText","primary","listItemPrimaryText","secondary","listItemSecondaryText","Collapse","in","Box","flexDirection","p","m","Slider","valueLabelDisplay","slider","onChangeCommitted","getAriaLabel","toString","min","max","List","createTypesIcons","root","marginLeft","subtitle1","marginTop","subtitle2","ABMLegend","tripsAttr","trips","tripsData","modes","mode","profiles","profile","tripTypeValue","items","string","legendData","title","prepareLegendData","ABMSubmenu","sliders","settripTypeValue","FormControl","component","RadioGroup","aria-label","onChange","target","FormControlLabel","control","Radio","newValue","aria-labelledby","ShadowSubmenu","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","access","c","heatmap","colors","l","startColor","endColor","startTitle","endTitle","textTransform","ListItemSecondaryAction","Switch","edge","checked","TogglesMenu","paddingLeft","paddingRight","padding","spacing","drawerPaper","toggleDrawer","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","thisToggle","displayName","ABM2","BackdropProps","invisible","justifyContent","Fab","FABMenu","position","paddingTop","toggleSaveDrawer","Tooltip","disabled","SaveAsScenario","setOpen","setName","handleClose","scenarioNames","postScenario","GEOGRIDDATA","info","Button","startIcon","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","fullWidth","DialogActions","newScenarioIndex","getScenarioIndex","ScenarioItems","scenario","getScenario","deleteScenario","SaveMenu","MenuContainer","drawerOpen","saveDrawerOpen","setState","indexOf","updatedMenuState","splice","showEditMenu","PaintBrush","mousePos","hoveredCells","isInteractiveCell","divSize","colorTrans","mouseX","clientX","mouseY","clientY","msg","border","mouseDown","borderColor","borderRadius","pointerEvents","left","top","CellMeta","fontWeight","hoveredObj","PaintBrushContainer","editOn","AnimationComponent","animationFrame","this","cancelAnimationFrame","_animate","rotateOn","ABMOn","viewState","updaters","sunEffects","setViewState","bearing","startHour","endHour","t","updateSunDirection","requestAnimationFrame","bind","Component","effectsRef","currentDateMidnight","Date","setHours","date","getTime","directionalLights","timestamp","UTC","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","AccessLayer","HeatmapLayer","colorRange","radiusPixels","opacity","threshold","getPosition","coordinates","getWeight","updateTriggers","AggregatedTripsLayer","ABMmode","PathLayer","_shadow","getPath","noisePath","path","getColor","getWidth","transitions","ABMLayer","zoomLevel","TripsLayer","getTimestamps","timestamps","widthScale","rounded","trailLength","currentTime","GridLayer","keyDownState","selectedCellsState","setDraggingWhileEditing","setHoveredObj","deckGL","GeoJsonLayer","pickable","extruded","wireframe","lineWidthScale","lineWidthMinPixels","getElevation","getFillColor","onDrag","onDragStart","onHover","onDragEnd","Map","draggingWhileEditing","initialViewState","setKeyDownState","setMousePos","setMouseDown","setAccess","setGEOGRID","setABM","loaded","setLoaded","useRef","shadowsOn","resetViewOn","_rightClickViewRotate","ambientLight","AmbientLight","intensity","dirLight","_SunLight","lightingEffect","LightingEffect","shadowColor","_setupSunEffects","_setViewStateToTableHeader","features","_proccessGridData","accessData","geometry","_proccessAccessData","dataProps","pitch","header","longitude","latitude","zoom","rotation","orthographic","document","getElementById","addEventListener","preventDefault","layersKey","AGGREGATED_TRIPS","GRID","ACCESS","layerOrder","onKeyDown","nativeEvent","onKeyUp","onMouseMove","onMouseUp","onMouseDown","ref","onViewStateChange","layer","_renderLayers","effects","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","asyncRender","reuseMaps","mapboxApiAccessToken","process","mapStyle","blue","preventStyleDiffing","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","vectorToTransform","vector","styles","container","cursor","anchorSize","bottom","right","AnchorComponent","translation","onMouseEnter","transform","DeleteLocalStorage","Grid","justify","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","ProjectionMapping","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","onAnchorMouseUp","isEditMode","newVector","_clearLocalStraoge","localStorage","getItem","removeItem","location","reload","getBoundingClientRect","prevProps","prevState","ls","setItem","removeEventListener","anchorStyle","anchorClassName","MapContainer","_checkKeystone","overflow","Radar","domains","radarData","radarSize","drawerWidth","indicators","refData","viz_type","ref_value","domain","generateData","polygons","fillOpacity","strokeWidth","axes","text","fill","labels","textAnchor","stroke","tickValues","Array","v","DownloadRawData","element","createElement","file","Blob","href","createObjectURL","download","body","appendChild","click","downloadTxtFile","size","barChartData","hoverdNode","dataArr","hoveredNode","xType","stackBy","yDomain","tickLabelAngle","refChartData","AreaCalc","cellSize","geoGridData","calcAreaObj","gridCellData","typeName","hasOwnProperty","count","area","g","valToHex","rgbToHex","radialData","calcArea","labelsRadiusMultiplier","labelsStyle","textShadow","showRadar","BarChart","override","css","LoadingSpinner","marginBottom","marginRight","loading","App","ready","GetGITdate","author","branch","sha","link","gitMeta","setGitMeta","fetch","json","commit","textAlign","maxWidth","flex","inputRoot","labelRoot","labelFocused","caption","SplashScreen","textFieldContent","setTextFieldContent","autoComplete","handleTextFieldChange","InputProps","InputLabelProps","focused","loadCityScopeJSproject","SelectionTarget","_hexToRgb","BaseMap","_toggleOrthoView","_onViewStateChange","componentDidUpdate","mapCenter","_mulipleObjPicked","_renderSelectionTarget","_handleKeyUp","_handleKeyDown","dirLightSettings","stroked","filled","createdGrid","visible","cellInfo","rightButton","deck","sat","mapDispatchToProps","TypesEditor","columns","field","lookup","No","Web","TUI","typesArray","createtypesArray","selectedRow","setSelectedRow","rowColor","setRowColor","item","xs","paging","search","selection","rowStyle","rowData","tableData","onRowClick","row","editable","onRowAdd","newData","resolve","onRowUpdate","oldData","onRowDelete","deg_to_rad","deg","PI","rad_to_deg","rad","randomProperty","GridMaker","handleGridCreation","grid","gridProps","top_left_lon","parseFloat","top_left_lat","userPrj","projection","cell_size","nrows","ncols","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","rndType","geojsonPolygon","polygon_xy","polygon_ll","ll","gridCreator","prepareData","struct","typesList","geoJsonFeatures","geoGridObject","newTypesList","oldType","String","CommitGrid","reqResonse","setReqResonse","reduxState","hasGrid","postGridToCityIO","geoGridObj","toLowerCase","requestsList","geoGridURL","geoGridDataURL","cityscopeJSendpoint","Link","reqResonseUI","dataStr","encodeURIComponent","downloadAnchorNode","setAttribute","remove","downloadObjectAsJson","CenterMapButton","GridProps","flexWrap","formValues","setformValues","handleChangeForm","noValidate","textField","defaultValue","inputProps","helperText","EditorMenu","GridEditor","EditorMap","createMuiTheme","palette","default","AppRouter","pre","cityscopePrjName","substring","app","Router","ThemeProvider","CssBaseline","Provider","ReactDOM","render"],"mappings":"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","file":"static/js/main.fa900db4.chunk.js","sourcesContent":["import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","/**\n * ACTIONS\n */\nexport const GET_CITYIO_DATA = \"GET_CITYIO_DATA\";\nexport function getCityioData(data) {\n    return { type: GET_CITYIO_DATA, data };\n}\n\nexport const LISTEN_TO_MAP_EVENTS = \"LISTEN_TO_MAP_EVENTS\";\nexport function listenToMapEvents(data) {\n    return { type: LISTEN_TO_MAP_EVENTS, data };\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = \"LISTEN_TO_ABM_SLIDERS\";\nexport function listenToSlidersEvents(data) {\n    return { type: LISTEN_TO_ABM_SLIDERS, data };\n}\n\nexport const LISTEN_TO_ABM_MODE = \"LISTEN_TO_ABM_MODE\";\nexport function listenToABMmode(data) {\n    return { type: LISTEN_TO_ABM_MODE, data };\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = \"LISTEN_TO_ACCESS_TOGGLE\";\nexport function listenToAccessToggle(data) {\n    return { type: LISTEN_TO_ACCESS_TOGGLE, data };\n}\n\nexport const MENU_INTERACTION = \"MENU_INTERACTION\";\nexport function listenToMenuUI(data) {\n    return { type: MENU_INTERACTION, data };\n}\n\nexport const LISTEN_TO_EDIT_MENU = \"LISTEN_TO_EDIT_MENU\";\nexport function listenToEditMenu(data) {\n    return { type: LISTEN_TO_EDIT_MENU, data };\n}\n\nexport const SET_READY_STATE = \"SET_READY_STATE\";\nexport function setReadyState(data) {\n    return { type: SET_READY_STATE, data };\n}\n\nexport const SET_LOADING_STATE = \"SET_LOADING_STATE\";\nexport function setLoadingState(data) {\n    return { type: SET_LOADING_STATE, data };\n}\n\nexport const SET_SCENARIO_NAMES = \"SET_SCENARIO_NAMES\";\nexport function setScenarioNames(data) {\n    return { type: SET_SCENARIO_NAMES, data };\n}\n\nexport const ADD_LOADING_MODULES = \"ADD_LOADING_MODULES\";\nexport function addLoadingModules(data) {\n    return { type: ADD_LOADING_MODULES, data };\n}\n\nexport const REMOVE_LOADING_MODULES = \"REMOVE_LOADING_MODULES\";\nexport function removeLoadingModules(data) {\n    return { type: REMOVE_LOADING_MODULES, data };\n}\n\n/**\n * Editor Actions\n */\n\nexport const LISTEN_TO_GRID_CREATOR = \"LISTEN_TO_GRID_CREATOR\";\nexport function listenToGridCreator(data) {\n    return { type: LISTEN_TO_GRID_CREATOR, data };\n}\n\nexport const LISTEN_TO_ROW_EDIT = \"LISTEN_TO_ROW_EDIT\";\nexport function listenToRowEdits(data) {\n    return { type: LISTEN_TO_ROW_EDIT, data };\n}\n\nexport const LISTEN_TO_TYPES_LIST = \"LISTEN_TO_TYPES_LIST\";\nexport function listeonToTypesList(data) {\n    return { type: LISTEN_TO_TYPES_LIST, data };\n}\n\nexport const LISTEN_TO_BASE_MAP_CENTER = \"LISTEN_TO_BASE_MAP_CENTER\";\nexport function listenToBaseMapCenter(data) {\n    return { type: LISTEN_TO_BASE_MAP_CENTER, data };\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    SCENARIO_NAMES: [],\n    MAP: {},\n    LOADING_MODULES: [],\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.currentSimHour,\n            settings.map.layers.ABM.endSimHour,\n        ],\n        speed: settings.map.layers.ABM.animationSpeed,\n    },\n    ABM_MODE: \"mode\",\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: null,\n    READY: false,\n    LOADING: false,\n\n    /**\n     * ! EDITOR INIT STATE\n     */\n\n    ROW_EDIT: null,\n    BASE_MAP_CENTER: {\n        latCenter: null,\n        lonCenter: null,\n    },\n    TYPES_LIST: null,\n    GRID_CREATED: null,\n};\n\nexport default initialState;\n","import {\n    GET_CITYIO_DATA,\n    MENU_INTERACTION,\n    LISTEN_TO_MAP_EVENTS,\n    LISTEN_TO_ABM_SLIDERS,\n    LISTEN_TO_EDIT_MENU,\n    SET_READY_STATE,\n    SET_LOADING_STATE,\n    SET_SCENARIO_NAMES,\n    LISTEN_TO_ACCESS_TOGGLE,\n    LISTEN_TO_ROW_EDIT,\n    LISTEN_TO_TYPES_LIST,\n    LISTEN_TO_GRID_CREATOR,\n    LISTEN_TO_BASE_MAP_CENTER,\n    LISTEN_TO_ABM_MODE,\n    ADD_LOADING_MODULES,\n    REMOVE_LOADING_MODULES,\n} from \"./actions\";\nimport initialState from \"./initialState\";\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_CITYIO_DATA:\n            return { ...state, CITYIO: action.data };\n        case MENU_INTERACTION:\n            return { ...state, MENU: action.data };\n        case LISTEN_TO_MAP_EVENTS:\n            return { ...state, MAP: action.data };\n        case LISTEN_TO_ABM_SLIDERS:\n            return { ...state, SLIDERS: action.data };\n        case LISTEN_TO_ABM_MODE:\n            return { ...state, ABM_MODE: action.data };\n        case LISTEN_TO_ACCESS_TOGGLE:\n            return { ...state, ACCESS_TOGGLE: action.data };\n        case LISTEN_TO_EDIT_MENU:\n            return { ...state, SELECTED_TYPE: action.data };\n        case SET_READY_STATE:\n            return { ...state, READY: action.data };\n        case SET_LOADING_STATE:\n            return { ...state, LOADING: action.data };\n        case SET_SCENARIO_NAMES:\n            return { ...state, SCENARIO_NAMES: action.data };\n        case ADD_LOADING_MODULES:\n            return {\n                ...state,\n                LOADING_MODULES: [\n                    ...new Set([...state.LOADING_MODULES, ...action.data]),\n                ],\n            };\n        case REMOVE_LOADING_MODULES:\n            return {\n                ...state,\n                LOADING_MODULES: state.LOADING_MODULES.filter(\n                    (x) => !action.data.includes(x)\n                ),\n            };\n\n        //! Editor\n        case LISTEN_TO_ROW_EDIT:\n            return { ...state, ROW_EDIT: action.data };\n\n        case LISTEN_TO_TYPES_LIST:\n            return { ...state, TYPES_LIST: action.data };\n\n        case LISTEN_TO_GRID_CREATOR:\n            return { ...state, GRID_CREATED: action.data };\n\n        case LISTEN_TO_BASE_MAP_CENTER:\n            return { ...state, BASE_MAP_CENTER: action.data };\n\n        default:\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nconst store = configureStore();\n\nexport default store;\n","import axios from \"axios\";\nimport settings from \"../../../settings/settings.json\";\n\nexport const getScenarioIndices = (\n    tableName,\n    setScenarioNames,\n    setLoadingState\n) => {\n    var url = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n    axios\n        .get(url)\n        .then((res) => {\n            const metaDataKeys = Object.keys(res.data);\n            const scenarioIndices = metaDataKeys\n                .filter((str) => str.includes(\"scenarios\"))\n                .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n            const promises = [];\n            for (const id of scenarioIndices) {\n                promises.push(getScenarioName(tableName, id));\n            }\n            Promise.all(promises)\n                .then((res) => {\n                    setScenarioNames(\n                        res.map((r) => ({\n                            name: r.data.name,\n                            id: r.data.id,\n                        }))\n                    );\n                    setLoadingState && setLoadingState(false);\n                })\n                .catch((err) =>\n                    console.log(\"error getting scenario names\", err)\n                );\n        })\n        .catch((err) => {\n            console.log(\"Error getting scenarios\", err);\n        });\n};\n\nexport const getScenarioName = (tableName, id) => {\n    const url =\n        settings.cityIO.baseURL + tableName + \"/scenarios\" + id + \"/info\";\n    return axios.get(url);\n};\n","import { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n    setScenarioNames,\n    addLoadingModules,\n    removeLoadingModules,\n} from \"../../../redux/actions\";\nimport settings from \"../../../settings/settings.json\";\nimport { getScenarioIndices } from \"./utils\";\n\nconst getAPICall = async (URL) => {\n    try {\n        const response = await axios.get(URL);\n        return response.data;\n    } catch (err) {\n        console.log(err);\n    }\n};\n\nexport default function CityIO(props) {\n    const { tableName } = props;\n    const [hashId, setHashId] = useState(null);\n    const [hashes, setHashes] = useState({});\n    const cityioURL = settings.cityIO.baseURL + tableName;\n    const cityioData = useSelector((state) => state.CITYIO);\n\n    const dispatch = useDispatch();\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    useEffect(() => {\n        const timer = setTimeout(update, settings.cityIO.interval);\n        console.log(\"reading cityIO every\" + settings.cityIO.interval + \"ms\");\n        return () => clearTimeout(timer);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    async function update() {\n        // recursively get hashes\n        const newHashId = await getAPICall(cityioURL + \"/meta/id\");\n        if (hashId !== newHashId) {\n            setHashId(newHashId);\n        }\n        setTimeout(update, settings.cityIO.interval);\n    }\n\n    async function getModules() {\n        const newHashes = await getAPICall(cityioURL + \"/meta/hashes\");\n        const promises = [];\n        const loadingModules = [];\n        const pickedModules = settings.cityIO.cityIOmodules.map((x) => x.name);\n        // for each of the modules in settings, add api call to promises\n        pickedModules.forEach((module) => {\n            if (hashes[module] !== newHashes[module]) {\n                promises.push(getAPICall(cityioURL + \"/\" + module));\n                loadingModules.push(module);\n            } else {\n                promises.push(null);\n            }\n        });\n        dispatch(addLoadingModules(loadingModules));\n        const modules = await Promise.all(promises);\n        setHashes(newHashes);\n\n        // update cityio object with modules data\n        const modulesData = pickedModules.reduce((obj, k, i) => {\n            if (modules[i]) {\n                console.log(`updating ${k}`);\n                return { ...obj, [k]: modules[i] };\n            } else {\n                return obj;\n            }\n        }, cityioData);\n        modulesData.tableName = tableName;\n\n        dispatch(removeLoadingModules(loadingModules));\n\n        // send to cityio\n        dispatch(getCityioData(modulesData));\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        dispatch(setReadyState(true));\n        dispatch(setLoadingState(false));\n    }\n\n    useEffect(() => {\n        //! only update if hashId changes\n        if (!hashId) {\n            return;\n        }\n        // reset the state of loading flag\n        dispatch(setLoadingState(true));\n        // set Scenario Names and Ids\n        getScenarioIndices(tableName, (data) =>\n            dispatch(setScenarioNames(data))\n        );\n        getModules();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [hashId]);\n\n    return null;\n}\n","import axios from \"axios\";\nimport { addLoadingModules } from \"../../../../redux/actions\";\nimport store from \"../../../../redux/store\";\nimport settings from \"../../../../settings/settings.json\";\n\n/**\n * conver rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n    function valToHex(c) {\n        var hex = c.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n    return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n/**\n * conver hex to rgb array\n */\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n    let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n    return isHex;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n    // get the static grid\n    const GEOGRID = cityioData.GEOGRID;\n    // if GEOGRRIDDATA exist and is the same length as our grid\n    if (\n        cityioData.GEOGRIDDATA &&\n        cityioData.GEOGRIDDATA.length === cityioData.GEOGRID.features.length\n    ) {\n        // get the grid data\n        const GEOGRIDDATA = cityioData.GEOGRIDDATA;\n        // update GEOGRID features from GEOGRIDDATA on cityio\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n            // inject id\n            GEOGRID.features[i].properties.id = i;\n        }\n    }\n    const newGrid = JSON.parse(JSON.stringify(GEOGRID));\n    return newGrid;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (data) => {\n    const accessData = data.access;\n    // get colors from settings\n    let coordinates = accessData.features.map((d) => d.geometry.coordinates);\n    let values = accessData.features.map((d) => d.properties);\n    let heatmap = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        heatmap.push({\n            coordinates: coordinates[i],\n            values: values[i],\n        });\n    }\n    return heatmap;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n    const expectUpdateModules = new Set(\n        settings.cityIO.cityIOmodules\n            .filter((val) => val.expectUpdate)\n            .map((val) => val.name)\n    );\n    const cityIOKeys = new Set(Object.keys(store.getState().CITYIO));\n\n    const loadingModules = [...cityIOKeys].filter((i) =>\n        expectUpdateModules.has(i)\n    );\n\n    let postURL =\n        \"https://cityio.media.mit.edu/api/table/update/\" + tableName + endPoint;\n\n    const options = {\n        method: \"post\",\n        url: postURL,\n        data: data,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options)\n        .then((res) => {\n            if (res.data.status === \"ok\") {\n                store.dispatch(addLoadingModules(loadingModules));\n            }\n        })\n        .catch((error) => {\n            console.log(\"ERROR:\", error);\n        });\n};\n\n// /**\n//  * Description. uses deck api to\n//  * collect objects in a region\n//  * @argument{object} e  picking event\n//  */\nexport const _multipleObjPicked = (e, pickingRadius, deckGLRef) => {\n    const dim = pickingRadius;\n    const x = e.x - dim / 2;\n    const y = e.y - dim / 2;\n    let multipleObj = deckGLRef.current.pickObjects({\n        x: x,\n        y: y,\n        width: dim,\n        height: dim,\n    });\n    return multipleObj;\n};\n\n// /**\n//  * Description. allow only to pick cells that are\n//  *  not of CityScope TUI & that are interactable\n//  * so to not overlap TUI activity\n//  */\nexport const _handleGridcellEditing = (\n    e,\n    selectedType,\n    setSelectedCellsState,\n    pickingRadius,\n    deckGLRef\n) => {\n    const { height, color, name } = selectedType;\n    const multiSelectedObj = _multipleObjPicked(e, pickingRadius, deckGLRef);\n    multiSelectedObj.forEach((selected) => {\n        const thisCellProps = selected.object.properties;\n        if (thisCellProps && thisCellProps.interactive) {\n            thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n            thisCellProps.height = height;\n            thisCellProps.name = name;\n        }\n    });\n    setSelectedCellsState(multiSelectedObj);\n};\n","import React, { useState } from \"react\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function TypeInfo(props) {\n    const COLOR_SCALE = [\"#85C4C8\", \"#C22E00\", \"#1E96BE\", \"#EC9370\", \"#F6D18A\"];\n\n    const radialRadius = 75;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    // method to create data for radial chart\n    const careateData = () => {\n        // array for data\n        let data = [];\n        // check type info: if string, parse, else object\n        let info = props.typeInfo;\n        // get the type data\n        info.forEach((attr, index) => {\n            data.push({\n                angle: attr.proportion,\n                label: JSON.stringify(attr.use),\n                color: COLOR_SCALE[index],\n            });\n        });\n\n        return data;\n    };\n\n    const data = careateData();\n    const boxStyle = { height: \"10px\", width: \"10px\" };\n\n    function buildValue(hoveredCell) {\n        const { radius, angle, angle0 } = hoveredCell;\n        const truedAngle = (angle + angle0) / 2;\n        return {\n            x: radius * Math.cos(truedAngle),\n            y: radius * Math.sin(truedAngle),\n        };\n    }\n\n    return (\n        <>\n            <RadialChart\n                colorType=\"literal\"\n                animation={true}\n                className={\"donut-chart-example\"}\n                innerRadius={radialRadius / 2 - radialRadius / 5}\n                radius={radialRadius / 2}\n                getLabel={(d) => d.label}\n                showLabels={false}\n                getAngle={(d) => d.angle}\n                data={data}\n                onValueMouseOver={(evt) => {\n                    setHoveredRadial(evt);\n                }}\n                onSeriesMouseOut={() => setHoveredRadial(false)}\n                width={radialRadius}\n                height={radialRadius}\n                padAngle={0.1}\n            >\n                {hoveredRadial !== false && (\n                    <Hint value={hoveredRadial}>\n                        <div\n                            style={{\n                                background: \"rgba(0,0,0,0.8)\",\n                                fontSize: 14,\n                            }}\n                        >\n                            <Typography variant={\"caption\"} gutterBottom>\n                                {hoveredRadial.label}\n                            </Typography>\n                        </div>\n                    </Hint>\n                )}\n            </RadialChart>\n        </>\n    );\n}\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { listenToEditMenu } from \"../../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { testHex, hexToRgb } from \"../../BaseMap/utils/BaseMapUtils\";\nimport TypeInfo from \"./TypeInfo\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Box from \"@material-ui/core/Box\";\n\nfunction EditMenu(props) {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            width: 300,\n            zIndex: theme.zIndex.drawer + 1,\n        },\n\n        marginAutoContainer: {\n            width: \"100%\",\n            display: \"flex\",\n            margin: \"auto\",\n        },\n        marginAutoItem: {\n            margin: \"auto\",\n            width: \"80%\",\n            height: \"80%\",\n        },\n    }));\n\n    const classes = useStyles();\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    let selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const height = selectedType ? selectedType.height : null;\n\n    const marks = [\n        { value: 0, label: \"min\" },\n        { value: 100, label: \"max\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    const parseTypeInfo = (typeInfo) => {\n        //! check type info: if string, parse, else object\n        let info =\n            typeof typeInfo == \"string\" ? JSON.parse(typeInfo) : typeInfo;\n\n        return info;\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type, index) => {\n            let col = LanduseTypesList[type].color;\n            // get the LBCS/NAICS types info\n            let LBCS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].LBCS\n            );\n            let NAICS = parseTypeInfo(\n                props.cityioData.GEOGRID.properties.types[type].NAICS\n            );\n\n            if (testHex(col)) {\n                col = hexToRgb(col);\n            }\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n            let typeHasHeightProps = false;\n            if (LanduseTypesList[type].height) {\n                typeHasHeightProps = true;\n            }\n\n            iconsArr.push(\n                <React.Fragment key={Math.random()}>\n                    <Paper elevation={5}>\n                        <ListItem\n                            key={Math.random()}\n                            alignItems=\"flex-start\"\n                            button\n                            variant=\"raised\"\n                            selected={selected}\n                            onClick={(event) =>\n                                handleListItemClick(\n                                    event,\n                                    type,\n                                    LanduseTypesList[type]\n                                )\n                            }\n                            className={classes.list}\n                        >\n                            <ListItemAvatar key={Math.random()}>\n                                <Avatar style={{ backgroundColor: rgbCol }}>\n                                    {type.charAt(0)}\n                                </Avatar>\n                            </ListItemAvatar>\n\n                            <ListItemText\n                                key={Math.random()}\n                                classes={{\n                                    primary: classes.listItemPrimaryText,\n                                    secondary: classes.listItemSecondaryText,\n                                }}\n                                primary={type}\n                            />\n                        </ListItem>\n                    </Paper>\n\n                    {typeHasHeightProps && (\n                        <Collapse in={selected} key={Math.random()}>\n                            <div className={classes.marginAutoContainer}>\n                                <div className={classes.marginAutoItem}>\n                                    <Paper elevation={10}>\n                                        <Box\n                                            display=\"flex\"\n                                            flexDirection=\"row\"\n                                            p={1}\n                                            m={1}\n                                        >\n                                            <Box p={1}>\n                                                {LBCS && (\n                                                    <>\n                                                        <Typography\n                                                            gutterBottom\n                                                        >\n                                                            LBCS\n                                                        </Typography>\n                                                        <TypeInfo\n                                                            typeInfo={LBCS}\n                                                        />\n                                                    </>\n                                                )}\n                                            </Box>\n                                            <Box p={1}>\n                                                {NAICS && (\n                                                    <>\n                                                        <Typography\n                                                            gutterBottom\n                                                        >\n                                                            NAICS\n                                                        </Typography>\n                                                        <TypeInfo\n                                                            typeInfo={NAICS}\n                                                        />\n                                                    </>\n                                                )}\n                                            </Box>\n                                        </Box>\n\n                                        <div className={classes.marginAutoItem}>\n                                            <Typography gutterBottom>\n                                                Set Height\n                                            </Typography>\n                                            <Slider\n                                                key={Math.random()}\n                                                value={height}\n                                                valueLabelDisplay=\"auto\"\n                                                className={classes.slider}\n                                                onChangeCommitted={(\n                                                    event,\n                                                    value\n                                                ) =>\n                                                    dispatch(\n                                                        listenToEditMenu({\n                                                            ...selectedType,\n                                                            height: value,\n                                                        })\n                                                    )\n                                                }\n                                                getAriaLabel={(index) =>\n                                                    index.toString()\n                                                }\n                                                min={marks[0].value}\n                                                max={marks[1].value}\n                                                marks={marks}\n                                            ></Slider>\n                                        </div>\n                                    </Paper>\n                                </div>\n                            </div>\n                        </Collapse>\n                    )}\n                </React.Fragment>\n            );\n        });\n        return <List>{iconsArr}</List>;\n    };\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            {createTypesIcons(props.cityioData.GEOGRID.properties.types)}\n        </Drawer>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { DiscreteColorLegend } from \"react-vis\";\nimport Typography from \"@material-ui/core/Typography\";\n\n// ! https://github.com/uber/react-vis/blob/premodern/showcase/legends/searchable-discrete-color.js\n\nexport default function ABMLegend(props) {\n    const tripsAttr = props.trips.tripsData;\n    const modes = tripsAttr.mode;\n    const profiles = tripsAttr.profile;\n\n    const prepareLegendData = (string) => {\n        let data = string === \"mode\" ? modes : profiles;\n\n        let legendData = [];\n        for (const key in data) {\n            legendData.push({ title: data[key].name, color: data[key].color });\n        }\n        return legendData;\n    };\n\n    return (\n        <>\n            <Typography variant=\"h6\" gutterBottom>\n                {props.tripTypeValue === \"mode\" ? \"Mode Choise\" : \"Profiles \"}\n            </Typography>\n            <DiscreteColorLegend\n                height={300}\n                width={150}\n                items={prepareLegendData(props.tripTypeValue)}\n            />\n        </>\n    );\n}\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    listenToSlidersEvents,\n    listenToABMmode,\n} from \"../../../../../redux/actions\";\nimport ABMLegend from \"./ABMLegend\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst marks = [\n    {\n        value: 0,\n        label: \"12AM\",\n    },\n    {\n        value: 21600,\n        label: \"6AM\",\n    },\n    {\n        value: 43200,\n        label: \"12PM\",\n    },\n    {\n        value: 64800,\n        label: \"6PM\",\n    },\n    {\n        value: 86400,\n        label: \"12AM\",\n    },\n];\n\nfunction ABMSubmenu(props) {\n    const classes = useStyles();\n    const sliders = useSelector((state) => state.SLIDERS);\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const handleSetSpeedValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                speed: newValue,\n            })\n        );\n    };\n\n    const [tripTypeValue, settripTypeValue] = React.useState(\"mode\");\n\n    const handleABMmodeChange = (event) => {\n        dispatch(listenToABMmode(event.target.value));\n        settripTypeValue(event.target.value);\n    };\n\n    return (\n        <div className={classes.root}>\n            <FormControl component=\"fieldset\">\n                <RadioGroup\n                    aria-label=\"tripType\"\n                    name=\"tripType\"\n                    value={tripTypeValue}\n                    onChange={handleABMmodeChange}\n                >\n                    <FormControlLabel\n                        value=\"mode\"\n                        control={<Radio />}\n                        label=\"Mode Choice\"\n                    />\n                    <FormControlLabel\n                        value=\"profile\"\n                        control={<Radio />}\n                        label=\"Profile\"\n                    />\n                </RadioGroup>\n            </FormControl>\n\n            <ABMLegend trips={props} tripTypeValue={tripTypeValue} />\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Simulation Range\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n            <Typography\n                className={classes.subtitle2}\n                variant=\"subtitle2\"\n                id=\"continuous-slider\"\n                gutterBottom\n            >\n                Simulation Speed\n            </Typography>\n            <Slider\n                min={0}\n                max={100}\n                value={sliders.speed}\n                onChange={handleSetSpeedValue}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"continuous-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ABMSubmenu;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../../redux/actions\";\n\nfunction ShadowSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector((state) => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\",\n        },\n        {\n            value: 21600,\n            label: \"6AM\",\n        },\n        {\n            value: 43200,\n            label: \"12PM\",\n        },\n        {\n            value: 64800,\n            label: \"6PM\",\n        },\n        {\n            value: 86400,\n            label: \"12AM\",\n        },\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Time of day\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ShadowSubmenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { listenToAccessToggle } from \"../../../../../redux/actions\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { ContinuousColorLegend } from \"react-vis\";\n\nimport settings from \"../../../../../settings/settings.json\";\n\nfunction AccessSubmenu(props) {\n    const accessToggle = useSelector((state) => state.ACCESS_TOGGLE);\n\n    const { cityioData } = props;\n\n    const ACCESS_PROPERTIES =\n        cityioData && cityioData.access && cityioData.access.properties\n            ? cityioData.access.properties\n            : [];\n\n    const dispatch = useDispatch();\n    const c = settings.map.layers.heatmap.colors;\n    const l = c.length - 1;\n    return (\n        <List>\n            <ListItem>\n                <ContinuousColorLegend\n                    width={500}\n                    startColor={\n                        \"rgb(\" + c[0][0] + \",\" + c[0][1] + \",\" + c[0][2] + \")\"\n                    }\n                    endColor={\n                        \"rgb(\" + c[l][0] + \",\" + c[l][1] + \",\" + c[l][2] + \")\"\n                    }\n                    startTitle=\"No Access\"\n                    endTitle=\"Full Access\"\n                />\n            </ListItem>\n            {ACCESS_PROPERTIES.map((p, i) => (\n                <ListItem key={p}>\n                    <ListItemText\n                        primary={p}\n                        style={{ textTransform: \"capitalize\" }}\n                    />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            checked={accessToggle === i}\n                            onChange={() => {\n                                dispatch(listenToAccessToggle(i));\n                            }}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AccessSubmenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport settings from \"../../../../settings/settings.json\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ABMSubmenu from \"./ABMSubmenu\";\nimport ShadowSubmenu from \"./ShadowSubmenu\";\nimport AccessSubmenu from \"./AccessSubmenu\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Close from \"@material-ui/icons/Cancel\";\nimport Fab from \"@material-ui/core/Fab\";\n\nfunction TogglesMenu(props) {\n    let drawerWidth = 300;\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            display: \"flex\",\n            paddingLeft: 16,\n            paddingRight: 16,\n            width: drawerWidth,\n            padding: theme.spacing(0, 1),\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const { open, toggleDrawer, handleToggle } = props;\n\n    const { menuState, cityioData } = useSelector((state) => ({\n        menuState: state.MENU,\n        cityioData: state.CITYIO,\n    }));\n\n    const togglesMeta = settings.menu.toggles;\n    const listOfToggles = Object.keys(togglesMeta);\n\n    /**\n     * gets props with initial menu state\n     * and turn on the layer on init\n     */\n    let togglesCompsArray = [];\n    // array of loaded API modules\n    const loadedModules = Object.keys(cityioData);\n    // create each toggle\n    for (let i = 0; i < listOfToggles.length; i++) {\n        // check if the mdoule of this toggle\n        // was loaded on the API\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\n\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\n\n        if (loadedModules.includes(requireModule) || requireModule === false) {\n            const thisToggle = (\n                <div key={listOfToggles[i]}>\n                    <ListItem>\n                        <ListItemText\n                            primary={togglesMeta[listOfToggles[i]].displayName}\n                        />\n                        <ListItemSecondaryAction>\n                            <Switch\n                                edge=\"end\"\n                                onChange={handleToggle(listOfToggles[i])}\n                                checked={checked}\n                            />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"SHADOWS\" && (\n                            <Collapse in={checked} style={{ width: \"100%\" }}>\n                                <ShadowSubmenu />\n                            </Collapse>\n                        )\n                    }\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"ABM\" && (\n                            <Collapse in={checked} style={{ width: \"100%\" }}>\n                                <ABMSubmenu tripsData={cityioData.ABM2.attr} />\n                            </Collapse>\n                        )\n                    }\n                    {listOfToggles[i] === \"ACCESS\" && (\n                        <Collapse\n                            in={checked}\n                            style={{\n                                width: \"80%\",\n                                marginLeft: 24,\n                            }}\n                        >\n                            <AccessSubmenu cityioData={cityioData} />\n                        </Collapse>\n                    )}\n                </div>\n            );\n            togglesCompsArray.push(thisToggle);\n        }\n    }\n\n    return (\n        <Drawer\n            elevation={3}\n            className={classes.drawer}\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n            BackdropProps={{\n                invisible: true,\n            }}\n            anchor=\"left\"\n            open={open}\n            variant=\"persistent\"\n        >\n            <List className={classes.list}>\n                <ListItem\n                    style={{ display: \"flex\", justifyContent: \"flex-end\" }}\n                >\n                    <Fab color=\"default\" onClick={toggleDrawer}>\n                        <Close />\n                    </Fab>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"h5\" gutterBottom>\n                        MIT CityScope\n                    </Typography>\n                </ListItem>\n\n                <ListItem>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Toggle CityScope layers visability\n                    </Typography>\n                </ListItem>\n                {togglesCompsArray}\n            </List>\n        </Drawer>\n    );\n}\n\nexport default TogglesMenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Fab from \"@material-ui/core/Fab\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function FABMenu(props) {\n    const useStyles = makeStyles({\n        root: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            position: \"fixed\",\n            paddingLeft: 16,\n            paddingTop: 8,\n            zIndex: 1,\n        },\n    });\n\n    const classes = useStyles();\n\n    const menuState = useSelector((state) => state.MENU);\n    const { handleToggle, toggleDrawer, toggleSaveDrawer } = props;\n\n    return (\n        <List className={classes.root}>\n            <ListItem>\n                <Tooltip title=\"Open Layer + Settings Menu\">\n                    <Fab color=\"default\" onClick={toggleDrawer}>\n                        <MenuIcon />\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Toggle Edit Grid Mode, send to cityIO\">\n                    <Fab color=\"default\" onClick={handleToggle(\"EDIT\")}>\n                        {menuState.includes(\"EDIT\") ? (\n                            <CloudUploadIcon />\n                        ) : (\n                            <EditIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Reset View/Toggle Ortho\">\n                    <Fab color=\"default\" onClick={handleToggle(\"RESET_VIEW\")}>\n                        {menuState.includes(\"RESET_VIEW\") ? (\n                            <NavigationIcon />\n                        ) : (\n                            <NearMeIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Save/Load Scenario\">\n                    <Fab\n                        disabled={menuState.includes(\"EDIT\")}\n                        color=\"default\"\n                        onClick={toggleSaveDrawer}\n                    >\n                        <InsertDriveFileIcon />\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n        </List>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(0, 1),\n\n        display: \"flex\",\n        paddingLeft: 16,\n        paddingRight: 16,\n    },\n    list: {\n        paddingLeft: 16,\n        paddingRight: 16,\n        width: 300,\n        padding: theme.spacing(0, 1),\n    },\n}));\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLoadingState } from \"../../../../../../redux/actions\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport axios from \"axios\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function SaveAsScenario(props) {\n    const maxNumOfScenarios = 10;\n    const [open, setOpen] = React.useState(false);\n    const [name, setName] = React.useState(\"\");\n    const dispatch = useDispatch();\n    const { tableName, toggleDrawer } = props;\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const useStyles = makeStyles((theme) => ({\n        button: {\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n\n    const getScenarioIndex = () => {\n        var getURL = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const metaDataKeys = Object.keys(res.data);\n                const scenarioIndices = metaDataKeys\n                    .filter((str) => str.includes(\"scenarios\"))\n                    .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n                console.log(\"successfully got scenarios\");\n                const newScenarioIndex = scenarioIndices.length\n                    ? Math.max(...scenarioIndices) + 1\n                    : 0;\n                postScenario(newScenarioIndex);\n            })\n            .catch((err) => {\n                console.log(\"Error getting scenarios\", err);\n            });\n    };\n\n    const postScenario = (id) => {\n        const data = {\n            GEOGRIDDATA: cityioData.GEOGRIDDATA,\n            info: {\n                id,\n                name,\n            },\n        };\n\n        var postURL =\n            settings.cityIO.baseURL + \"update/\" + tableName + \"/scenarios\" + id;\n\n        const options = {\n            method: \"post\",\n            url: postURL,\n            data,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                console.log(\"Successfully saved grid data and network\");\n                dispatch(setLoadingState(false));\n                toggleDrawer();\n                handleClose();\n            })\n            .catch((error) => {\n                console.log(\"%c\" + error);\n                console.log(\"ERROR:\", error);\n                handleClose();\n            });\n    };\n\n    return (\n        <div style={{ marginLeft: 12 }}>\n            <Button\n                disabled={scenarioNames.length >= maxNumOfScenarios}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleClickOpen}\n                className={classes.button}\n                startIcon={<CloudUploadIcon />}\n            >\n                Save Scenario\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Save Scenario</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Name:</DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        fullWidth\n                        value={name}\n                        onChange={(event) => setName(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"default\">\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            dispatch(setLoadingState(true));\n                            getScenarioIndex();\n                        }}\n                        color=\"default\"\n                    >\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    setScenarioNames,\n    setLoadingState,\n} from \"../../../../../../redux/actions\";\nimport axios from \"axios\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { _postMapEditsToCityIO } from \"../../../../BaseMap/utils/BaseMapUtils\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { getScenarioIndices } from \"../../../../CityIO/utils\";\n\nfunction ScenarioItems(props) {\n    const { toggleDrawer } = props;\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n    const dispatch = useDispatch();\n\n    const getScenario = (tableName, id) => {\n        const getURL = settings.cityIO.baseURL + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const { GEOGRIDDATA } = res.data;\n                _postMapEditsToCityIO(\n                    GEOGRIDDATA,\n                    cityioData.tableName,\n                    \"/GEOGRIDDATA\"\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const deleteScenario = (tableName, id) => {\n        const getURL =\n            settings.cityIO.baseURL + \"clear/\" + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                getScenarioIndices(\n                    cityioData.tableName,\n                    (data) => dispatch(setScenarioNames(data)),\n                    (state) => dispatch(setLoadingState(state))\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const generateListItems = () =>\n        scenarioNames.map((scenario) => (\n            <ListItem key={scenario.id}>\n                <Button\n                    style={{ textTransform: \"none\" }}\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        getScenario(cityioData.tableName, scenario.id);\n                        toggleDrawer();\n                    }}\n                >\n                    <Typography variant=\"h6\">{scenario.name}</Typography>\n                </Button>\n                <Button\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        deleteScenario(cityioData.tableName, scenario.id);\n                    }}\n                >\n                    <CancelIcon />\n                </Button>\n            </ListItem>\n        ));\n\n    return <div>{generateListItems()}</div>;\n}\n\nexport default ScenarioItems;\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport SaveAsScenario from \"./components/SaveAsScenario\";\nimport ScenarioItems from \"./components/ScenarioItems\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nexport default function SaveMenu(props) {\n    const classes = useStyles();\n\n    const { tableName, open, toggleDrawer } = props;\n\n    return (\n        <Drawer\n            className={classes.root}\n            BackdropProps={{\n                invisible: true,\n            }}\n            classes={{\n                paper: classes.paper,\n            }}\n            anchor=\"left\"\n            open={open}\n            onClose={toggleDrawer}\n        >\n            <List className={classes.list}>\n                <ListItem>\n                    <Typography variant=\"h5\" gutterBottom>\n                        Scenarios\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Use this menu to save, load or delete design scenarios.\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <SaveAsScenario\n                        tableName={tableName}\n                        toggleDrawer={toggleDrawer}\n                    />\n                </ListItem>\n                <ScenarioItems toggleDrawer={toggleDrawer} />\n            </List>\n        </Drawer>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToMenuUI } from \"../../../redux/actions\";\nimport EditMenu from \"./EditMenu/EditMenu\";\nimport TogglesMenu from \"./TogglesMenu\";\nimport FABMenu from \"./FABMenu\";\nimport SaveMenu from \"./SaveMenu\";\n\nfunction MenuContainer(props) {\n    const { tableName } = props;\n    const menuState = useSelector((state) => state.MENU);\n    const dispatch = useDispatch();\n\n    const [state, setState] = React.useState({\n        drawerOpen: false,\n        saveDrawerOpen: false,\n    });\n\n    const toggleDrawer = () => {\n        setState({ ...state, drawerOpen: !state.drawerOpen });\n    };\n\n    const toggleSaveDrawer = () => {\n        setState({ ...state, saveDrawerOpen: !state.saveDrawerOpen });\n    };\n\n    const handleToggle = (value) => () => {\n        const i = menuState.indexOf(value);\n        const updatedMenuState = [...menuState];\n        if (i === -1) {\n            updatedMenuState.push(value);\n        } else {\n            updatedMenuState.splice(i, 1);\n        }\n\n        dispatch(listenToMenuUI(updatedMenuState));\n    };\n\n    const showEditMenu = menuState && menuState.includes(\"EDIT\");\n\n    return (\n        <div>\n            <TogglesMenu\n                open={state.drawerOpen}\n                toggleDrawer={toggleDrawer}\n                handleToggle={handleToggle}\n            />\n            <FABMenu\n                toggleDrawer={toggleDrawer}\n                handleToggle={handleToggle}\n                toggleSaveDrawer={toggleSaveDrawer}\n            />\n            {showEditMenu && <EditMenu key={\"EDIT\"} />}\n            <SaveMenu\n                tableName={tableName}\n                handleToggle={handleToggle}\n                toggleDrawer={toggleSaveDrawer}\n                open={state.saveDrawerOpen}\n            />\n        </div>\n    );\n}\n\nexport default MenuContainer;\n","import React from \"react\";\nimport { testHex, hexToRgb } from \"../../utils/BaseMapUtils\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \"Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}:\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    return (\n        <div\n            style={{\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                pointerEvents: \"none\",\n                backgroundColor: \"rgba(0,0,0,0.5)\",\n                padding: \"1vw\",\n                color: \"rgba(255,255,255,0.9)\",\n                zIndex: 1,\n                left: mousePos.clientX,\n                top: mousePos.clientY,\n                fontSize: \"0.65em\",\n                fontWeight: 500,\n            }}\n        >\n            <p>\n                Type:\n                {props.hoveredObj.object.properties.name}\n            </p>\n            <p>\n                Floors:\n                {props.hoveredObj.object.properties.height}\n            </p>\n            <p>\n                ID:\n                {props.hoveredObj.object.properties.id}\n            </p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { PaintBrush } from \"./PaintBrush\";\nimport { CellMeta } from \"../CellMeta\";\n\nexport default function PaintBrushContainer({\n    editOn,\n    mousePos,\n    selectedType,\n    pickingRadius,\n    mouseDown,\n    hoveredObj,\n}) {\n    if (editOn) {\n        return (\n            selectedType && (\n                <PaintBrush\n                    mousePos={mousePos}\n                    selectedType={selectedType}\n                    divSize={pickingRadius}\n                    mouseDown={mouseDown}\n                    hoveredCells={hoveredObj}\n                />\n            )\n        );\n    } else {\n        return (\n            hoveredObj && (\n                <CellMeta mousePos={mousePos} hoveredObj={hoveredObj} />\n            )\n        );\n    }\n}\n","import { Component } from \"react\";\n\nclass AnimationComponent extends Component {\n    constructor(props) {\n        super(props);\n        this.animationFrame = null;\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    _animate() {\n        const {\n            toggles: { rotateOn, ABMOn },\n            state: { viewState, sliders },\n            updaters: { listenToSlidersEvents, sunEffects, setViewState },\n            dispatch,\n        } = this.props;\n        if (rotateOn) {\n            let bearing = viewState.bearing ? viewState.bearing : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            setViewState({\n                ...viewState,\n                bearing: bearing,\n            });\n        }\n\n        if (ABMOn) {\n            const time = sliders.time[1];\n            const speed = sliders.speed;\n            const startHour = sliders.time[0];\n            const endHour = sliders.time[2];\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n\n            dispatch(\n                listenToSlidersEvents({\n                    ...sliders,\n                    time: [sliders.time[0], t, sliders.time[2]],\n                })\n            );\n\n            // update sun position\n            if (sunEffects) {\n                sunEffects.updateSunDirection(t);\n            }\n        }\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    render() {\n        return null;\n    }\n}\n\nexport default AnimationComponent;\n","import { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\n\nexport const _setupSunEffects = (effectsRef) => {\n    const ambientLight = new AmbientLight({\n        color: [255, 255, 255],\n        intensity: 0.85,\n    });\n    const dirLight = new _SunLight({\n        timestamp: 1554927200000,\n        color: [255, 255, 255],\n        intensity: 1.0,\n        _shadow: true,\n    });\n    const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n    lightingEffect.shadowColor = [0, 0, 0, 0.5];\n    effectsRef.current = [lightingEffect];\n};\n\nexport const updateSunDirection = (time, effectsRef) => {\n    var currentDateMidnight = new Date();\n    currentDateMidnight.setHours(0, 0, 0, 0);\n    var date = new Date(currentDateMidnight.getTime() + time * 1000);\n    effectsRef.current[0].directionalLights[0].timestamp = Date.UTC(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDay(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds()\n    );\n};\n","import { HeatmapLayer } from \"deck.gl\";\nimport settings from \"../../../../settings/settings.json\";\n\nexport default function AccessLayer({ data, accessToggle }) {\n    return new HeatmapLayer({\n        id: \"ACCESS\",\n        colorRange: settings.map.layers.heatmap.colors,\n        radiusPixels: 200,\n        opacity: 0.5,\n        threshold: 0.5,\n        data,\n        getPosition: (d) => d.coordinates,\n        getWeight: (d) => d.values[accessToggle],\n        updateTriggers: {\n            getWeight: [accessToggle],\n        },\n    });\n}\n","import { PathLayer } from \"deck.gl\";\nimport { hexToRgb } from \"../utils/BaseMapUtils\";\n\nexport default function AggregatedTripsLayer({ data, cityioData, ABMmode }) {\n    return new PathLayer({\n        id: \"AGGREGATED_TRIPS\",\n        _shadow: false,\n        data,\n        getPath: (d) => {\n            const noisePath =\n                Math.random() < 0.5\n                    ? Math.random() * 0.00005\n                    : Math.random() * -0.00005;\n            for (let i in d.path) {\n                d.path[i][0] = d.path[i][0] + noisePath;\n                d.path[i][1] = d.path[i][1] + noisePath;\n                d.path[i][2] = d.mode[0] * 2;\n            }\n            return d.path;\n        },\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n        opacity: 0.2,\n        getWidth: 1.5,\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { TripsLayer } from \"@deck.gl/geo-layers\";\nimport { hexToRgb } from \"../utils/BaseMapUtils\";\n\n//  * remap line width\nconst _remapValues = (value) => {\n    let remap =\n        value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n    return remap;\n};\n\nexport default function ABMLayer({\n    data,\n    cityioData,\n    ABMmode,\n    zoomLevel,\n    sliders,\n}) {\n    return new TripsLayer({\n        id: \"ABM\",\n        data,\n        getPath: (d) => d.path,\n        getTimestamps: (d) => d.timestamps,\n        getColor: (d) => {\n            let col = hexToRgb(cityioData.ABM2.attr[ABMmode][d[ABMmode]].color);\n            return col;\n        },\n\n        getWidth: 1,\n        widthScale: _remapValues(zoomLevel),\n        opacity: 0.8,\n        rounded: true,\n        trailLength: 500,\n        currentTime: sliders.time[1],\n\n        updateTriggers: {\n            getColor: ABMmode,\n        },\n        transitions: {\n            getColor: 500,\n        },\n    });\n}\n","import { GeoJsonLayer } from \"deck.gl\";\nimport { _handleGridcellEditing } from \"../utils/BaseMapUtils\";\n\nexport default function GridLayer({\n    data,\n    editOn,\n    state: { selectedType, keyDownState, selectedCellsState, pickingRadius },\n    updaters: { setSelectedCellsState, setDraggingWhileEditing, setHoveredObj },\n    deckGL,\n}) {\n    return new GeoJsonLayer({\n        id: \"GRID\",\n        data,\n        pickable: true,\n        extruded: true,\n        wireframe: true,\n        lineWidthScale: 1,\n        lineWidthMinPixels: 2,\n        getElevation: (d) => d.properties.height,\n        getFillColor: (d) => d.properties.color,\n\n        onClick: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDrag: (event) => {\n            if (selectedType && editOn && keyDownState !== \"Shift\")\n                _handleGridcellEditing(\n                    event,\n                    selectedType,\n                    setSelectedCellsState,\n                    pickingRadius,\n                    deckGL\n                );\n        },\n\n        onDragStart: () => {\n            if (selectedType && editOn && keyDownState !== \"Shift\") {\n                setDraggingWhileEditing(true);\n            }\n        },\n\n        onHover: (e) => {\n            if (e.object) {\n                setHoveredObj(e);\n            }\n        },\n\n        onDragEnd: () => {\n            setDraggingWhileEditing(false);\n        },\n        updateTriggers: {\n            getFillColor: selectedCellsState,\n            getElevation: selectedCellsState,\n        },\n        transitions: {\n            getFillColor: 500,\n            getElevation: 500,\n        },\n    });\n}\n","import React, { useState, useEffect, useRef } from \"react\";\nimport PaintBrush from \"./components/PaintBrush\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../redux/actions\";\nimport {\n    _proccessAccessData,\n    _proccessGridData,\n    _postMapEditsToCityIO,\n} from \"./utils/BaseMapUtils\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport settings from \"../../../settings/settings.json\";\nimport AnimationComponent from \"./components/AnimationComponent\";\nimport { updateSunDirection, _setupSunEffects } from \"./utils/EffectsUtils\";\nimport {\n    AccessLayer,\n    AggregatedTripsLayer,\n    ABMLayer,\n    GridLayer,\n} from \"./layers\";\n\nexport default function Map(props) {\n    const [draggingWhileEditing, setDraggingWhileEditing] = useState(false);\n    const [selectedCellsState, setSelectedCellsState] = useState(null);\n    const [viewState, setViewState] = useState(settings.map.initialViewState);\n    const [keyDownState, setKeyDownState] = useState(null);\n    const [mousePos, setMousePos] = useState(null);\n    const [mouseDown, setMouseDown] = useState(null);\n    const [hoveredObj, setHoveredObj] = useState(null);\n    const [access, setAccess] = useState(null);\n    const [GEOGRID, setGEOGRID] = useState(null);\n    const [ABM, setABM] = useState({});\n    const [loaded, setLoaded] = useState(false);\n    const effectsRef = useRef();\n    const deckGL = useRef();\n\n    const dispatch = useDispatch();\n\n    const pickingRadius = 40;\n\n    const [\n        cityioData,\n        sliders,\n        menu,\n        accessToggle,\n        selectedType,\n        ABMmode,\n    ] = useSelector((state) => [\n        state.CITYIO,\n        state.SLIDERS,\n        state.MENU,\n        state.ACCESS_TOGGLE,\n        state.SELECTED_TYPE,\n        state.ABM_MODE,\n    ]);\n\n    var ABMOn = menu.includes(\"ABM\");\n    var rotateOn = menu.includes(\"ROTATE\");\n    var shadowsOn = menu.includes(\"SHADOWS\");\n    var editOn = menu.includes(\"EDIT\");\n    var resetViewOn = menu.includes(\"RESET_VIEW\");\n\n    useEffect(() => {\n        // fix deck view rotate\n        _rightClickViewRotate();\n        // setup sun effects\n        _setupSunEffects(effectsRef);\n        // zoom map on CS table location\n        _setViewStateToTableHeader();\n        setLoaded(true);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (!loaded) return;\n        updateSunDirection(sliders.time[1], effectsRef);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sliders.time]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        let shadowColor = shadowsOn ? [0, 0, 0, 0.5] : [0, 0, 0, 0];\n        effectsRef.current[0].shadowColor = shadowColor;\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [shadowsOn]);\n\n    useEffect(() => {\n        setGEOGRID(_proccessGridData(cityioData));\n\n        if (cityioData.access) {\n            setAccess(_proccessAccessData(cityioData));\n        }\n\n        if (cityioData.ABM2) {\n            setABM(cityioData.ABM2);\n        }\n    }, [cityioData]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        if (!editOn) {\n            let dataProps = [];\n\n            for (let i = 0; i < GEOGRID.features.length; i++) {\n                dataProps[i] = GEOGRID.features[i].properties;\n            }\n            _postMapEditsToCityIO(\n                dataProps,\n                cityioData.tableName,\n                \"/GEOGRIDDATA\"\n            );\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [editOn]);\n\n    useEffect(() => {\n        if (!loaded) return;\n        if (resetViewOn) {\n            _setViewStateToTableHeader();\n        } else {\n            setViewState({\n                ...viewState,\n                pitch: 45,\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [resetViewOn]);\n\n    const onViewStateChange = ({ viewState }) => {\n        viewState.orthographic = menu.includes(\"RESET_VIEW\") ? true : false;\n        setViewState(viewState);\n    };\n\n    // /**\n    //  * resets the camera viewport\n    //  * to cityIO header data\n    //  * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n    //  */\n    const _setViewStateToTableHeader = () => {\n        const header = cityioData.GEOGRID.properties.header;\n\n        setViewState({\n            ...viewState,\n            longitude: header.longitude,\n            latitude: header.latitude,\n            zoom: 15,\n            pitch: 0,\n            bearing: 360 - header.rotation,\n            orthographic: true,\n        });\n    };\n\n    // /**\n    //  * Description. fix deck issue\n    //  * with rotate right botton\n    //  */\n    const _rightClickViewRotate = () => {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    };\n\n    const layersKey = {\n        ABM: ABMLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n            zoomLevel: viewState.zoom,\n            sliders,\n        }),\n        AGGREGATED_TRIPS: AggregatedTripsLayer({\n            data: ABM.trips,\n            cityioData,\n            ABMmode,\n        }),\n        GRID: GridLayer({\n            data: GEOGRID,\n            editOn: menu.includes(\"EDIT\"),\n            state: {\n                selectedType,\n                keyDownState,\n                selectedCellsState,\n                pickingRadius,\n            },\n            updaters: {\n                setSelectedCellsState,\n                setDraggingWhileEditing,\n                setHoveredObj,\n            },\n            deckGL,\n        }),\n        ACCESS: AccessLayer({\n            data: access,\n            accessToggle,\n        }),\n    };\n\n    const layerOrder = [\"ABM\", \"AGGREGATED_TRIPS\", \"GRID\", \"ACCESS\"];\n\n    const _renderLayers = () => {\n        let layers = [];\n        for (var layer of layerOrder) {\n            if (menu.includes(layer)) {\n                layers.push(layersKey[layer]);\n            }\n        }\n        return layers;\n    };\n\n    return (\n        <div\n            className=\"baseMap\"\n            onKeyDown={(e) => {\n                setKeyDownState(e.nativeEvent.key);\n            }}\n            onKeyUp={() => setKeyDownState(null)}\n            onMouseMove={(e) => setMousePos(e.nativeEvent)}\n            onMouseUp={() => setMouseDown(false)}\n            onMouseDown={() => setMouseDown(true)}\n        >\n            <PaintBrush\n                editOn={editOn}\n                mousePos={mousePos}\n                selectedType={selectedType}\n                pickingRadius={pickingRadius}\n                mouseDown={mouseDown}\n                hoveredObj={hoveredObj}\n            />\n            <AnimationComponent\n                toggles={{ ABMOn, rotateOn }}\n                state={{ sliders, viewState }}\n                updaters={{\n                    listenToSlidersEvents,\n                    updateSunDirection,\n                    setViewState,\n                }}\n                dispatch={dispatch}\n            />\n            <DeckGL\n                ref={deckGL}\n                viewState={viewState}\n                onViewStateChange={onViewStateChange}\n                layers={_renderLayers()}\n                effects={effectsRef.current}\n                controller={{\n                    touchZoom: true,\n                    touchRotate: true,\n                    dragPan: !draggingWhileEditing,\n                    dragRotate: !draggingWhileEditing,\n                    keyboard: false,\n                }}\n            >\n                <StaticMap\n                    asyncRender={false}\n                    dragRotate={true}\n                    reuseMaps={true}\n                    mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n                    mapStyle={settings.map.mapStyle.blue}\n                    preventStyleDiffing={true}\n                />\n            </DeckGL>\n        </div>\n    );\n}\n","import { Matrix3d, RectPoints, Vector } from \"./ProjectionMapping\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1,\n    ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./ProjectionMapping\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 30;\nconst halfAnchor = anchorSize / 2;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"4px solid white\",\n        cursor: \"move\",\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor,\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor,\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor,\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor,\n    },\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {},\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={(evt) => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation),\n        }}\n    />\n);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        top: \"50vh\",\n        zIndex: 1000\n    }\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\nimport DeleteLocalStorage from \"./deleteLocalStorage\";\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport class ProjectionMapping extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n        // if entered keystone mode\n        if (!prevProps.isEditMode && this.props.isEditMode) {\n            // if found prev. keystone data\n            if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }\n            // if left keystone mode\n        } else if (prevProps.isEditMode && !this.props.isEditMode) {\n            console.log(\"saving edited projMap...\");\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n    _clearLocalStraoge = () => {\n        if (localStorage.getItem(\"projMap\")) {\n            localStorage.removeItem(\"projMap\");\n        }\n        window.location.reload();\n    };\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <React.Fragment>\n                {isEditMode && (\n                    <div onClick={() => this._clearLocalStraoge()}>\n                        <DeleteLocalStorage />\n                    </div>\n                )}\n\n                <div\n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport BaseMap from \"./BaseMap\";\nimport { connect } from \"react-redux\";\nimport { ProjectionMapping } from \"../ProjectionMapping/ProjectionMapping\";\n\nclass MapContainer extends Component {\n    _checkKeystone = () => {\n        return this.props.menu.includes(\"KEYSTONE\") ? true : false;\n    };\n\n    render() {\n        return (\n            <div\n                style={{\n                    height: \"100vh\",\n                    width: \"100vw\",\n                    overflow: \"hidden\",\n                }}\n            >\n                <ProjectionMapping\n                    style={{\n                        height: \"100vh\",\n                        width: \"100vw\",\n                    }}\n                    isEditMode={this._checkKeystone()}\n                >\n                    <BaseMap\n                        menu={this.props.menu}\n                        selectedType={this.props.selectedType}\n                    />\n                </ProjectionMapping>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        menu: state.MENU,\n        selectedType: state.SELECTED_TYPE,\n    };\n};\n\nexport default connect(mapStateToProps, null)(MapContainer);\n","import React, { Component } from \"react\";\nimport { CircularGridLines, RadarChart } from \"react-vis\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\nimport \"./Radar.css\";\nimport { DiscreteColorLegend } from \"react-vis\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            domains: [],\n            radarData: [],\n        };\n        this.radarSize = this.props.drawerWidth - 50;\n\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n        let radarData = {};\n        let refData = {};\n        let domains = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"radar\") {\n                radarData[indicators[i].name] = [indicators[i].value];\n                refData[indicators[i].name] = [indicators[i].ref_value];\n                indicators[i].domain = [0, 1];\n                domains.push(indicators[i]);\n            }\n        }\n        this.setState({ radarData: [radarData, refData], domains: domains });\n    }\n\n    componentDidMount() {\n        this.setState({ indicators: this.props.indicators });\n        this.generateData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.setState({ indicators: this.props.indicators });\n            console.log(\"new radar data..\");\n            this.generateData();\n        }\n    }\n\n    render() {\n        if (this.props.cityioData.indicators) {\n            return (\n                <div>\n                    <RadarChart\n                        className=\"Radar blur\"\n                        animation\n                        data={this.state.radarData}\n                        domains={this.state.domains}\n                        colorRange={this.colorRange}\n                        style={{\n                            polygons: {\n                                fillOpacity: 0.2,\n                                strokeWidth: 2,\n                            },\n                            axes: {\n                                text: {\n                                    opacity: 0,\n                                    fontWeight: 700,\n                                    fill: \"white\",\n                                },\n                                strokeWidth: 0,\n                            },\n                            labels: {\n                                textAnchor: \"middle\",\n                                fontSize: 10,\n                                fill: \"white\",\n                            },\n                        }}\n                        margin={{\n                            left: this.radarSize / 6,\n                            top: this.radarSize / 6,\n                            bottom: this.radarSize / 6,\n                            right: this.radarSize / 6,\n                        }}\n                        width={this.radarSize}\n                        height={this.radarSize}\n                    >\n                        <CircularGridLines\n                            style={{\n                                fill: \"white\",\n                                fillOpacity: 0.1,\n                                backgroundColor: \"#FFF\",\n                                opacity: 0.5,\n                                stroke: \"white\",\n                                width: 0.1,\n                            }}\n                            tickValues={[...new Array(11)].map(\n                                (v, i) => i / 10 - 1\n                            )}\n                        />\n                    </RadarChart>\n\n                    <DiscreteColorLegend\n                        items={[\"Design\", \"Reference\"]}\n                        colors={this.colorRange}\n                    />\n                </div>\n            );\n        } else return null;\n    }\n}\n\nexport default Radar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst downloadTxtFile = (props) => {\n    let data = JSON.stringify(props);\n    const element = document.createElement(\"a\");\n    const file = new Blob([data], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"data.json\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n};\n\nexport default function DownloadRawData(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Button\n                onClick={() => {\n                    downloadTxtFile(props);\n                }}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<SaveIcon />}\n            >\n                {props.title}\n            </Button>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalBarSeries,\n} from \"react-vis\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            barChartData: null,\n            hoverdNode: null,\n        };\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    componentDidMount() {\n        this.generateData();\n    }\n\n    /**\n   data format \n    [\n    { x: 2, y: 10 },\n    { x: 4, y: 5 },\n    { x: 12, y: 15 },\n    ]\n     */\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n\n        let dataArr = [];\n        // let refDataArr = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"bar\") {\n                dataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].value,\n                });\n\n                // refDataArr.push({\n                //     x: indicators[i].name,\n                //     y: indicators[i].ref_value,\n                // });\n            }\n        }\n\n        this.setState({\n            barChartData: dataArr,\n            // refChartData: refDataArr\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.generateData();\n        }\n    }\n\n    render() {\n        const { hoveredNode } = this.state;\n\n        return (\n            <>\n                {this.state.barChartData && (\n                    <div>\n                        {hoveredNode && (\n                            <Typography gutterBottom>\n                                {hoveredNode.x} : {hoveredNode.y}\n                            </Typography>\n                        )}\n\n                        <FlexibleWidthXYPlot\n                            opacity={0.2}\n                            xType=\"ordinal\"\n                            width={this.props.drawerWidth - 50}\n                            height={this.props.drawerWidth - 50}\n                            stackBy=\"y\"\n                            yDomain={[0, 1]}\n                        >\n                            <XAxis\n                                style={{\n                                    text: {\n                                        fill: \"#FFF\",\n                                    },\n                                }}\n                                tickLabelAngle={90}\n                            />\n                            <YAxis style={{ text: { fill: \"#FFF\" } }} />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.barChartData}\n                            />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.refChartData}\n                            />\n                        </FlexibleWidthXYPlot>\n\n                        <DownloadRawData\n                            data={this.props.cityioData.indicators}\n                            title={\"radar & bars data\"}\n                        />\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nexport default Radar;\n","import React, { useState } from \"react\";\nimport { rgbToHex } from \"../../BaseMap/utils/BaseMapUtils\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function AreaCalc(props) {\n    const radialRadius = props.drawerWidth - 100;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    const useStyles = makeStyles((theme) => ({\n        list: {\n            width: props.drawerWidth - 50,\n        },\n    }));\n\n    const classes = useStyles();\n\n    const calcArea = () => {\n        let gridProps = props.cityioData.GEOGRID.properties;\n        let cellSize = gridProps.header.cellSize;\n        let geoGridData = props.cityioData.GEOGRIDDATA;\n        let calcAreaObj = {};\n        geoGridData.forEach((gridCellData) => {\n            let typeName = gridCellData.name;\n            if (\n                //    if this type is not null\n                gridCellData.name !== \"None\"\n            ) {\n                if (calcAreaObj.hasOwnProperty(typeName)) {\n                    calcAreaObj[typeName].count =\n                        calcAreaObj[typeName].count + 1;\n                    // avoid landuse with no height\n                    let height =\n                        gridCellData.height < 1 ? 1 : gridCellData.height;\n                    calcAreaObj[typeName].area =\n                        calcAreaObj[typeName].area + height * cellSize;\n                } else {\n                    calcAreaObj[typeName] = {};\n                    calcAreaObj[typeName].area = 0;\n                    calcAreaObj[typeName].count = 0;\n                    calcAreaObj[typeName].name = typeName;\n                    calcAreaObj[typeName].color = rgbToHex(\n                        gridCellData.color[0],\n                        gridCellData.color[1],\n                        gridCellData.color[2]\n                    );\n                }\n            }\n        });\n        //  convert to react-vis happy data format\n        let radialData = [];\n        for (const k in calcAreaObj) {\n            radialData.push(calcAreaObj[k]);\n        }\n\n        let data = {\n            children: radialData,\n            color: 1,\n        };\n        return data;\n    };\n\n    const data = calcArea();\n\n    return (\n        <List className={classes.list}>\n            <ListItem>\n                {hoveredRadial.name ? (\n                    <Typography gutterBottom>\n                        {hoveredRadial.name}: {hoveredRadial.area} sqm\n                    </Typography>\n                ) : (\n                    <Typography gutterBottom>Hover on chart...</Typography>\n                )}\n            </ListItem>\n\n            <ListItem>\n                <RadialChart\n                    colorType=\"literal\"\n                    animation={true}\n                    className={\"donut-chart-example\"}\n                    innerRadius={radialRadius / 2 - radialRadius / 5}\n                    radius={radialRadius / 2}\n                    getLabel={(d) => d.name}\n                    labelsRadiusMultiplier={0.95}\n                    labelsStyle={{\n                        textAnchor: \"middle\",\n\n                        fontSize: 11,\n                        fill: \"#FFF\",\n                        textShadow: \"2px 2px 2px #000\",\n                    }}\n                    showLabels\n                    getAngle={(d) => d.area}\n                    data={data.children}\n                    onValueMouseOver={(evt) => setHoveredRadial(evt)}\n                    onSeriesMouseOut={() => setHoveredRadial(false)}\n                    width={radialRadius}\n                    height={radialRadius}\n                    padAngle={0.01}\n                >\n                    {hoveredRadial !== false && (\n                        <Hint value={hoveredRadial}>\n                            <div\n                                style={{\n                                    background: \"rgba(0,0,0,0.8)\",\n                                    fontSize: 14,\n                                }}\n                            >\n                                <Typography variant={\"caption\"} gutterBottom>\n                                    Area: {hoveredRadial.area} sqm\n                                </Typography>\n                            </div>\n                        </Hint>\n                    )}\n                </RadialChart>\n            </ListItem>\n\n            <ListItem>\n                <DownloadRawData data={data.children} title={\"area data\"} />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Radar from \"./Radar/Radar\";\nimport BarChart from \"./BarChart/BarChart\";\nimport AreaCalc from \"./AreaCalc/AreaCalc\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction VisContainer(props) {\n    const drawerWidth = 450;\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n            display: \"flex\",\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const showRadar = props.menu && props.menu.includes(\"RADAR\");\n\n    return (\n        <React.Fragment>\n            {showRadar && (\n                <Drawer\n                    variant=\"persistent\"\n                    anchor=\"right\"\n                    open={true}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <List className={classes.list}>\n                        <ListItem>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Urban Indicators\n                            </Typography>\n                        </ListItem>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <AreaCalc\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <Radar\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <BarChart\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n                      \n                    </List>\n                </Drawer>\n            )}\n        </React.Fragment>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        menu: state.MENU,\n    };\n};\n\nexport default connect(mapStateToProps, null)(VisContainer);\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { useSelector } from \"react-redux\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: none;\n`;\n\nfunction LoadingSpinner() {\n    const [loadingModules] = useSelector((state) => [state.LOADING_MODULES]);\n    return (\n        <div\n            style={{\n                position: \"fixed\",\n                bottom: 50,\n                right: \"50%\",\n                zIndex: 1,\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"flex-end\",\n            }}\n        >\n            {loadingModules.map((module) => {\n                return (\n                    <div\n                        key={module}\n                        style={{\n                            display: \"flex\",\n                            flexDirection: \"row\",\n                            marginBottom: \"3px\",\n                            marginTop: \"3px\",\n                        }}\n                    >\n                        <Typography style={{ marginRight: \"10px\" }}>\n                            loading {module}\n                        </Typography>\n                        <PulseLoader\n                            css={override}\n                            size={20}\n                            color=\"white\"\n                            loading={true}\n                        />\n                    </div>\n                );\n            })}\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CityIO from \"./CityIO/cityIO\";\nimport MenuContainer from \"./MenuContainer/MenuContainer\";\nimport MapContainer from \"./BaseMap\";\nimport VisContainer from \"./VisContainer/VisContainer\";\nimport LoadingSpinner from \"./CityIO/LoadingSpinner\";\n\nexport default function App(props) {\n    // wait for 'ready' flag from cityIO when app is ready to start\n    const ready = useSelector((state) => state.READY);\n    // get the table name for cityIO comp\n    const { tableName } = props;\n\n    return (\n        <>\n            <CityIO tableName={tableName} />\n            {/* if ready, render the app*/}\n            {ready && (\n                <>\n                    <MenuContainer tableName={tableName} />\n                    <MapContainer />\n                    <VisContainer />\n                </>\n            )}\n            <LoadingSpinner />\n        </>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function GetGITdate() {\n    const [gitMeta, setGitMeta] = useState({\n        author: \"\",\n        branch: \"\",\n        date: \"\",\n        sha: \"\",\n        link: \"\",\n    });\n\n    const URL =\n        \"https://api.github.com/repos/CityScope/CS_cityscopeJS/branches/master\";\n\n    const fetchGitHub = () =>\n        fetch(URL)\n            .then((response) => {\n                response.json().then((json) => {\n                    setGitMeta({\n                        author: json.commit.commit.author.name,\n                        date: json.commit.commit.author.date,\n                        sha: json.commit.sha,\n                    });\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n            });\n    // run only once\n    useEffect(() => {\n        fetchGitHub();\n    }, []);\n\n    const gitMetaComp = (\n        <>\n            <Typography variant=\"caption\">\n                <h2>CityScopeJS Development Tracking</h2>\n                <h4>Last Commit</h4>\n                <div>Author: {JSON.parse(JSON.stringify(gitMeta.author))}</div>\n                <div>Date: {JSON.parse(JSON.stringify(gitMeta.date))}</div>\n                <div>Hash: {JSON.parse(JSON.stringify(gitMeta.sha))}</div>\n            </Typography>\n        </>\n    );\n\n    return gitMetaComp;\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Box from \"@material-ui/core/Box\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Button from \"@material-ui/core/Button\";\nimport GetGITdate from \"./GetGITdate\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        margin: theme.spacing(2),\n    },\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n        textAlign: \"center\",\n        rounded: true,\n        paddingTop: 100,\n        margin: \"auto\",\n        padding: 2,\n        maxWidth: 600,\n    },\n\n    flex: {\n        display: \"flex\",\n        alignItems: \"baseline\",\n        justifyContent: \"space-evenly\",\n    },\n\n    inputRoot: {\n        fontSize: 60,\n        width: 300,\n    },\n    labelRoot: {\n        fontSize: 20,\n        color: \"white\",\n        \"&$labelFocused\": {\n            color: \"white\",\n            fontSize: 10,\n        },\n    },\n    labelFocused: { color: \"white\" },\n    caption: { margin: \"auto\", maxWidth: \"30%\" },\n}));\n\nexport default function SplashScreen() {\n    const [textFieldContent, setTextFieldContent] = useState(null);\n\n    const handleTextFieldChange = (e) => {\n        const { value } = e.target;\n        setTextFieldContent(value);\n    };\n\n    const loadCityScopeJSproject = () => {\n        let url =\n            \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" +\n            textFieldContent;\n        window.location.href = url;\n    };\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Typography variant=\"h3\" gutterBottom>\n                CityScopeJS\n            </Typography>\n            <Box p={2} />\n\n            <Typography variant=\"h6\" gutterBottom>\n                CityScopeJS is a unified front-end for MIT CityScope project, an\n                open-source urban modeling and simulation platform. CityScopeJS\n                allows users to examine different urban-design alternatives, and\n                observe their impact through multiple layers of urban analytics\n                modules, such as economy, traffic and ABM simulation, urban\n                access, storm-water, noise and more.\n            </Typography>\n            <Box p={5} />\n\n            <div>\n                <TextField\n                    autoComplete=\"off\"\n                    onChange={(event) => handleTextFieldChange(event)}\n                    InputProps={{ classes: { root: classes.inputRoot } }}\n                    InputLabelProps={{\n                        classes: {\n                            root: classes.labelRoot,\n                            focused: classes.labelFocused,\n                        },\n                    }}\n                    id=\"outlined-basic\"\n                    label=\"Type CityScope Project Name...\"\n                ></TextField>\n                <div>\n                    {textFieldContent && (\n                        <Button\n                            onClick={() => {\n                                loadCityScopeJSproject();\n                            }}\n                            variant=\"outlined\"\n                            className={classes.button}\n                        >\n                            <SendIcon />\n                            Load CityScope Project\n                        </Button>\n                    )}\n                </div>\n            </div>\n\n            <Box p={5} />\n            <div className={classes.flex}>\n                <Fab\n                    color=\"default\"\n                    href=\"https://cityscope.media.mit.edu/CS_cityscopeJS/?editor\"\n                >\n                    <EditIcon />\n                </Fab>\n\n                <div className={classes.caption}>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Click here to design and deploy a new CityScope project\n                        using Grid Editor\n                    </Typography>\n                </div>\n\n                <Box p={2} />\n                <Fab\n                    href=\"http://github.com/CityScope/CS_cityscopeJS/\"\n                    color=\"default\"\n                >\n                    <GitHubIcon />\n                </Fab>\n\n                <div className={classes.caption}>\n                    <Typography variant=\"caption\" gutterBottom>\n                        This open-source project is developed by the CityScope\n                        Network. Join us!\n                    </Typography>\n                </div>\n            </div>\n            <Box p={5} />\n\n            <GetGITdate />\n            <Box p={5} />\n        </div>\n    );\n}\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport default function SelectionTarget(props) {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n    const selectedType = props.selectedType;\n    const divSize = props.divSize;\n\n    const colorTrans =\n        \"rgba(\" +\n        selectedType.color[0] +\n        \",\" +\n        selectedType.color[1] +\n        \",\" +\n        selectedType.color[2] +\n        \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: selectedType.color,\n                color: selectedType.color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\",\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport EditorBrush from \"./EditorBrush\";\nimport { connect } from \"react-redux\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport settings from \"../GridEditorSettings.json\";\nimport { listenToBaseMapCenter } from \"../../../redux/actions\";\n\nexport const _hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n};\n\nclass BaseMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 12),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n     \n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n    }\n\n    _toggleOrthoView = (viewState) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n    };\n\n    _onViewStateChange = ({ viewState }) => {\n        this.setState({ viewState });\n    };\n\n    componentDidUpdate = (prevProps) => {\n        if (this.props.mapCenter !== prevProps.mapCenter)\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    latitude: this.props.mapCenter.latCenter,\n                    longitude: this.props.mapCenter.lonCenter,\n                    pitch: 0,\n                    bearing: 0,\n                    orthographic: false,\n                },\n            });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                latitude: settings.GEOGRID.properties.header.latitude,\n                longitude: settings.GEOGRID.properties.header.longitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 0,\n                orthographic: true,\n            },\n        });\n    }\n\n   \n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        if (!this.props.selectedType) return;\n        const { height, name, color, interactive } = this.props.selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n\n        multiSelectedObj.forEach((selected) => {\n            let thisCellProps = selected.object.properties;\n            thisCellProps.color = _hexToRgb(color);\n            thisCellProps.height = parseInt(height);\n            thisCellProps.name = name;\n            if (interactive !== \"No\") {\n                thisCellProps.interactive = interactive;\n            } else {\n                delete thisCellProps.interactive;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        return (\n            this.props.selectedType && (\n                <EditorBrush\n                    mousePos={this.state.mousePos}\n                    selectedType={this.props.selectedType}\n                    divSize={this.state.pickingRadius}\n                    mouseDown={this.state.mouseDown}\n                />\n            )\n        );\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        let layers = [];\n        layers.push(\n            new GeoJsonLayer({\n                id: \"GRID\",\n                opacity: 0.5,\n                stroked: false,\n                filled: true,\n                wireframe: true,\n                data: this.props.createdGrid,\n                visible: true,\n                pickable: true,\n                extruded: true,\n                lineWidthScale: 1,\n                lineWidthMinPixels: 1,\n                getElevation: (d) => d.properties.height,\n                getFillColor: (d) => d.properties.color,\n\n                onClick: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n\n                onDrag: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n                onDragStart: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    ) {\n                        this.setState({ draggingWhileEditing: true });\n                    }\n                },\n                onDragEnd: () => {\n                    this.setState({ draggingWhileEditing: false });\n                },\n                updateTriggers: {\n                    getFillColor: this.state.selectedCellsState,\n                    getElevation: this.state.selectedCellsState,\n                },\n                transitions: {\n                    getFillColor: 500,\n                    getElevation: 500,\n                },\n            })\n        );\n\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {this._renderSelectionTarget()}\n\n                <DeckGL\n                    // sets the cursor on paint\n                    // getCursor={() => \"none\"}\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.sat}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    listenToBaseMapCenter: listenToBaseMapCenter,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedType: state.ROW_EDIT,\n        mapCenter: state.BASE_MAP_CENTER,\n        createdGrid: state.GRID_CREATED,\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap);\n","import MaterialTable from \"material-table\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport {\n    listenToRowEdits,\n    listeonToTypesList,\n} from \"../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport settings from \"../../GridEditorSettings.json\";\n\nexport default function TypesEditor() {\n    const createtypesArray = (LanduseTypesList) => {\n        let typesArray = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            typesArray.push({\n                name: type,\n                color: LanduseTypesList[type].color,\n                height: LanduseTypesList[type].height\n                    ? LanduseTypesList[type].height\n                    : 0,\n                LBCS: JSON.stringify(LanduseTypesList[type].LBCS),\n                NAICS: JSON.stringify(LanduseTypesList[type].NAICS),\n                interactive: LanduseTypesList[type].interactive,\n            });\n        });\n        return typesArray;\n    };\n\n    const [state, setState] = React.useState({\n        columns: [\n            { title: \"Type\", field: \"name\" },\n            { title: \"Height\", field: \"height\", type: \"numeric\" },\n            {\n                title: \"Interactive\",\n                field: \"interactive\",\n                lookup: { No: \"No\", Web: \"Web\", TUI: \"TUI\" },\n            },\n            { title: \"Color\", field: \"color\", type: \"string\" },\n            { title: \"LBCS\", field: \"LBCS\", type: \"string\" },\n            { title: \"NAICS\", field: \"NAICS\", type: \"string\" },\n        ],\n        data: createtypesArray(settings.GEOGRID.properties.types),\n    });\n    // redux the type list on every change\n    useEffect(() => {\n        dispatch(listeonToTypesList(state.data));\n    });\n    const dispatch = useDispatch();\n    const [selectedRow, setSelectedRow] = useState(null);\n    const [rowColor, setRowColor] = useState(null);\n\n    return (\n        <div style={{ maxWidth: \"100%\" }}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <MaterialTable\n                        title=\"Types Editor\"\n                        columns={state.columns}\n                        data={state.data}\n                        options={{\n                            paging: false,\n                            search: false,\n                            selection: false,\n                            rowStyle: (rowData) => ({\n                                backgroundColor:\n                                    selectedRow === rowData.tableData.id\n                                        ? rowColor\n                                        : null,\n                            }),\n                        }}\n                        onRowClick={(evt, row) => {\n                            setSelectedRow(row.tableData.id);\n                            setRowColor(row.color);\n                            dispatch(listenToRowEdits(row));\n                        }}\n                        editable={{\n                            onRowAdd: (newData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data.push(newData);\n                                            return { ...prevState, data };\n                                        });\n                                    }, 50);\n                                }),\n                            onRowUpdate: (newData, oldData) =>\n                                new Promise((resolve) => {\n                                    console.log(newData, oldData);\n\n                                    setTimeout(() => {\n                                        resolve();\n                                        if (oldData) {\n                                            setState((prevState) => {\n                                                const data = [\n                                                    ...prevState.data,\n                                                ];\n                                                data[\n                                                    data.indexOf(oldData)\n                                                ] = newData;\n\n                                                return { ...prevState, data };\n                                            });\n                                        }\n\n                                        // dispath change to redux\n                                        dispatch(listenToRowEdits(newData));\n                                    }, 50);\n                                }),\n                            onRowDelete: (oldData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data.splice(\n                                                data.indexOf(oldData),\n                                                1\n                                            );\n                                            return { ...prevState, data };\n                                        });\n                                    }, 50);\n                                }),\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import proj4 from \"proj4\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport { _hexToRgb } from \"../../../EditorMap/EditorMap\";\n\nfunction deg_to_rad(deg) {\n    return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n    return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n    var keys = Object.keys(obj);\n    return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps) => {\n    let top_left_lon = parseFloat(gridProps.longitude);\n    let top_left_lat = parseFloat(gridProps.latitude);\n    let rotation = parseFloat(gridProps.rotation);\n    let userPrj = gridProps.projection;\n    let cell_size = parseFloat(gridProps.cellSize);\n    let nrows = parseFloat(gridProps.nrows);\n    let ncols = parseFloat(gridProps.ncols);\n\n    const webMercator = proj4.defs(\"EPSG:4326\");\n    let EARTH_RADIUS_M = 6.371e6;\n    let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n    let bearing = (90 - rotation + 360) % 360;\n    let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n    let la1 = deg_to_rad(top_left_lon_lat.lat);\n    let lo1 = deg_to_rad(top_left_lon_lat.lon);\n    let bearing_rad = deg_to_rad(bearing);\n    let la2 = Math.asin(\n        Math.sin(la1) * Math.cos(Ad) +\n            Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n    );\n    let lo2 =\n        lo1 +\n        Math.atan2(\n            Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n            Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n        );\n    let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n    let top_left_xy = proj4(webMercator, userPrj, [\n        top_left_lon_lat.lon,\n        top_left_lon_lat.lat,\n    ]);\n\n    let top_right_xy = proj4(webMercator, userPrj, [\n        top_right_lon_lat.lon,\n        top_right_lon_lat.lat,\n    ]);\n\n    let dydx =\n        (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n    let theta = Math.atan(dydx);\n    let cosTheta = Math.cos(theta);\n    let sinTheta = Math.sin(theta);\n    // create rotate matrix\n    let x_unRot = [];\n    let y_unRot = [];\n    for (let i = 0; i < nrows; i++) {\n        for (let j = 0; j < ncols; j++) {\n            x_unRot.push(j * cell_size);\n            y_unRot.push(-i * cell_size);\n        }\n    }\n\n    let x_rot = [];\n    let y_rot = [];\n    for (let i = 0; i < x_unRot.length; i++) {\n        x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n        y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n    }\n\n    let x_rot_trans = [];\n    let y_rot_trans = [];\n    for (let i = 0; i < x_rot.length; i++) {\n        x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n        y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n    }\n\n    var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n    var dydCol = y_rot_trans[1] - y_rot_trans[0];\n    var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n    var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n    let gridPnts = [];\n    let geojsonFeatureCollection = {\n        type: \"FeatureCollection\",\n        // polygons go here\n        features: [],\n    };\n\n    let types = settings.GEOGRID.properties.types;\n\n    for (let i = 0; i < x_rot_trans.length; i++) {\n        let rndType = randomProperty(types);\n\n        let geojsonPolygon = {\n            type: \"Feature\",\n            geometry: {\n                type: \"Polygon\",\n                coordinates: null,\n            },\n            properties: {\n                color: _hexToRgb(rndType.color),\n                height: rndType.height,\n                name: rndType.name,\n                interactive: rndType.interactive,\n            },\n        };\n\n        var polygon_xy = [\n            [x_rot_trans[i], y_rot_trans[i]],\n            [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n            [\n                x_rot_trans[i] + dxdRow + dxdCol,\n                y_rot_trans[i] + dydRow + dydCol,\n            ],\n            [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n            [x_rot_trans[i], y_rot_trans[i]],\n        ];\n\n        var polygon_ll = [];\n        for (var v = 0; v < 5; v++) {\n            let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n            polygon_ll.push(ll);\n        }\n\n        geojsonPolygon.geometry.coordinates = [polygon_ll];\n        gridPnts.push(geojsonPolygon);\n    }\n    geojsonFeatureCollection.features = gridPnts;\n\n    return geojsonFeatureCollection;\n};\n","import React from \"react\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport Button from \"@material-ui/core/Button\";\nimport { gridCreator } from \"./gridCreator\";\nimport { listenToGridCreator } from \"../../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function GridMaker(props) {\n    const dispatch = useDispatch();\n\n    const handleGridCreation = () => {\n        let grid = gridCreator(props.gridProps);\n        dispatch(listenToGridCreator(grid));\n    };\n\n    return (\n        <Button\n            onClick={() => {\n                handleGridCreation();\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<AppsIcon />}\n        >\n            Create Grid\n        </Button>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport axios from \"axios\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSelector } from \"react-redux\";\nimport Link from \"@material-ui/core/Link\";\n\nconst reqResonseUI = (response, tableName) => {\n    let cityscopeJSendpoint =\n        \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" +\n        tableName;\n    // create the feedback text\n    let resText = (\n        <Typography variant=\"caption\">\n            CityIO is {response.data.status}. Grid deployed to{\" \"}\n            <Link href={cityscopeJSendpoint}>{cityscopeJSendpoint}</Link>\n        </Typography>\n    );\n\n    return resText;\n};\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst prepareData = (struct, typesList, geoJsonFeatures, gridProps) => {\n    let geoGridObject = struct;\n\n    // take types list and prepare to csJS format\n    let newTypesList = {};\n\n    typesList.forEach((oldType) => {\n        newTypesList[oldType.name] = oldType;\n        //material-table creates strings for these items\n        // so in first \"Commit to cityIO\", these must be turned into\n        // Json objects. On Second commit, these are already objects,\n        // hence the two conditions below\n\n        newTypesList[oldType.name].LBCS =\n            typeof oldType.LBCS == String\n                ? JSON.parse(oldType.LBCS)\n                : oldType.LBCS;\n        newTypesList[oldType.name].NAICS =\n            typeof oldType.LBCS == String\n                ? JSON.parse(oldType.NAICS)\n                : oldType.NAICS;\n    });\n\n    geoGridObject.properties.types = newTypesList;\n\n    // inject table props to grid\n    geoGridObject.properties.header = gridProps;\n    geoGridObject.properties.header.longitude = parseFloat(\n        geoGridObject.properties.header.longitude\n    );\n    geoGridObject.properties.header.latitude = parseFloat(\n        geoGridObject.properties.header.latitude\n    );\n    geoGridObject.properties.header.rotation = parseFloat(\n        geoGridObject.properties.header.rotation\n    );\n    geoGridObject.properties.header.nrows = parseFloat(\n        geoGridObject.properties.header.nrows\n    );\n    geoGridObject.properties.header.ncols = parseFloat(\n        geoGridObject.properties.header.ncols\n    );\n    geoGridObject.properties.header.cellSize = parseFloat(\n        geoGridObject.properties.header.cellSize\n    );\n\n    // lastly get the grid features\n    geoGridObject.features = geoJsonFeatures;\n\n    return geoGridObject;\n};\n\nexport default function CommitGrid(props) {\n    const [reqResonse, setReqResonse] = React.useState(null);\n\n    const reduxState = useSelector((state) => state);\n    const hasGrid = reduxState.GRID_CREATED;\n\n    const downloadObjectAsJson = () => {\n        let struct = settings.GEOGRID;\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        let geoGridObj = prepareData(\n            struct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n        var dataStr =\n            \"data:text/json;charset=utf-8,\" +\n            encodeURIComponent(JSON.stringify(geoGridObj));\n        var downloadAnchorNode = document.createElement(\"a\");\n        downloadAnchorNode.setAttribute(\"href\", dataStr);\n        downloadAnchorNode.setAttribute(\"download\", \"grid.json\");\n        document.body.appendChild(downloadAnchorNode); // required for firefox\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    };\n\n    const postGridToCityIO = () => {\n        let struct = settings.GEOGRID;\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        // take grid struct from settings\n        let geoGridObj = prepareData(\n            struct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n\n        let tableName = geoGridObj.properties.header.tableName.toLowerCase();\n        let requestsList = {\n            geoGridURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRID\",\n\n            geoGridDataURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRIDDATA\",\n        };\n\n        const options = {\n            method: \"post\",\n            url: requestsList.geoGridURL,\n            data: geoGridObj,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n\n        axios(options)\n            .then(function (response) {\n                setReqResonse(reqResonseUI(response, tableName));\n            })\n            // then reset GEOGRIDDATA of that new grid\n\n            .then(function () {\n                options.url = requestsList.geoGridDataURL;\n                options.data = {};\n                axios(options);\n                console.log(\"removed GEOGRIDDATA\");\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    return (\n        <>\n            {hasGrid && (\n                <>\n                    <Button\n                        onClick={() => {\n                            postGridToCityIO();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudUploadIcon />}\n                    >\n                        Commit Grid to cityIO\n                    </Button>\n\n                    <Button\n                        onClick={() => {\n                            // ! download as json\n                            downloadObjectAsJson();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudDownloadIcon />}\n                    >\n                        Download JSON\n                    </Button>\n\n                    <div style={{ width: \"100%\" }}> {reqResonse}</div>\n                </>\n            )}\n        </>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CenterFocusStrongIcon from \"@material-ui/icons/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\n\nimport { listenToBaseMapCenter } from \"../../../../../redux/actions\";\n\nexport default function CenterMapButton(props) {\n    const dispatch = useDispatch();\n\n    return (\n        <Button\n            onClick={() => {\n                dispatch(\n                    listenToBaseMapCenter({\n                        latCenter: parseFloat(props.mapCenter[0]),\n                        lonCenter: parseFloat(props.mapCenter[1]),\n                    })\n                );\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<CenterFocusStrongIcon />}\n            style={{ fontSize: \"12px\" }}\n        >\n            Center Map\n        </Button>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GridMaker from \"./GridMaker/GridMaker\";\nimport CommitGrid from \"./CommitGrid/CommitGrid\";\nimport CenterMapButton from \"./CenterMapButton/CenterMapButton\";\nimport settings from \"../../GridEditorSettings.json\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default function GridProps() {\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            \"& .MuiTextField-root\": {\n                margin: theme.spacing(1),\n                flexWrap: \"wrap\",\n            },\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n        paper: {\n            width: \"100%\",\n        },\n    }));\n\n    const [formValues, setformValues] = React.useState({\n        tableName: \"CityScopeJS\",\n        latitude: settings.GEOGRID.properties.header.latitude,\n        longitude: settings.GEOGRID.properties.header.longitude,\n        nrows: settings.GEOGRID.properties.header.nrows,\n        ncols: settings.GEOGRID.properties.header.nrows,\n        rotation: settings.GEOGRID.properties.header.rotation,\n        cellSize: settings.GEOGRID.properties.header.cellSize,\n        projection: settings.GEOGRID.properties.header.projection,\n    });\n\n    const handleChangeForm = (event) => {\n        const { id, value } = event.target;\n        setformValues({ ...formValues, [id]: value });\n    };\n\n    const classes = useStyles();\n\n    //  get all data\n    // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n    return (\n        <Paper elevation={3} className={classes.paper}>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <Typography variant=\"h6\">Grid Properties</Typography>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"tableName\"\n                        label=\"CityScope Project Name\"\n                        defaultValue={formValues.tableName}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"latitude\"\n                        label=\"Latitude\"\n                        defaultValue={formValues.latitude}\n                        type=\"number\"\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"longitude\"\n                        label=\"Longitude\"\n                        defaultValue={formValues.longitude}\n                        type=\"number\"\n                    />\n                </div>\n                <div className={classes.root}>\n                    <CenterMapButton\n                        mapCenter={[formValues.latitude, formValues.longitude]}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"nrows\"\n                        label=\"Rows\"\n                        defaultValue={formValues.nrows}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 100,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"ncols\"\n                        label=\"Columns\"\n                        defaultValue={formValues.ncols}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 100,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"rotation\"\n                        label=\"Rotation (deg)\"\n                        defaultValue={formValues.rotation}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 360,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"cellSize\"\n                        label=\"Cell Size (m^2)\"\n                        defaultValue={formValues.cellSize}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 1000,\n                                min: 0,\n                            },\n                        }}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        id=\"projection\"\n                        label=\"Projection\"\n                        defaultValue={formValues.projection}\n                        type=\"string\"\n                        helperText=\"Note: wrong projection might break app. Find the relevant projection at: https://epsg.io/\"\n                    />\n                </div>\n                <div className={classes.root}>\n                    <GridMaker gridProps={formValues} />\n                    <CommitGrid gridProps={formValues} />\n                </div>\n            </form>\n        </Paper>\n    );\n}\n","// // export default EditMenuMain;\n\nimport React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TypesEditor from \"./TypesEditor/TypesEditor\";\nimport GridProps from \"./GridProps/GridProps\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function EditorMenu() {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            width: \"50%\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            <List>\n                <ListItem>\n                    <Typography variant=\"h5\">CityScope Grid Editor</Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\">\n                        Tool for creating CityScope endpoints with virtual\n                        editable girds, types, and props, and deploy them to\n                        cityIO.\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <GridProps />\n                </ListItem>\n                <ListItem>\n                    <TypesEditor />\n                </ListItem>\n            </List>\n        </Drawer>\n    );\n}\n","import React, { Component } from \"react\";\nimport EditorMap from \"./EditorMap/EditorMap\";\nimport EditorMenu from \"./EditorMenu/EditorMenu\";\nexport default class GridEditor extends Component {\n    render() {\n        return (\n            <>\n                <EditorMap />\n                <EditorMenu />\n            </>\n        );\n    }\n}\n","import Provider from \"../../redux/Provider\";\nimport \"./Router.css\";\nimport store from \"../../redux/store\";\nimport CityScopeJS from \"../CityScopeJS/CityScopeJS\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport React, { Component } from \"react\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport SplashScreen from \"../SplashScreen/SplashScreen\";\nimport GridEditor from \"../GridEditor/GridEditor\";\n\n/**\n *  ! https://material-ui.com/customization/palette/\n */\nconst theme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        background: { default: \"#000\", paper: \"#1f252d\" },\n    },\n});\n\nconst AppRouter = () => {\n    let url = window.location.toString();\n    let pre = \"cityscope=\";\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length);\n    let app = null;\n    // check URL for proper CS project link\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\n        console.log(\"Loading CityScope project: \" + cityscopePrjName);\n        app = <CityScopeJS tableName={cityscopePrjName} />;\n    } else if (window.location.search === \"?editor\") {\n        app = <GridEditor />;\n    } else {\n        app = <SplashScreen />;\n    }\n\n    return app;\n};\n\nexport default class Router extends Component {\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Provider store={store}>\n                    <AppRouter />\n                </Provider>\n            </ThemeProvider>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Router from \"./components/Router/Router\";\n\nconst root = document.getElementById(\"root\");\nconst render = () => {\n    return ReactDOM.render(<Router />, root);\n};\n\nrender(Router);\n\nif (module.hot) {\n    module.hot.accept(Router, () => {\n        const hotModule = require(\"./components/Router/Router\").default;\n        render(hotModule);\n    });\n}\n"],"sourceRoot":""}