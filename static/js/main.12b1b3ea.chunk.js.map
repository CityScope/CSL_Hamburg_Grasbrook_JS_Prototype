{"version":3,"sources":["redux/Provider.js","redux/actions.js","redux/initialState.js","redux/reducer.js","redux/store.js","services/cityIO.js","components/MenuContainer/EditMenu/EditMenu.js","components/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","components/MenuContainer/TogglesMenu/ABMSubmenu/index.js","components/MenuContainer/TogglesMenu/AccessSubmenu/index.js","components/MenuContainer/TogglesMenu/index.js","components/MenuContainer/FABMenu/index.js","components/MenuContainer/MenuContainer.js","components/baseMap/baseMapComponents.js","components/baseMap/baseMapUtils.js","components/baseMap/baseMap.js","components/prjMap/util.ts","components/prjMap/anchor.tsx","components/prjMap/deleteLocalStorage.js","components/prjMap/layer.tsx","components/baseMap/baseMapContainer.js","components/visContainer/Radar/Radar.js","components/visContainer/DownloadRawData/DownloadRawData.js","components/visContainer/BarChart/BarChart.js","services/utils.js","components/visContainer/AreaCalc/AreaCalc.js","components/visContainer/visContainer.js","components/LoadingSpinner/index.js","components/Screen/index.js","App.js","index.js"],"names":["ProviderWrapper","children","store","listenToSlidersEvents","data","type","listenToEditMenu","listOfToggles","Object","keys","settings","menu","toggles","menuInitState","i","length","values","showOnInit","push","initialState","MENU","CITYIO","MAP","SLIDERS","time","map","layers","ABM","startSimHour","endSimHour","speed","animationSpeed","ACCESS_TOGGLE","SELECTED_TYPE","height","color","name","READY","LOADING","reducer","state","action","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","configureStore","createStore","CityIO","props","handleURL","tableName","cityioURL","cityIO","mockURL","baseURL","getCityIOHash","timer","setInterval","_isMounted","interval","console","log","URL","axios","get","then","response","handleCityIOHashes","catch","e","result","id","oldHashs","setState","cityIOmodulesStatus","setLoadingState","cityIOmodules","forEach","module","hashes","setNestedState","getCityIOmoduleData","parent","child","holder","moduleName","checkDoneCityIO","error","status","headers","request","message","config","cityIOmodulesData","getCityioData","setReadyState","this","Component","mapDispatchToProps","connect","cityioData","classes","makeStyles","theme","drawer","width","zIndex","marginAutoContainer","display","marginAutoItem","margin","useStyles","React","useState","selectedIndex","setSelectedIndex","dispatch","useDispatch","selectedType","useSelector","marks","value","label","Drawer","className","variant","anchor","open","paper","List","LanduseTypesList","iconsArr","col","rgbCol","selected","typeHasHeightProps","Fragment","key","Math","random","Divider","component","root","dividerColor","ListItem","alignItems","button","onClick","event","typeProps","list","ListItemAvatar","Avatar","style","backgroundColor","charAt","ListItemText","primary","listItemPrimaryText","secondary","listItemSecondaryText","Collapse","in","Slider","valueLabelDisplay","slider","onChangeCommitted","getAriaLabel","index","toString","min","max","createTypesIcons","GEOGRID","properties","types","marginLeft","subtitle1","marginTop","subtitle2","ABMSubmenu","sliders","Typography","gutterBottom","onChange","newValue","aria-labelledby","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","access","c","heatmap","colors","l","startColor","endColor","startTitle","endTitle","p","textTransform","ListItemSecondaryAction","Switch","edge","checked","TogglesMenu","paddingLeft","paddingRight","padding","spacing","drawerPaper","toggleDrawer","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","includes","thisToggle","displayName","elevation","BackdropProps","invisible","onClose","FABMenu","flexDirection","position","paddingTop","Tooltip","title","Fab","MenuContainer","drawerOpen","indexOf","updatedMenuState","splice","showEditMenu","SelectionTarget","mousePos","divSize","rc","colorTrans","mouseX","clientX","mouseY","clientY","border","mouseDown","borderColor","borderRadius","pointerEvents","left","top","fontSize","CellMeta","fontWeight","hoveredObj","object","tzlookup","require","_proccessGridData","typesSettings","TUIgridData","grid","GEOGRIDDATA","features","interactive","geoGridMapping","geogrid_to_tui_mapping","counter","thisCellMapping","gridCellType","interactiveCellProps","cellValueByIndex","JSON","parse","stringify","_proccesNetworkPnts","metaGrid","networkGeojson","gridRows","header","nrows","gridCols","ncols","cell","pnt","land_use","netWidth","gridPosition","geometry","coordinates","_proccessAccessData","accessData","d","_postMapEditsToCityIO","endPoint","options","method","url","Accept","_proccessBresenhamGrid","bresenhamGrid","row","pntLatLong","Map","_onViewStateChange","viewState","orthographic","_mulipleObjPicked","dim","pickingRadius","x","y","deckGL","pickObjects","_handleGridcellEditing","multiSelectedObj","thisCellProps","old_height","old_color","selectedCellsState","_handleNetworkHover","pntProps","old_netWidth","hoveredPnt","_handleNetworkRemove","path","networkLayer","item","tmpObj","_handleNetworkCreate","networkFirstPoint","pickData","pickObject","class","tmpArr","FP","SP","bresenhamLine","x0","y0","x1","y1","xWalker","yWalker","deltaX","deltaY","absDeltaX","absDeltaY","errX","errY","xDestination","yDestination","step","_pushTobresenhamLine","posString","pathArr","abs","_bresenhamLine","Array","isArray","_renderSelectionTarget","_handleKeyUp","keyDownState","_handleKeyDown","nativeEvent","_remapValues","draggingWhileEditing","selectedNetState","initialViewState","networkEdge","animationFrame","timeZoneOffset","hourAtLatLong","Date","toLocaleString","timeZone","latitude","longitude","hour","hour12","getUTCHours","parseInt","setDirLightSettings","dirLightSettings","timestamp","UTC","intensity","_shadow","cancelAnimationFrame","_rightClickViewRotate","_setupEffects","_setViewStateToTableHeader","networkPnts","GEONETWORK","_animate","prevProps","prevState","animateABM","animateCamera","_effects","shadowColor","dataProps","pitch","zoom","bearing","rotation","ambientLight","AmbientLight","dirLight","_SunLight","lightingEffect","LightingEffect","startHour","endHour","t","currentDateMidnight","setHours","date","getTime","directionalLights","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","requestAnimationFrame","bind","document","getElementById","addEventListener","evt","preventDefault","zoomLevel","GeoJsonLayer","visible","pickable","extruded","lineWidthScale","lineWidthMinPixels","getElevation","getFillColor","onHover","onDrag","onDragStart","onDragEnd","updateTriggers","transitions","ScatterplotLayer","opacity","filled","radiusScale","radiusMinPixels","radiusMaxPixels","getPosition","getRadius","PathLayer","widthScale","widthMinPixels","getPath","getColor","getWidth","HeatmapLayer","colorRange","radiusPixels","getWeight","TripsLayer","getTimestamps","timestamps","mode","rounded","trailLength","currentTime","noisePath","onKeyDown","onKeyUp","onMouseMove","onMouseUp","onMouseDown","getCursor","ref","deck","onViewStateChange","_renderLayers","effects","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","asyncRender","reuseMaps","mapboxApiAccessToken","process","mapStyle","blue","preventStyleDiffing","solve","transformPointsToMatrix","sourcePoints","targetPoints","a","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","vectorToTransform","vector","styles","container","cursor","anchorSize","bottom","right","AnchorComponent","translation","onMouseEnter","transform","DeleteLocalStorage","Grid","justify","Button","startIcon","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","Layer","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","onAnchorMouseUp","isEditMode","newVector","_clearLocalStraoge","localStorage","getItem","removeItem","location","reload","getBoundingClientRect","ls","setItem","removeEventListener","anchorStyle","anchorClassName","MapContainer","_checkKeystone","overflow","Radar","domains","radarData","radarSize","drawerWidth","indicators","refData","viz_type","ref_value","domain","generateData","animation","polygons","fillOpacity","strokeWidth","axes","text","fill","labels","textAnchor","stroke","tickValues","v","items","DownloadRawData","element","createElement","file","Blob","href","createObjectURL","download","body","appendChild","click","downloadTxtFile","size","barChartData","hoverdNode","dataArr","refDataArr","refChartData","hoveredNode","xType","stackBy","yDomain","tickLabelAngle","onValueMouseOver","componentToHex","hex","AreaCalc","radialRadius","hoveredRadial","setHoveredRadial","cellSize","geoGridData","calcAreaObj","gridCellData","r","g","typeName","hasOwnProperty","count","area","radialData","k","calcArea","colorType","innerRadius","radius","getLabel","labelsRadiusMultiplier","labelsStyle","textShadow","showLabels","getAngle","onSeriesMouseOut","padAngle","background","showRadar","Paper","BarChart","override","css","LoadingSpinner","loading","Screen","ready","createMuiTheme","palette","default","MapRoute","pre","cityscopePrjName","substring","ThemeProvider","CssBaseline","Provider","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.12b1b3ea.chunk.js","sourcesContent":["import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","/**\n * ACTIONS\n */\nexport const GET_CITYIO_DATA = \"GET_CITYIO_DATA\";\nexport function getCityioData(data) {\n    return { type: GET_CITYIO_DATA, data };\n}\n\nexport const LISTEN_TO_MAP_EVENTS = \"LISTEN_TO_MAP_EVENTS\";\nexport function listenToMapEvents(data) {\n    return { type: LISTEN_TO_MAP_EVENTS, data };\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = \"LISTEN_TO_ABM_SLIDERS\";\nexport function listenToSlidersEvents(data) {\n    return { type: LISTEN_TO_ABM_SLIDERS, data };\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = \"LISTEN_TO_ACCESS_TOGGLE\";\nexport function listenToAccessToggle(data) {\n    return { type: LISTEN_TO_ACCESS_TOGGLE, data };\n}\n\nexport const MENU_INTERACTION = \"MENU_INTERACTION\";\n\nexport function listenToMenuUI(data) {\n    return { type: MENU_INTERACTION, data };\n}\n\nexport const LISTEN_TO_EDIT_MENU = \"LISTEN_TO_EDIT_MENU\";\nexport function listenToEditMenu(data) {\n    return { type: LISTEN_TO_EDIT_MENU, data };\n}\n\nexport const SET_READY_STATE = \"SET_READY_STATE\";\nexport function setReadyState(data) {\n    return { type: SET_READY_STATE, data };\n}\n\nexport const SET_LOADING_STATE = \"SET_LOADING_STATE\";\nexport function setLoadingState(data) {\n    return { type: SET_LOADING_STATE, data };\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    MAP: {},\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.endSimHour\n        ],\n        speed: settings.map.layers.ABM.animationSpeed\n    },\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: {\n        height: 0,\n        color: [255, 0, 0, 200],\n        name: \"Select Land-Use!\"\n    },\n    READY: false,\n    LOADING: false\n};\n\nexport default initialState;\n","import {\n    GET_CITYIO_DATA,\n    MENU_INTERACTION,\n    LISTEN_TO_MAP_EVENTS,\n    LISTEN_TO_ABM_SLIDERS,\n    LISTEN_TO_EDIT_MENU,\n    SET_READY_STATE,\n    SET_LOADING_STATE,\n    LISTEN_TO_ACCESS_TOGGLE\n} from \"./actions\";\nimport initialState from \"./initialState\";\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_CITYIO_DATA:\n            return { ...state, CITYIO: action.data };\n        case MENU_INTERACTION:\n            return { ...state, MENU: action.data };\n        case LISTEN_TO_MAP_EVENTS:\n            return { ...state, MAP: action.data };\n        case LISTEN_TO_ABM_SLIDERS:\n            return { ...state, SLIDERS: action.data };\n        case LISTEN_TO_ACCESS_TOGGLE:\n            return { ...state, ACCESS_TOGGLE: action.data };\n        case LISTEN_TO_EDIT_MENU:\n            return { ...state, SELECTED_TYPE: action.data };\n        case SET_READY_STATE:\n            return { ...state, READY: action.data };\n        case SET_LOADING_STATE:\n            return { ...state, LOADING: action.data };\n        default:\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nexport default configureStore;\n","import { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n} from \"../redux/actions\";\nimport settings from \"../settings/settings.json\";\n\nclass CityIO extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            oldHashs: {},\n            cityIOmodulesData: {},\n        };\n        this.cityioURL = null;\n    }\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    componentDidMount() {\n        this._isMounted = true;\n        this.handleURL();\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    handleURL = () => {\n        if (this.props.tableName === \"mockAPI\") {\n            this.cityioURL = settings.cityIO.mockURL;\n        } else {\n            this.cityioURL = settings.cityIO.baseURL + this.props.tableName;\n        }\n\n        // get the hashes first\n        this.getCityIOHash(this.cityioURL + \"/meta\");\n        // and every interval\n        this.timer = setInterval(() => {\n            if (this._isMounted) {\n                this.getCityIOHash(this.cityioURL + \"/meta\");\n            }\n        }, settings.cityIO.interval);\n        console.log(\n            \"starting cityIO GET interval every \" +\n                settings.cityIO.interval +\n                \"ms \"\n        );\n    };\n\n    /**\n     * returns only the hasees from API\n     */\n    getCityIOHash = (URL) => {\n        axios\n            .get(URL)\n            .then((response) => {\n                this.handleCityIOHashes(response.data);\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    };\n\n    /**\n     * check for updated hashes.\n     * if new hashes exist,\n     * fetch !! WHOLE API (for now)\n     */\n    handleCityIOHashes = (result) => {\n        // if master hash ID has changed (cityIO table state)\n        if (result.id !== this.state.oldHashs.id) {\n            // reset the cityIOmodulesStatus\n            this.setState({ cityIOmodulesStatus: {} });\n\n            // reset the state of this flag\n            this.props.setLoadingState(true);\n\n            // new data in table, get all modules\n            // that are listed in settings\n            settings.cityIO.cityIOmodules.forEach((module) => {\n                // only update modules that have new data\n                if (result.hashes[module] !== this.state.oldHashs[module]) {\n                    // set this module as not ready\n                    this.setNestedState(\"cityIOmodulesStatus\", module, false);\n                    // get the module data from cityIO\n                    this.getCityIOmoduleData(\n                        module,\n                        this.cityioURL + \"/\" + module\n                    );\n                    // update this new module hash in state\n                    this.setNestedState(\n                        \"oldHashs\",\n                        module,\n                        result.hashes[module]\n                    );\n                } else {\n                    // update module name with ok\n                    this.setNestedState(\"cityIOmodulesStatus\", module, true);\n                }\n            });\n            // finally, put to state the hashes master id\n            this.setNestedState(\"oldHashs\", \"id\", result.id);\n        }\n    };\n\n    /**\n     *\n     * Helper function to set nested state\n     */\n\n    setNestedState = (parent, child, data) => {\n        var holder = { ...this.state[parent] };\n        holder[child] = data;\n        this.setState({ [parent]: holder });\n    };\n\n    /**\n     * get each module data\n     */\n    getCityIOmoduleData = (moduleName, URL) => {\n        axios\n            .get(URL)\n            .then((response) => {\n                // put response to state obj\n                this.setNestedState(\n                    \"cityIOmodulesData\",\n                    moduleName,\n                    response.data\n                );\n                console.log(\"...updating module:\", moduleName);\n                this.checkDoneCityIO(moduleName);\n            })\n\n            .catch((error) => {\n                if (error.response) {\n                    console.log(\n                        \"error.response:\",\n                        \"\\n\",\n                        error.response.data,\n                        \"\\n\",\n                        error.response.status,\n                        \"\\n\",\n                        error.response.headers\n                    );\n                } else if (error.request) {\n                    console.log(\"error.request:\", error.request);\n                } else {\n                    console.log(\"misc error:\", error.message);\n                }\n                console.log(\"request config:\", error.config);\n            });\n    };\n\n    checkDoneCityIO = (moduleName) => {\n        this.setNestedState(\"cityIOmodulesStatus\", moduleName, true);\n\n        // check if all modules are done\n        for (const status in this.state.cityIOmodulesStatus) {\n            if (this.state.cityIOmodulesStatus[status] !== true) {\n                // we still need to update some module, stop\n                return;\n            }\n        }\n        //  if so, share the data with the app\n        const data = this.state.cityIOmodulesData;\n        data.tableName = this.props.tableName;\n        // finally, send data to redux\n        this.props.getCityioData(data);\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        this.props.setReadyState(true);\n        this.props.setLoadingState(false);\n    };\n\n    render() {\n        return null;\n    }\n}\n\nconst mapDispatchToProps = {\n    getCityioData: getCityioData,\n    setReadyState: setReadyState,\n    setLoadingState: setLoadingState,\n};\n\nexport default connect(null, mapDispatchToProps)(CityIO);\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { listenToEditMenu } from \"../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nfunction EditMenu(props) {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            width: 300,\n            zIndex: theme.zIndex.drawer + 1,\n        },\n\n        marginAutoContainer: {\n            width: \"100%\",\n            display: \"flex\",\n        },\n        marginAutoItem: {\n            margin: \"auto\",\n            width: \"80%\",\n        },\n    }));\n\n    const classes = useStyles();\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    const selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const { height } = selectedType;\n    const marks = [\n        { value: 0, label: \"0 floors\" },\n        { value: 50, label: \"50 floors\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            let col = LanduseTypesList[type].color;\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n\n            let typeHasHeightProps = false;\n            if (LanduseTypesList[type].height) {\n                typeHasHeightProps = true;\n            }\n\n            iconsArr.push(\n                <React.Fragment key={Math.random()}>\n                    <Divider\n                        key={Math.random()}\n                        variant=\"inset\"\n                        component=\"li\"\n                        classes={{ root: classes.dividerColor }}\n                    />\n\n                    <ListItem\n                        key={Math.random()}\n                        alignItems=\"flex-start\"\n                        button\n                        variant=\"raised\"\n                        selected={selected}\n                        onClick={(event) =>\n                            handleListItemClick(\n                                event,\n                                type,\n                                LanduseTypesList[type]\n                            )\n                        }\n                        className={classes.list}\n                    >\n                        <ListItemAvatar key={Math.random()}>\n                            <Avatar style={{ backgroundColor: rgbCol }}>\n                                {type.charAt(0)}\n                            </Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            key={Math.random()}\n                            classes={{\n                                primary: classes.listItemPrimaryText,\n                                secondary: classes.listItemSecondaryText,\n                            }}\n                            primary={type}\n                        />\n                    </ListItem>\n\n                    {typeHasHeightProps && (\n                        <div className={classes.marginAutoContainer}>\n                            <div className={classes.marginAutoItem}>\n                                <Collapse in={selected} key={Math.random()}>\n                                    <Slider\n                                        key={Math.random()}\n                                        value={height}\n                                        valueLabelDisplay=\"auto\"\n                                        className={classes.slider}\n                                        onChangeCommitted={(event, value) =>\n                                            dispatch(\n                                                listenToEditMenu({\n                                                    ...selectedType,\n                                                    height: value,\n                                                })\n                                            )\n                                        }\n                                        getAriaLabel={(index) =>\n                                            index.toString()\n                                        }\n                                        min={0}\n                                        max={50}\n                                        marks={marks}\n                                    ></Slider>\n                                </Collapse>\n                            </div>\n                        </div>\n                    )}\n                </React.Fragment>\n            );\n        });\n        return iconsArr;\n    };\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            <List>\n                {createTypesIcons(props.cityioData.GEOGRID.properties.types)}\n            </List>\n        </Drawer>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../redux/actions\";\n\nfunction ABMSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector((state) => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const handleSetSpeedValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                speed: newValue,\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\",\n        },\n        {\n            value: 21600,\n            label: \"6AM\",\n        },\n        {\n            value: 43200,\n            label: \"12PM\",\n        },\n        {\n            value: 64800,\n            label: \"6PM\",\n        },\n        {\n            value: 86400,\n            label: \"12AM\",\n        },\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Simulation Range\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n            <Typography\n                className={classes.subtitle2}\n                variant=\"subtitle2\"\n                id=\"continuous-slider\"\n                gutterBottom\n            >\n                Simulation Speed\n            </Typography>\n            <Slider\n                min={0}\n                max={100}\n                value={sliders.speed}\n                onChange={handleSetSpeedValue}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"continuous-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ABMSubmenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { listenToAccessToggle } from \"../../../../redux/actions\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { ContinuousColorLegend } from \"react-vis\";\n\nimport settings from \"../../../../settings/settings.json\";\n\nfunction AccessSubmenu(props) {\n    const accessToggle = useSelector((state) => state.ACCESS_TOGGLE);\n\n    const { cityioData } = props;\n\n    const ACCESS_PROPERTIES =\n        cityioData && cityioData.access && cityioData.access.properties\n            ? cityioData.access.properties\n            : [];\n\n    const dispatch = useDispatch();\n    const c = settings.map.layers.heatmap.colors;\n    const l = c.length - 1;\n    return (\n        <List>\n            <ListItem>\n                <ContinuousColorLegend\n                    width={500}\n                    startColor={\n                        \"rgb(\" + c[0][0] + \",\" + c[0][1] + \",\" + c[0][2] + \")\"\n                    }\n                    endColor={\n                        \"rgb(\" + c[l][0] + \",\" + c[l][1] + \",\" + c[l][2] + \")\"\n                    }\n                    startTitle=\"No Access\"\n                    endTitle=\"Full Access\"\n                />\n            </ListItem>\n            {ACCESS_PROPERTIES.map((p, i) => (\n                <ListItem key={p}>\n                    <ListItemText\n                        primary={p}\n                        style={{ textTransform: \"capitalize\" }}\n                    />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            checked={accessToggle === i}\n                            onChange={() => {\n                                dispatch(listenToAccessToggle(i));\n                            }}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AccessSubmenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport settings from \"../../../settings/settings.json\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ABMSubmenu from \"./ABMSubmenu\";\nimport AccessSubmenu from \"./AccessSubmenu\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction TogglesMenu(props) {\n    let drawerWidth = 350;\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            display: \"flex\",\n            paddingLeft: 16,\n            paddingRight: 16,\n            width: drawerWidth,\n            padding: theme.spacing(0, 1),\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const { open, toggleDrawer, handleToggle } = props;\n\n    const { menuState, cityioData } = useSelector((state) => ({\n        menuState: state.MENU,\n        cityioData: state.CITYIO,\n    }));\n\n    const togglesMeta = settings.menu.toggles;\n    const listOfToggles = Object.keys(togglesMeta);\n\n    /**\n     * gets props with initial menu state\n     * and turn on the layer on init\n     */\n    let togglesCompsArray = [];\n    // array of loaded API modules\n    const loadedModules = Object.keys(cityioData);\n    // create each toggle\n    for (let i = 0; i < listOfToggles.length; i++) {\n        // check if the mdoule of this toggle\n        // was loaded on the API\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\n\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\n\n        if (loadedModules.includes(requireModule) || requireModule === false) {\n            const thisToggle = (\n                <div key={listOfToggles[i]}>\n                    <ListItem>\n                        <ListItemText\n                            primary={togglesMeta[listOfToggles[i]].displayName}\n                        />\n                        <ListItemSecondaryAction>\n                            <Switch\n                                edge=\"end\"\n                                onChange={handleToggle(listOfToggles[i])}\n                                checked={checked}\n                            />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"ABM\" && (\n                            <Collapse in={checked} style={{ width: \"100%\" }}>\n                                <ABMSubmenu />\n                            </Collapse>\n                        )\n                    }\n                    {listOfToggles[i] === \"ACCESS\" && (\n                        <Collapse\n                            in={checked}\n                            style={{\n                                width: \"80%\",\n                                marginLeft: 24,\n                            }}\n                        >\n                            <AccessSubmenu cityioData={cityioData} />\n                        </Collapse>\n                    )}\n                </div>\n            );\n            togglesCompsArray.push(thisToggle);\n        }\n    }\n\n    return (\n        <Drawer\n            elevation={3}\n            className={classes.drawer}\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n            BackdropProps={{\n                invisible: true,\n            }}\n            anchor=\"left\"\n            open={open}\n            onClose={toggleDrawer}\n        >\n            <List className={classes.list}>\n                <ListItem>\n                    <Typography variant=\"h6\" gutterBottom>\n                        MIT CityScope\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Toggle layers visibility\n                    </Typography>\n                </ListItem>\n                {togglesCompsArray}\n            </List>\n        </Drawer>\n    );\n}\n\nexport default TogglesMenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Fab from \"@material-ui/core/Fab\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function FABMenu(props) {\n    const useStyles = makeStyles({\n        root: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            position: \"fixed\",\n            paddingLeft: 16,\n            paddingTop: 8,\n            zIndex: 1,\n        },\n    });\n\n    const classes = useStyles();\n\n    const menuState = useSelector((state) => state.MENU);\n    const { handleToggle, toggleDrawer } = props;\n\n    return (\n        <List className={classes.root}>\n            <ListItem>\n                <Tooltip title=\"Open Layer + Settings Menu\">\n                    <Fab color=\"secondary\" onClick={toggleDrawer}>\n                        <MenuIcon />\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Toggle Edit Grid Mode, send to cityIO\">\n                    <Fab color=\"secondary\" onClick={handleToggle(\"EDIT\")}>\n                        {menuState.includes(\"EDIT\") ? (\n                            <CancelIcon style={{ color: \"e91e63\" }} />\n                        ) : (\n                            <EditIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Reset View/Toggle Ortho\">\n                    <Fab color=\"secondary\" onClick={handleToggle(\"RESET_VIEW\")}>\n                        {menuState.includes(\"RESET_VIEW\") ? (\n                            <NavigationIcon />\n                        ) : (\n                            <NearMeIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToMenuUI } from \"../../redux/actions\";\nimport EditMenu from \"./EditMenu/EditMenu\";\nimport TogglesMenu from \"./TogglesMenu\";\nimport FABMenu from \"./FABMenu\";\n\nfunction MenuContainer() {\n    const menuState = useSelector((state) => state.MENU);\n    const dispatch = useDispatch();\n\n    const [state, setState] = React.useState({\n        drawerOpen: false,\n    });\n\n    const toggleDrawer = () => {\n        setState({ ...state, drawerOpen: !state.drawerOpen });\n    };\n\n    const handleToggle = (value) => () => {\n        const i = menuState.indexOf(value);\n        const updatedMenuState = [...menuState];\n        if (i === -1) {\n            updatedMenuState.push(value);\n        } else {\n            updatedMenuState.splice(i, 1);\n        }\n\n        dispatch(listenToMenuUI(updatedMenuState));\n    };\n\n    const showEditMenu = menuState && menuState.includes(\"EDIT\");\n\n    return (\n        <div>\n            <TogglesMenu\n                open={state.drawerOpen}\n                toggleDrawer={toggleDrawer}\n                handleToggle={handleToggle}\n            />\n            <FABMenu toggleDrawer={toggleDrawer} handleToggle={handleToggle} />\n            {showEditMenu && <EditMenu key={\"EDIT\"} />}\n        </div>\n    );\n}\n\nexport default MenuContainer;\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const SelectionTarget = (props) => {\n    const selectedType = props.selectedType;\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    const divSize = props.divSize;\n    const rc = selectedType.color;\n    const color = \"rgb(\" + rc[0] + \",\" + rc[1] + \",\" + rc[2] + \")\";\n    const colorTrans = \"rgba(\" + rc[0] + \",\" + rc[1] + \",\" + rc[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\",\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n};\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    return (\n        <div\n            style={{\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                pointerEvents: \"none\",\n                backgroundColor: \"rgba(0,0,0,0.5)\",\n                padding: \"1vw\",\n                color: \"rgba(255,255,255,0.9)\",\n                zIndex: 1,\n                left: mousePos.clientX,\n                top: mousePos.clientY,\n                fontSize: \"0.65em\",\n                fontWeight: 500,\n            }}\n        >\n            <p>\n                Type:\n                {props.hoveredObj.object.properties.name}\n            </p>\n            <p>\n                Floors:\n                {props.hoveredObj.object.properties.height}\n            </p>\n            <p>\n                ID:\n                {props.hoveredObj.object.properties.id}\n            </p>\n        </div>\n    );\n};\n","import settings from \"../../settings/settings.json\";\nimport axios from \"axios\";\nvar tzlookup = require(\"tz-lookup\");\n\n/**\n * returns time for table location\n * for the light emlement\n * @param {*} header\n */\n\nexport const setDirLightSettings = (header) => {\n    // get the hour element of this location\n    let hourAtLatLong = new Date().toLocaleString(\"en-US\", {\n        timeZone: tzlookup(header.latitude, header.longitude),\n        hour: \"2-digit\",\n        hour12: false,\n    });\n\n    // get the time in greenwich\n    var greenwichDate = new Date();\n    var greenwichHours = greenwichDate.getUTCHours();\n    // calc the offset\n    let timeZoneOffset = greenwichHours + 24 - parseInt(hourAtLatLong);\n    return timeZoneOffset;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n    let typesSettings = settings.map.types;\n    const TUIgridData = cityioData.grid;\n    const GEOGRID = cityioData.GEOGRID;\n    const GEOGRIDDATA = cityioData.GEOGRIDDATA;\n    // update GEOGRID features from GEOGRIDDATA on cityio\n    if (GEOGRIDDATA && GEOGRIDDATA.length > 0) {\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties = GEOGRIDDATA[i];\n            GEOGRID.features[i].properties.id = i;\n        }\n        // for first init of gird\n        // when GEOPGRIDDATA was not yet created\n    } else {\n        // clreate empty grid\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties.id = i;\n            // set no color for when no land use exist\n            GEOGRID.features[i].properties.color = [0, 0, 0, 0];\n            GEOGRID.features[i].properties.height = 0.1;\n            GEOGRID.features[i].properties.name = \"empty\";\n            GEOGRID.features[i].properties.interactive = true;\n        }\n    }\n\n    // handles TUI grid data on update\n    const geoGridMapping = cityioData.GEOGRID.properties.geogrid_to_tui_mapping;\n    let counter = 0;\n    for (let thisCellMapping in geoGridMapping) {\n        // type is the first value in the cell array\n        // the rotation is the 2nd\n        let gridCellType = TUIgridData[counter][0];\n        let interactiveCellProps = GEOGRID.features[thisCellMapping].properties;\n        // set up the cell type\n        interactiveCellProps.type = gridCellType;\n        // check if not undefined type (no scanning)\n        if (TUIgridData[counter][0] !== -1) {\n            // get value of cell from settings via its index\n            let cellValueByIndex = Object.values(typesSettings)[\n                TUIgridData[counter][0]\n            ];\n            // cast the cell color\n            interactiveCellProps.color = cellValueByIndex.color;\n            // cast the cell height\n            interactiveCellProps.height = cellValueByIndex.height;\n        } else {\n            console.log(\"... got null type...\");\n        }\n        counter = counter + 1;\n    }\n    const newGrid = JSON.parse(JSON.stringify(GEOGRID));\n    return newGrid;\n};\n\n/**\n * proccess grid data to geojson\n * of lineStrings\n * @param {cityIOdata} data\n * \n \nfeatures  :[\n    {\n        type: \"Feature\",\n        properties: {},\n        geometry: {\n            type: \"Point\",\n            coordinates: [125.6, 10.1]\n        },\n        properties: {\n            name: \"Dinagat Islands\"\n        }\n    }...\n]\n */\n\nexport const _proccesNetworkPnts = (cityioData) => {\n    const metaGrid = cityioData.GEOGRID.features;\n    // pnt object\n    const networkGeojson = {\n        type: \"FeatureCollection\",\n        features: [],\n    };\n\n    const gridRows = cityioData.GEOGRID.properties.header.nrows;\n    const gridCols = cityioData.GEOGRID.properties.header.ncols;\n\n    let counter = 0;\n\n    // create array for obstecles\n    // and array for coordinates\n    for (let cell = 0; cell < gridRows; cell++) {\n        for (var col = 0; col < gridCols; col++) {\n            let props;\n            const pntLatLong = metaGrid[counter].geometry.coordinates[0][0];\n            props = {\n                land_use: \"network\",\n                netWidth: 5,\n                color: [255, 255, 255, 150],\n                gridPosition: [col, cell],\n            };\n            const pnt = {\n                type: \"Feature\",\n                properties: props,\n                geometry: {\n                    type: \"Point\",\n                    coordinates: pntLatLong,\n                },\n            };\n            networkGeojson.features.push(pnt);\n            counter += 1;\n        }\n    }\n    return networkGeojson;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (data) => {\n    const accessData = data.access;\n    // get colors from settings\n    let coordinates = accessData.features.map((d) => d.geometry.coordinates);\n    let values = accessData.features.map((d) => d.properties);\n    let heatmap = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        heatmap.push({\n            coordinates: coordinates[i],\n            values: values[i],\n        });\n    }\n    return heatmap;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n    let postURL;\n    // check if cityIO or local server\n    postURL =\n        tableName === \"mockAPI\"\n            ? settings.cityIO.mockURL + endPoint\n            : \"https://cityio.media.mit.edu/api/table/update/\" +\n              tableName +\n              endPoint;\n\n    const options = {\n        method: \"post\",\n        url: postURL,\n        data: data,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options).catch((error) => {\n        console.log(error);\n\n        console.log(\"ERROR:\", error);\n    });\n};\n\nexport const _proccessBresenhamGrid = (cityioData) => {\n    let bresenhamGrid = {};\n    const metaGrid = cityioData.GEOGRID.features;\n    const gridRows = cityioData.GEOGRID.properties.header.nrows;\n    const gridCols = cityioData.GEOGRID.properties.header.ncols;\n\n    let counter = 0;\n    for (let row = 0; row < gridRows; row++) {\n        for (var col = 0; col < gridCols; col++) {\n            const pntLatLong = metaGrid[counter].geometry.coordinates[0][0];\n            let posString = [col, row].toString();\n            bresenhamGrid[posString] = pntLatLong;\n            counter += 1;\n        }\n    }\n    return bresenhamGrid;\n};\n\n/**\n * https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm\n */\nexport const _bresenhamLine = (x0, y0, x1, y1, bresenhamGrid) => {\n    // search for latLong for this pixel\n    const _pushTobresenhamLine = (x, y) => {\n        let posString = [x, y].toString();\n        pathArr.push(bresenhamGrid[posString]);\n    };\n    let pathArr = [];\n    // Iterators, counters required by algorithm\n    let xWalker,\n        yWalker,\n        deltaX,\n        deltaY,\n        absDeltaX,\n        absDeltaY,\n        errX,\n        errY,\n        xDestination,\n        yDestination,\n        step;\n    // Calculate line deltas\n    deltaX = x1 - x0;\n    deltaY = y1 - y0;\n    // Create a positive copy of deltas (makes iterating easier)\n    absDeltaX = Math.abs(deltaX);\n    absDeltaY = Math.abs(deltaY);\n    // Calculate error intervals for both axis\n    errX = 2 * absDeltaY - absDeltaX;\n    errY = 2 * absDeltaX - absDeltaY;\n    // The line is X-axis dominant\n    if (absDeltaY <= absDeltaX) {\n        // Line is drawn left to right\n        if (deltaX >= 0) {\n            xWalker = x0;\n            yWalker = y0;\n            xDestination = x1;\n        }\n        // Line is drawn right to left (swap ends)\n        else {\n            xWalker = x1;\n            yWalker = y1;\n            xDestination = x0;\n        }\n        // Push first pixel\n        _pushTobresenhamLine(xWalker, yWalker);\n        // Rasterize the line\n        for (step = 0; xWalker < xDestination; step++) {\n            // move one step on x\n            xWalker = xWalker + 1;\n            // errX is smaller than 0\n            if (errX < 0) {\n                errX = errX + 2 * absDeltaY;\n                _pushTobresenhamLine(xWalker, yWalker);\n            }\n            // errX is larger than 0\n            else {\n                if ((deltaX < 0 && deltaY < 0) || (deltaX > 0 && deltaY > 0)) {\n                    yWalker = yWalker + 1;\n                } else {\n                    yWalker = yWalker - 1;\n                }\n                errX = errX + 2 * (absDeltaY - absDeltaX);\n                // push pnt that stays on x for the y+1 step\n                // so that the a 90deg step is created\n                _pushTobresenhamLine(xWalker - 1, yWalker);\n            }\n            _pushTobresenhamLine(xWalker, yWalker);\n        }\n    }\n    // The line is Y-axis dominant\n    else if (absDeltaY > absDeltaX) {\n        // Line is drawn bottom to top\n        if (deltaY >= 0) {\n            xWalker = x0;\n            yWalker = y0;\n            yDestination = y1;\n        } else {\n            // Line is drawn top to bottom\n            xWalker = x1;\n            yWalker = y1;\n            yDestination = y0;\n        }\n        _pushTobresenhamLine(xWalker, yWalker); // Draw first pixel\n        // Rasterize the line\n        for (step = 0; yWalker < yDestination; step++) {\n            // move y\n            yWalker = yWalker + 1;\n            if (errY <= 0) {\n                errY = errY + 2 * absDeltaX;\n                _pushTobresenhamLine(xWalker, yWalker);\n            } else {\n                if ((deltaX < 0 && deltaY < 0) || (deltaX > 0 && deltaY > 0)) {\n                    xWalker = xWalker + 1;\n                } else {\n                    xWalker = xWalker - 1;\n                }\n                errY = errY + 2 * (absDeltaX - absDeltaY);\n                _pushTobresenhamLine(xWalker, yWalker - 1);\n            }\n            _pushTobresenhamLine(xWalker, yWalker);\n        }\n    }\n    return pathArr;\n};\n","/* global window */\nimport React, { Component } from \"react\";\nimport { CellMeta, SelectionTarget } from \"./baseMapComponents\";\nimport { connect } from \"react-redux\";\nimport {\n    _proccesNetworkPnts,\n    _proccessAccessData,\n    _proccessGridData,\n    _postMapEditsToCityIO,\n    _proccessBresenhamGrid,\n    setDirLightSettings,\n    _bresenhamLine,\n} from \"./baseMapUtils\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { TripsLayer } from \"@deck.gl/geo-layers\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport {\n    HeatmapLayer,\n    PathLayer,\n    GeoJsonLayer,\n    ScatterplotLayer,\n} from \"deck.gl\";\nimport { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\nimport settings from \"../../settings/settings.json\";\nimport { listenToSlidersEvents } from \"../../redux/actions\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            menu: [],\n            cityioData: null,\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            selectedNetState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n            networkFirstPoint: null,\n            networkEdge: [],\n            networkLayer: [],\n        };\n        this.animationFrame = null;\n        this.timeZoneOffset = setDirLightSettings(\n            this.props.cityioData.GEOGRID.properties.header\n        );\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 11 + this.timeZoneOffset),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        const { cityioData } = this.props;\n        // fix deck view rotate\n        this._rightClickViewRotate();\n        // setup sun effects\n        this._setupEffects();\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n        this.setState({\n            networkPnts: _proccesNetworkPnts(cityioData),\n            bresenhamGrid: _proccessBresenhamGrid(cityioData),\n            networkLayer: cityioData.GEONETWORK,\n        });\n\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    /**\n     * handels events as they derived from redux props\n     */\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.menu !== prevState.menu) {\n            this.setState({ menu: this.props.menu });\n        }\n\n        const { cityioData } = this.props;\n        if (prevState.cityioData !== cityioData) {\n            // get cityio data from props\n\n            this.setState({\n                cityioData: cityioData,\n                GEOGRID: _proccessGridData(cityioData),\n            });\n\n            // ! workaround for preloading access layer data\n            if (cityioData.access) {\n                this.setState({ access: _proccessAccessData(cityioData) });\n            }\n        }\n\n        // toggle ABM animation\n        if (\n            !prevProps.menu.includes(\"ABM\") &&\n            this.props.menu.includes(\"ABM\")\n        ) {\n            this.setState({ animateABM: true });\n        } else if (\n            prevProps.menu.includes(\"ABM\") &&\n            !this.props.menu.includes(\"ABM\")\n        ) {\n            this.setState({ animateABM: false });\n        }\n\n        // toggle rotate animation\n        if (\n            !prevProps.menu.includes(\"ROTATE\") &&\n            this.props.menu.includes(\"ROTATE\")\n        ) {\n            this.setState({ animateCamera: true });\n        } else if (\n            prevProps.menu.includes(\"ROTATE\") &&\n            !this.props.menu.includes(\"ROTATE\")\n        ) {\n            this.setState({ animateCamera: false });\n        }\n\n        if (\n            !prevProps.menu.includes(\"SHADOWS\") &&\n            this.props.menu.includes(\"SHADOWS\")\n        ) {\n            this._effects[0].shadowColor = [0, 0, 0, 0.5];\n        }\n\n        if (\n            prevProps.menu.includes(\"SHADOWS\") &&\n            !this.props.menu.includes(\"SHADOWS\")\n        ) {\n            this._effects[0].shadowColor = [0, 0, 0, 0];\n        }\n\n        //  toggle edit mode and send to cityio\n        if (\n            prevProps.menu.includes(\"EDIT\") &&\n            !this.props.menu.includes(\"EDIT\")\n        ) {\n            // take props from grid and send\n            let dataProps = [];\n            for (let i = 0; i < this.state.GEOGRID.features.length; i++) {\n                dataProps[i] = this.state.GEOGRID.features[i].properties;\n            }\n            _postMapEditsToCityIO(\n                dataProps,\n                cityioData.tableName,\n                \"/GEOGRIDDATA\"\n            );\n\n            _postMapEditsToCityIO(\n                this.state.networkLayer,\n                cityioData.tableName,\n                \"/GEONETWORK\"\n            );\n        }\n\n        // toggle reset view mode\n        if (\n            !prevProps.menu.includes(\"RESET_VIEW\") &&\n            this.props.menu.includes(\"RESET_VIEW\")\n        ) {\n            this._setViewStateToTableHeader();\n        } else if (\n            prevProps.menu.includes(\"RESET_VIEW\") &&\n            !this.props.menu.includes(\"RESET_VIEW\")\n        ) {\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    pitch: 45,\n                },\n            });\n        }\n    }\n\n    _onViewStateChange = ({ viewState }) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n\n        this.setState({ viewState });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        const header = this.props.cityioData.GEOGRID.properties.header;\n\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                longitude: header.longitude,\n                latitude: header.latitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 360 - header.rotation,\n                orthographic: true,\n            },\n        });\n    }\n\n    _setupEffects() {\n        const ambientLight = new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 0.85,\n        });\n        const dirLight = new _SunLight(this.dirLightSettings);\n        const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n        lightingEffect.shadowColor = [0, 0, 0, 0.5];\n        this._effects = [lightingEffect];\n    }\n\n    _animate() {\n        if (this.state.animateCamera) {\n            let bearing = this.state.viewState.bearing\n                ? this.state.viewState.bearing\n                : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    bearing: bearing,\n                },\n            });\n        }\n\n        if (this.state.animateABM) {\n            const time = this.props.sliders.time[1];\n            const speed = this.props.sliders.speed;\n            const startHour = this.props.sliders.time[0];\n            const endHour = this.props.sliders.time[2];\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n            var currentDateMidnight = new Date();\n            currentDateMidnight.setHours(0, 0, 0, 0);\n            var date = new Date(currentDateMidnight.getTime() + t * 1000);\n            this._effects[0].directionalLights[0].timestamp = Date.UTC(\n                date.getFullYear(),\n                date.getMonth(),\n                date.getDay(),\n                date.getHours(),\n                date.getMinutes(),\n                date.getSeconds()\n            );\n\n            this.props.listenToSlidersEvents({\n                ...this.props.sliders,\n                time: [\n                    this.props.sliders.time[0],\n                    t,\n                    this.props.sliders.time[2],\n                ],\n            });\n        }\n\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        const { selectedType } = this.props;\n        const { height, color, name } = selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n        multiSelectedObj.forEach((selected) => {\n            const thisCellProps = selected.object.properties;\n            if (thisCellProps && thisCellProps.interactive === true) {\n                thisCellProps.old_height = thisCellProps.height;\n                thisCellProps.old_color = thisCellProps.color;\n                thisCellProps.color = color;\n                thisCellProps.height = height;\n                thisCellProps.name = name;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    _handleNetworkHover = (pnt) => {\n        // paint the pnt\n        const { selectedType } = this.props;\n        // check if really a pnt\n        if (\n            pnt &&\n            pnt.object &&\n            pnt.object.properties &&\n            selectedType.name !== \"Clear network\"\n        ) {\n            const pntProps = pnt.object.properties;\n            pntProps.old_color = pntProps.color;\n            pntProps.color = selectedType.color;\n            pntProps.old_netWidth = pntProps.netWidth;\n            pntProps.netWidth = pntProps.netWidth * 2;\n            // dirty solution for animating selection\n            this.setState({\n                hoveredPnt: pnt.object,\n            });\n\n            // then back to org color\n            pntProps.color = pntProps.old_color;\n            pntProps.netWidth = pntProps.old_netWidth;\n\n            this.setState({\n                hoveredPnt: pnt.object,\n            });\n        }\n    };\n\n    _handleNetworkRemove = (path) => {\n        const selectedType = this.props.selectedType;\n        if (path.object && selectedType.name === \"Delete Path\") {\n            path = path.object;\n            this.state.networkLayer.forEach((item, index, object) => {\n                if (item.id === path.id) {\n                    object.splice(index, 1);\n                    let tmpObj = JSON.parse(JSON.stringify(object));\n                    this.setState({\n                        networkLayer: tmpObj,\n                    });\n                }\n            });\n        }\n    };\n\n    /**\n     *\n     * if we have the first pnt\n     * get the second point\n     * if on any of it's 4 immidate sides\n     * draw line\n     *\n     */\n    _handleNetworkCreate = (pnt) => {\n        // check if on network path  delete mode\n        const selectedType = this.props.selectedType;\n        // if we're not removing paths\n        if (selectedType.name !== \"Delete Path\") {\n            // if this is the first point\n            if (!this.state.networkFirstPoint) {\n                // make this the first point\n                this.setState({ networkFirstPoint: pnt });\n            } else {\n                const pickData = this.deckGL.pickObject({\n                    x: pnt.x,\n                    y: pnt.y,\n                });\n\n                if (\n                    pickData &&\n                    selectedType.class === \"networkClass\" &&\n                    selectedType.name !== \"Clear network\"\n                ) {\n                    const FP = this.state.networkFirstPoint.object.properties\n                        .gridPosition;\n                    const SP = pickData.object.properties.gridPosition;\n\n                    let lineObj = _bresenhamLine(\n                        FP[0],\n                        FP[1],\n                        SP[0],\n                        SP[1],\n                        this.state.bresenhamGrid\n                    );\n\n                    let tmpArr;\n\n                    tmpArr = Array.isArray(this.state.networkLayer)\n                        ? this.state.networkLayer\n                        : [];\n\n                    let bresenhamLine = {\n                        path: lineObj,\n                        id: tmpArr.length,\n                        selectedType: this.props.selectedType,\n                    };\n\n                    tmpArr.push(bresenhamLine);\n                    tmpArr = JSON.parse(JSON.stringify(tmpArr));\n                    this.setState({ networkLayer: tmpArr });\n                    // null the first pnt for new selection\n                    this.setState({ networkFirstPoint: null });\n                }\n            }\n        }\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        if (this.props.menu.includes(\"EDIT\")) {\n            return (\n                this.props.selectedType && (\n                    <SelectionTarget\n                        mousePos={this.state.mousePos}\n                        selectedType={this.props.selectedType}\n                        divSize={this.state.pickingRadius}\n                        mouseDown={this.state.mouseDown}\n                    />\n                )\n            );\n        } else {\n            return (\n                this.state.hoveredObj && (\n                    <CellMeta\n                        mousePos={this.state.mousePos}\n                        hoveredObj={this.state.hoveredObj}\n                    />\n                )\n            );\n        }\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n        if (e.nativeEvent.key === \"=\" && this.state.pickingRadius < 100) {\n            this.setState({ pickingRadius: this.state.pickingRadius + 5 });\n        } else if (e.nativeEvent.key === \"-\" && this.state.pickingRadius > 0) {\n            this.setState({ pickingRadius: this.state.pickingRadius - 5 });\n        }\n    };\n\n    /**\n     * remap line width\n     */\n    _remapValues = (value) => {\n        let remap =\n            value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n        return remap;\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        const zoomLevel = this.state.viewState.zoom;\n        const { cityioData } = this.props;\n        let layers = [];\n\n        if (this.props.menu.includes(\"GRID\")) {\n            layers.push(\n                new GeoJsonLayer({\n                    id: \"GRID\",\n                    // loads geogrid into visualization\n                    data: this.state.GEOGRID,\n                    visible: this.props.menu.includes(\"GRID\") ? true : false,\n                    pickable:\n                        this.props.selectedType.class === \"networkClass\"\n                            ? false\n                            : true,\n                    extruded: true,\n                    lineWidthScale: 1,\n                    lineWidthMinPixels: 2,\n                    getElevation: (d) => d.properties.height,\n                    getFillColor: (d) => d.properties.color,\n                    onClick: (event) => {\n                        if (\n                            this.props.menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        )\n                            this._handleGridcellEditing(event);\n                    },\n                    onHover: (e) => {\n                        if (e.object) {\n                            this.setState({ hoveredObj: e });\n                        }\n                    },\n\n                    onDrag: (event) => {\n                        if (\n                            this.props.menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        )\n                            this._handleGridcellEditing(event);\n                    },\n                    onDragStart: () => {\n                        if (\n                            this.props.menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        ) {\n                            this.setState({ draggingWhileEditing: true });\n                        }\n                    },\n                    onDragEnd: () => {\n                        this.setState({ draggingWhileEditing: false });\n                    },\n                    updateTriggers: {\n                        getFillColor: this.state.selectedCellsState,\n                        getElevation: this.state.selectedCellsState,\n                    },\n                    transitions: {\n                        getFillColor: 500,\n                        getElevation: 500,\n                    },\n                })\n            );\n        }\n\n        if (\n            this.props.menu.includes(\"NETWORK\") &&\n            this.state.networkPnts &&\n            this.state.networkPnts.features\n        ) {\n            if (this.props.menu.includes(\"EDIT\")) {\n                layers.push(\n                    new ScatterplotLayer({\n                        id: \"NETWORK\",\n                        data: this.state.networkPnts.features,\n                        pickable: true,\n                        opacity: 1,\n                        filled: true,\n                        radiusScale: 1,\n                        radiusMinPixels: 1,\n                        radiusMaxPixels: 100,\n                        getPosition: (d) => d.geometry.coordinates,\n                        getFillColor: (d) => d.properties.color,\n                        getRadius: (d) => d.properties.netWidth,\n\n                        onHover: (e) => {\n                            if (\n                                this.props.menu.includes(\"EDIT\") &&\n                                this.state.keyDownState !== \"Shift\"\n                            ) {\n                                this._handleNetworkHover(e);\n                            }\n                        },\n                        onClick: (e) => {\n                            if (\n                                this.props.menu.includes(\"EDIT\") &&\n                                this.state.keyDownState !== \"Shift\"\n                            ) {\n                                this._handleNetworkCreate(e);\n                            }\n                        },\n\n                        updateTriggers: {\n                            getFillColor: this.state.hoveredPnt,\n                            getRadius: this.state.hoveredPnt,\n                        },\n                        transitions: {\n                            getFillColor: 100,\n                            getRadius: 300,\n                        },\n                    })\n                );\n            }\n\n            layers.push(\n                new PathLayer({\n                    pickable: true,\n                    id: \"NETWORK_PATHS\",\n                    data: this.state.networkLayer,\n                    widthScale: 1,\n                    widthMinPixels: 5,\n                    getPath: (d) => d.path,\n                    getColor: (d) => d.selectedType.color,\n                    getWidth: (d) => d.selectedType.width,\n                    onClick: (e) => {\n                        if (\n                            this.props.menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        ) {\n                            this._handleNetworkRemove(e);\n                        }\n                    },\n                    updateTriggers: {\n                        getPath: this.state.networkLayer,\n                    },\n                    transitions: {\n                        getPath: 500,\n                    },\n                })\n            );\n        }\n\n        if (this.props.menu.includes(\"ACCESS\")) {\n            layers.push(\n                new HeatmapLayer({\n                    id: \"ACCESS\",\n                    visible: this.props.menu.includes(\"ACCESS\"),\n                    colorRange: settings.map.layers.heatmap.colors,\n                    radiusPixels: 200,\n                    opacity: 0.25,\n                    data: this.state.access,\n                    getPosition: (d) => d.coordinates,\n                    getWeight: (d) => d.values[this.props.accessToggle],\n                    updateTriggers: {\n                        getWeight: [this.props.accessToggle],\n                    },\n                })\n            );\n        }\n\n        if (this.props.menu.includes(\"ABM\")) {\n            layers.push(\n                new TripsLayer({\n                    id: \"ABM\",\n                    visible: this.props.menu.includes(\"ABM\") ? true : false,\n                    data: cityioData.ABM,\n                    getPath: (d) => d.path,\n                    getTimestamps: (d) => d.timestamps,\n                    getColor: (d) => {\n                        //switch between modes or types of users\n                        switch (d.mode[0]) {\n                            case 0:\n                                return [228, 26, 28];\n                            case 1:\n                                return [55, 126, 184];\n                            case 2:\n                                return [77, 175, 74];\n                            case 3:\n                                return [255, 255, 51];\n                            case 4:\n                                return [152, 78, 163];\n                            case 5:\n                                return [255, 127, 0];\n                            default:\n                                return [255, 255, 255];\n                        }\n                    },\n                    getWidth: 1,\n                    widthScale: this._remapValues(zoomLevel),\n                    opacity: 0.8,\n                    rounded: true,\n                    trailLength: 500,\n                    currentTime: this.props.sliders.time[1],\n                })\n            );\n        }\n\n        if (this.props.menu.includes(\"PATHS\")) {\n            layers.push(\n                new PathLayer({\n                    id: \"PATHS\",\n                    visible: this.props.menu.includes(\"PATHS\") ? true : false,\n                    _shadow: false,\n                    data: cityioData.ABM,\n                    getPath: (d) => {\n                        const noisePath =\n                            Math.random() < 0.5\n                                ? Math.random() * 0.00005\n                                : Math.random() * -0.00005;\n                        for (let i in d.path) {\n                            d.path[i][0] = d.path[i][0] + noisePath;\n                            d.path[i][1] = d.path[i][1] + noisePath;\n                            d.path[i][2] = d.mode[0] * 2;\n                        }\n                        return d.path;\n                    },\n                    getColor: (d) => {\n                        switch (d.mode[0]) {\n                            case 0:\n                                return [228, 26, 28];\n                            case 1:\n                                return [55, 126, 184];\n                            case 2:\n                                return [77, 175, 74];\n                            case 3:\n                                return [255, 255, 51];\n                            case 4:\n                                return [152, 78, 163];\n                            case 5:\n                                return [255, 127, 0];\n                            default:\n                                return [255, 255, 255];\n                        }\n                    },\n                    opacity: 0.2,\n                    getWidth: 1.5,\n                })\n            );\n        }\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {/* renders the slection box div */}\n\n                <React.Fragment>{this._renderSelectionTarget()}</React.Fragment>\n\n                <DeckGL\n                    // sets the cursor on paint\n                    getCursor={() =>\n                        this.props.menu.includes(\"EDIT\") ? \"none\" : \"all-scroll\"\n                    }\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    effects={this._effects}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        asyncRender={false}\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.blue}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        sliders: state.SLIDERS,\n        menu: state.MENU,\n        accessToggle: state.ACCESS_TOGGLE,\n    };\n};\n\nconst mapDispatchToProps = {\n    listenToSlidersEvents: listenToSlidersEvents,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);\n","import { Matrix3d, RectPoints, Vector } from \"./layer\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1\n    ].map(num => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./layer\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 30;\nconst halfAnchor = anchorSize / 2;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"4px solid white\",\n        cursor: \"move\"\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor\n    }\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {}\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={evt => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation)\n        }}\n    />\n);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        top: \"50vh\",\n        zIndex: 1000\n    }\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\nimport DeleteLocalStorage from \"./deleteLocalStorage\";\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport class Layer extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n        // if entered keystone mode\n        if (!prevProps.isEditMode && this.props.isEditMode) {\n            // if found prev. keystone data\n            if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }\n            // if left keystone mode\n        } else if (prevProps.isEditMode && !this.props.isEditMode) {\n            console.log(\"saving edited projMap...\");\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n    _clearLocalStraoge = () => {\n        if (localStorage.getItem(\"projMap\")) {\n            localStorage.removeItem(\"projMap\");\n        }\n        window.location.reload();\n    };\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <React.Fragment>\n                {isEditMode && (\n                    <div onClick={() => this._clearLocalStraoge()}>\n                        <DeleteLocalStorage />\n                    </div>\n                )}\n\n                <div\n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport MAP from \"./baseMap\";\nimport { connect } from \"react-redux\";\nimport { Layer } from \"../prjMap/layer\";\n\nclass MapContainer extends Component {\n    _checkKeystone = () => {\n        return this.props.menu.includes(\"KEYSTONE\") ? true : false;\n    };\n\n    render() {\n        return (\n            <div\n                style={{\n                    height: \"100vh\",\n                    width: \"100vw\",\n                    overflow: \"hidden\",\n                }}\n            >\n                <Layer\n                    style={{\n                        height: \"100vh\",\n                        width: \"100vw\",\n                    }}\n                    isEditMode={this._checkKeystone()}\n                >\n                    <MAP\n                        menu={this.props.menu}\n                        selectedType={this.props.selectedType}\n                    />\n                </Layer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        menu: state.MENU,\n        selectedType: state.SELECTED_TYPE,\n    };\n};\n\nexport default connect(mapStateToProps, null)(MapContainer);\n","import React, { Component } from \"react\";\nimport { CircularGridLines, RadarChart } from \"react-vis\";\nimport \"../../../../node_modules/react-vis/dist/style.css\";\nimport \"./Radar.css\";\nimport { DiscreteColorLegend } from \"react-vis\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            domains: [],\n            radarData: [],\n        };\n        this.radarSize = this.props.drawerWidth - 50;\n\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n        let radarData = {};\n        let refData = {};\n        let domains = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"radar\") {\n                radarData[indicators[i].name] = [indicators[i].value];\n                refData[indicators[i].name] = [indicators[i].ref_value];\n                indicators[i].domain = [0, 1];\n                domains.push(indicators[i]);\n            }\n        }\n        this.setState({ radarData: [radarData, refData], domains: domains });\n    }\n\n    componentDidMount() {\n        this.setState({ indicators: this.props.indicators });\n        this.generateData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.setState({ indicators: this.props.indicators });\n            console.log(\"new radar data..\");\n            this.generateData();\n        }\n    }\n\n    render() {\n        if (this.props.cityioData.indicators) {\n            return (\n                <div>\n                    <RadarChart\n                        className=\"Radar blur\"\n                        animation\n                        data={this.state.radarData}\n                        domains={this.state.domains}\n                        colorRange={this.colorRange}\n                        style={{\n                            polygons: {\n                                fillOpacity: 0.2,\n                                strokeWidth: 2,\n                            },\n                            axes: {\n                                text: {\n                                    opacity: 0,\n                                    fontWeight: 700,\n                                    fill: \"white\",\n                                },\n                                strokeWidth: 0,\n                            },\n                            labels: {\n                                textAnchor: \"middle\",\n                                fontSize: 10,\n                                fill: \"white\",\n                            },\n                        }}\n                        margin={{\n                            left: this.radarSize / 6,\n                            top: this.radarSize / 6,\n                            bottom: this.radarSize / 6,\n                            right: this.radarSize / 6,\n                        }}\n                        width={this.radarSize}\n                        height={this.radarSize}\n                    >\n                        <CircularGridLines\n                            style={{\n                                fill: \"white\",\n                                fillOpacity: 0.1,\n                                backgroundColor: \"#FFF\",\n                                opacity: 0.5,\n                                stroke: \"white\",\n                                width: 0.1,\n                            }}\n                            tickValues={[...new Array(11)].map(\n                                (v, i) => i / 10 - 1\n                            )}\n                        />\n                    </RadarChart>\n\n                    <DiscreteColorLegend\n                        items={[\"Design\", \"Reference\"]}\n                        colors={this.colorRange}\n                    />\n                </div>\n            );\n        } else return null;\n    }\n}\n\nexport default Radar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst downloadTxtFile = (props) => {\n    let data = JSON.stringify(props);\n    const element = document.createElement(\"a\");\n    const file = new Blob([data], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"data.json\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n};\n\nexport default function DownloadRawData(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Button\n                onClick={() => {\n                    downloadTxtFile(props);\n                }}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<SaveIcon />}\n            >\n                {props.title}\n            </Button>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalBarSeries,\n} from \"react-vis\";\nimport \"../../../../node_modules/react-vis/dist/style.css\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            barChartData: null,\n            hoverdNode: null,\n        };\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    componentDidMount() {\n        this.generateData();\n    }\n\n    /**\n   \n    [\n    { x: 2, y: 10 },\n    { x: 4, y: 5 },\n    { x: 12, y: 15 },\n    ]\n     */\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n\n        let dataArr = [];\n        let refDataArr = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"bar\") {\n                dataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].value,\n                });\n\n                refDataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].ref_value,\n                });\n            }\n        }\n\n        this.setState({ barChartData: dataArr, refChartData: refDataArr });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.generateData();\n        }\n    }\n\n    render() {\n        const { hoveredNode } = this.state;\n\n        return (\n            <>\n                {this.state.barChartData && (\n                    <div>\n                        {hoveredNode && (\n                            <Typography gutterBottom>\n                                {hoveredNode.x} : {hoveredNode.y}\n                            </Typography>\n                        )}\n\n                        <FlexibleWidthXYPlot\n                            opacity={0.2}\n                            xType=\"ordinal\"\n                            width={this.props.drawerWidth - 50}\n                            height={this.props.drawerWidth - 50}\n                            stackBy=\"y\"\n                            yDomain={[0, 1]}\n                        >\n                            <XAxis\n                                style={{\n                                    text: {\n                                        fill: \"#FFF\",\n                                    },\n                                }}\n                                tickLabelAngle={90}\n                            />\n                            <YAxis style={{ text: { fill: \"#FFF\" } }} />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.barChartData}\n                            />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.refChartData}\n                            />\n                        </FlexibleWidthXYPlot>\n\n                        <DownloadRawData\n                            data={this.props.cityioData.indicators}\n                            title={\"radar & bars data\"}\n                        />\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nexport default Radar;\n","function componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length === 1 ? \"0\" + hex : hex;\n}\n\nexport function rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n","import React, { useState } from \"react\";\nimport { rgbToHex } from \"../../../services/utils\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function AreaCalc(props) {\n    const radialRadius = props.drawerWidth - 100;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    const useStyles = makeStyles((theme) => ({\n        list: {\n            width: props.drawerWidth - 50,\n        },\n    }));\n\n    const classes = useStyles();\n\n    const calcArea = () => {\n        let gridProps = props.cityioData.GEOGRID.properties;\n        let cellSize = gridProps.header.cellSize;\n        let geoGridData = props.cityioData.GEOGRIDDATA;\n        let calcAreaObj = {};\n        geoGridData.forEach((gridCellData) => {\n            let typeName = gridCellData.name;\n            if (\n                //    if this type is not null\n                gridCellData.name !== \"None\"\n            ) {\n                if (calcAreaObj.hasOwnProperty(typeName)) {\n                    calcAreaObj[typeName].count =\n                        calcAreaObj[typeName].count + 1;\n                    // avoid landuse with no height\n                    let height =\n                        gridCellData.height < 1 ? 1 : gridCellData.height;\n                    calcAreaObj[typeName].area =\n                        calcAreaObj[typeName].area + height * cellSize;\n                } else {\n                    calcAreaObj[typeName] = {};\n                    calcAreaObj[typeName].area = 0;\n                    calcAreaObj[typeName].count = 0;\n                    calcAreaObj[typeName].name = typeName;\n                    calcAreaObj[typeName].color = rgbToHex(\n                        gridCellData.color[0],\n                        gridCellData.color[1],\n                        gridCellData.color[2]\n                    );\n                }\n            }\n        });\n        //  convert to react-vis happy data format\n        let radialData = [];\n        for (const k in calcAreaObj) {\n            radialData.push(calcAreaObj[k]);\n        }\n\n        let data = {\n            children: radialData,\n            color: 1,\n        };\n        return data;\n    };\n\n    const data = calcArea();\n\n    return (\n        <List className={classes.list}>\n            <ListItem>\n                {hoveredRadial.name ? (\n                    <Typography gutterBottom>\n                        {hoveredRadial.name}: {hoveredRadial.area} sqm\n                    </Typography>\n                ) : (\n                    <Typography gutterBottom>Hover on chart...</Typography>\n                )}\n            </ListItem>\n\n            <ListItem>\n                <RadialChart\n                    colorType=\"literal\"\n                    animation={true}\n                    className={\"donut-chart-example\"}\n                    innerRadius={radialRadius / 2 - radialRadius / 5}\n                    radius={radialRadius / 2}\n                    getLabel={(d) => d.name}\n                    labelsRadiusMultiplier={0.95}\n                    labelsStyle={{\n                        textAnchor: \"middle\",\n\n                        fontSize: 11,\n                        fill: \"#FFF\",\n                        textShadow: \"2px 2px 2px #000\",\n                    }}\n                    showLabels\n                    getAngle={(d) => d.area}\n                    data={data.children}\n                    onValueMouseOver={(evt) => setHoveredRadial(evt)}\n                    onSeriesMouseOut={() => setHoveredRadial(false)}\n                    width={radialRadius}\n                    height={radialRadius}\n                    padAngle={0.01}\n                >\n                    {hoveredRadial !== false && (\n                        <Hint value={hoveredRadial}>\n                            <div\n                                style={{\n                                    background: \"rgba(0,0,0,0.8)\",\n                                    fontSize: 14,\n                                }}\n                            >\n                                <Typography variant={\"caption\"} gutterBottom>\n                                    Area: {hoveredRadial.area} sqm\n                                </Typography>\n                            </div>\n                        </Hint>\n                    )}\n                </RadialChart>\n            </ListItem>\n\n            <ListItem>\n                <DownloadRawData data={data.children} title={\"area data\"} />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Radar from \"./Radar/Radar\";\nimport BarChart from \"./BarChart/BarChart\";\nimport AreaCalc from \"./AreaCalc/AreaCalc\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction VisContainer(props) {\n    const drawerWidth = 450;\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n            display: \"flex\",\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const showRadar = props.menu && props.menu.includes(\"RADAR\");\n\n    return (\n        <React.Fragment>\n            {showRadar && (\n                <Drawer\n                    variant=\"persistent\"\n                    anchor=\"right\"\n                    open={true}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <List className={classes.list}>\n                        <ListItem>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Urban Indicators\n                            </Typography>\n                        </ListItem>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <Radar\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <BarChart\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <AreaCalc\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n                    </List>\n                </Drawer>\n            )}\n        </React.Fragment>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        menu: state.MENU,\n    };\n};\n\nexport default connect(mapStateToProps, null)(VisContainer);\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { useSelector } from \"react-redux\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: none;\n`;\n\nfunction LoadingSpinner() {\n    const loading = useSelector(state => state.LOADING);\n    return (\n        <div\n            style={{\n                position: \"fixed\",\n                bottom: 50,\n                right: 50,\n                zIndex: 1\n            }}\n        >\n            <PulseLoader\n                css={override}\n                size={20}\n                color=\"white\"\n                loading={loading}\n            />\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CityIO from \"../../services/cityIO\";\nimport MenuContainer from \"../MenuContainer/MenuContainer\";\nimport MapContainer from \"../baseMap/baseMapContainer\";\nimport VisContainer from \"../visContainer/visContainer\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\nfunction Screen(props) {\n    // wait for 'ready' flag when app is ready to start\n    const ready = useSelector((state) => state.READY);\n    // get the table name for cityIO comp\n    const { tableName } = props;\n\n    return (\n        <>\n            <CityIO tableName={tableName} />\n            {/* if ready, render the app*/}\n            {ready && (\n                <>\n                    <MenuContainer />\n                    <MapContainer />\n                    <VisContainer />\n                </>\n            )}\n            <LoadingSpinner />\n        </>\n    );\n}\n\nexport default Screen;\n","import Provider from \"./redux/Provider\";\nimport \"./index.css\";\nimport configureStore from \"./redux/store\";\nimport Screen from \"./components/Screen\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport React, { Component } from \"react\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nconst theme = createMuiTheme({\n    // ! https://material-ui.com/customization/palette/\n    palette: {\n        type: \"dark\",\n        background: { default: \"#000\", paper: \"#29323c\" },\n    },\n});\n\nconst store = configureStore();\n\nconst MapRoute = () => {\n    let url = window.location.toString();\n    let pre = \"cityscope=\";\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length);\n\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\n        console.log(\"loading CityScope project: \" + cityscopePrjName);\n\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n\n                <Provider store={store}>\n                    <Screen tableName={cityscopePrjName} />\n                </Provider>\n            </ThemeProvider>\n        );\n    } else {\n        return <Typography gutterBottom>CityScopeJS</Typography>;\n    }\n};\n\nclass App extends Component {\n    render() {\n        return <MapRoute />;\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst root = document.getElementById(\"root\");\nconst render = () => {\n    return ReactDOM.render(<App />, root);\n};\n\nrender(App);\n\nif (module.hot) {\n    module.hot.accept(\"./App\", () => {\n        const NextApp = require(\"./App\").default;\n        render(NextApp);\n    });\n}\n"],"sourceRoot":""}