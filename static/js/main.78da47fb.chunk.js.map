{"version":3,"sources":["Provider.js","redux/actions.js","redux/initialState.js","redux/reducer.js","redux/store.js","services/consoleStyle.js","services/cityIO.js","components/MenuContainer/EditMenu/EditMenu.js","components/MenuContainer/TogglesMenu/styles.js","components/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","components/MenuContainer/TogglesMenu/ABMSubmenu/index.js","components/MenuContainer/TogglesMenu/AccessSubmenu/index.js","components/MenuContainer/TogglesMenu/index.js","components/MenuContainer/FABMenu/styles.js","components/MenuContainer/FABMenu/index.js","components/MenuContainer/MenuContainer.js","components/baseMap/baseMapComponents.js","components/baseMap/baseMapUtils.js","components/baseMap/baseMap.js","components/prjMap/util.ts","components/prjMap/anchor.tsx","components/prjMap/deleteLocalStorage.js","components/prjMap/layer.tsx","components/baseMap/baseMapContainer.js","components/visContainer/Radar/Radar.js","components/visContainer/BarChart/BarChart.js","components/visContainer/AreaCalc/AreaCalc.js","components/visContainer/visContainer.js","components/LoadingSpinner/index.js","components/Screen/index.js","App.js","index.js"],"names":["ProviderWrapper","children","store","listenToSlidersEvents","data","type","listenToEditMenu","listOfToggles","Object","keys","settings","menu","toggles","menuInitState","i","length","values","showOnInit","push","initialState","MENU","CITYIO","MAP","SLIDERS","time","map","layers","ABM","startSimHour","endSimHour","speed","animationSpeed","ACCESS_TOGGLE","SELECTED_TYPE","height","color","name","READY","LOADING","reducer","state","action","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","configureStore","createStore","newDataStyle","join","errorStyle","loadingStyle","CityIO","props","handleURL","tableName","cityioURL","cityIO","mockURL","baseURL","getCityIOHash","timer","setInterval","_isMounted","interval","console","log","URL","axios","get","then","response","handleCityIOHashes","catch","e","result","id","oldHashs","setState","cityIOmodulesStatus","setLoadingState","cityIOmodules","forEach","module","hashes","setNestedState","getCityIOmoduleData","parent","child","holder","moduleName","checkDoneCityIO","error","status","headers","request","message","config","cityIOmodulesData","getCityioData","setReadyState","this","Component","mapDispatchToProps","connect","cityioData","useStyles","makeStyles","theme","drawer","background","width","zIndex","listItemPrimaryText","listItemSecondaryText","fontSize","list","classes","useTheme","React","useState","selectedIndex","setSelectedIndex","dispatch","useDispatch","selectedType","useSelector","marks","value","label","Drawer","className","variant","anchor","open","paper","List","LanduseTypesList","iconsArr","use","col","rgbCol","selected","LBCS","lbcs","Fragment","key","Math","random","Divider","component","ListItem","alignItems","button","onClick","event","typeProps","ListItemAvatar","Avatar","style","backgroundColor","charAt","ListItemText","primary","secondary","Collapse","in","Slider","valueLabelDisplay","onChange","aria-labelledby","getAriaLabel","index","toString","min","max","createTypesIcons","GEOGRID","properties","types","root","display","paddingLeft","paddingRight","text","marginLeft","marginTop","flexGrow","marginBottom","fontWeight","ColoredSwitch","withStyles","switchBase","checked","track","Switch","subtitle1","subtitle2","markLabel","ABMSubmenu","sliders","Typography","gutterBottom","newValue","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","access","p","textTransform","ListItemSecondaryAction","edge","TogglesMenu","toggleDrawer","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","includes","thisToggle","displayName","BackdropProps","invisible","onClose","flexDirection","position","paddingTop","menuButton","editButton","resetViewButton","templatesButton","FABMenu","Fab","MenuContainer","drawerOpen","indexOf","updatedMenuState","splice","showEditMenu","SelectionTarget","mousePos","divSize","rc","colorTrans","mouseX","clientX","mouseY","clientY","border","mouseDown","borderColor","borderRadius","pointerEvents","left","top","CellMeta","padding","hoveredObj","object","constructor","Array","tzlookup","require","_proccessGridData","typesSettings","TUIgridData","grid","GEOGRIDDATA","features","interactive","geoGridMapping","geogrid_to_tui_mapping","counter","thisCellMapping","gridCellType","interactiveCellProps","cellValueByIndex","JSON","parse","stringify","_proccesNetworkPnts","metaGrid","networkGeojson","gridRows","header","nrows","gridCols","ncols","cell","pnt","land_use","netWidth","gridPosition","geometry","coordinates","_proccessGridTextData","textData","_proccessAccessData","accessData","d","heatmap","_postMapEditsToCityIO","endPoint","options","method","url","Accept","_proccessBresenhamGrid","bresenhamGrid","row","pntLatLong","Map","_onViewStateChange","viewState","orthographic","_mulipleObjPicked","dim","pickingRadius","x","y","deckGL","pickObjects","_handleGridcellEditing","multiSelectedObj","thisCellProps","old_height","old_color","selectedCellsState","_handleNetworkHover","pntProps","old_netWidth","hoveredPnt","_handleNetworkRemove","path","networkLayer","item","tmpObj","_handleNetworkCreate","networkFirstPoint","pickData","pickObject","class","tmpArr","FP","SP","bresenhamLine","x0","y0","x1","y1","xWalker","yWalker","deltaX","deltaY","absDeltaX","absDeltaY","errX","errY","xDestination","yDestination","step","_pushTobresenhamLine","posString","pathArr","abs","_bresenhamLine","isArray","_renderSelectionTarget","_handleKeyUp","keyDownState","_handleKeyDown","nativeEvent","_remapValues","draggingWhileEditing","selectedNetState","initialViewState","networkEdge","animationFrame","timeZoneOffset","hourAtLatLong","Date","toLocaleString","timeZone","latitude","longitude","hour","hour12","getUTCHours","parseInt","setDirLightSettings","dirLightSettings","timestamp","UTC","intensity","_shadow","cancelAnimationFrame","_rightClickViewRotate","_setupEffects","_setViewStateToTableHeader","networkPnts","gridTextData","GEONETWORK","_animate","prevProps","prevState","animateABM","animateCamera","_effects","shadowColor","dataProps","pitch","zoom","bearing","rotation","ambientLight","AmbientLight","dirLight","_SunLight","lightingEffect","LightingEffect","startHour","endHour","t","currentDateMidnight","setHours","date","getTime","directionalLights","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","requestAnimationFrame","bind","document","getElementById","addEventListener","evt","preventDefault","zoomLevel","TextLayer","getText","getPosition","getColor","getSize","GeoJsonLayer","visible","pickable","extruded","lineWidthScale","lineWidthMinPixels","getElevation","getFillColor","onHover","onDrag","onDragStart","onDragEnd","updateTriggers","transitions","ScatterplotLayer","opacity","filled","radiusScale","radiusMinPixels","radiusMaxPixels","getRadius","PathLayer","widthScale","widthMinPixels","getPath","getWidth","HeatmapLayer","colorRange","colors","radiusPixels","getWeight","TripsLayer","getTimestamps","timestamps","mode","rounded","trailLength","currentTime","noisePath","onKeyDown","onKeyUp","onMouseMove","onMouseUp","onMouseDown","getCursor","ref","deck","onViewStateChange","_renderLayers","effects","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","asyncRender","reuseMaps","mapboxApiAccessToken","process","mapStyle","blue","preventStyleDiffing","solve","transformPointsToMatrix","sourcePoints","targetPoints","a","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","vectorToTransform","vector","styles","container","cursor","anchorSize","bottom","right","AnchorComponent","translation","onMouseEnter","transform","margin","spacing","DeleteLocalStorage","Grid","justify","Button","startIcon","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","Layer","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","onAnchorMouseUp","isEditMode","newVector","_clearLocalStraoge","localStorage","getItem","removeItem","location","reload","getBoundingClientRect","ls","setItem","removeEventListener","anchorStyle","anchorClassName","MapContainer","_checkKeystone","maxWidth","overflow","Radar","domains","radarData","radarSize","indicators","viz_type","domain","generateData","animation","polygons","fillOpacity","strokeWidth","axes","fill","labels","textAnchor","stroke","tickValues","v","barChartData","dataArr","xType","stackBy","yDomain","tickLabelAngle","AreaCalc","showRadar","BarChart","override","css","LoadingSpinner","loading","size","Screen","ready","MapRoute","pre","cityscopePrjName","substring","table","Provider","StylesProvider","injectFirst","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.78da47fb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","/**\n * ACTIONS\n */\nexport const GET_CITYIO_DATA = \"GET_CITYIO_DATA\";\nexport function getCityioData(data) {\n    return { type: GET_CITYIO_DATA, data };\n}\n\nexport const LISTEN_TO_MAP_EVENTS = \"LISTEN_TO_MAP_EVENTS\";\nexport function listenToMapEvents(data) {\n    return { type: LISTEN_TO_MAP_EVENTS, data };\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = \"LISTEN_TO_ABM_SLIDERS\";\nexport function listenToSlidersEvents(data) {\n    return { type: LISTEN_TO_ABM_SLIDERS, data };\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = \"LISTEN_TO_ACCESS_TOGGLE\";\nexport function listenToAccessToggle(data) {\n    return { type: LISTEN_TO_ACCESS_TOGGLE, data };\n}\n\nexport const MENU_INTERACTION = \"MENU_INTERACTION\";\n\nexport function listenToMenuUI(data) {\n    return { type: MENU_INTERACTION, data };\n}\n\nexport const LISTEN_TO_EDIT_MENU = \"LISTEN_TO_EDIT_MENU\";\nexport function listenToEditMenu(data) {\n    return { type: LISTEN_TO_EDIT_MENU, data };\n}\n\nexport const SET_READY_STATE = \"SET_READY_STATE\";\nexport function setReadyState(data) {\n    return { type: SET_READY_STATE, data };\n}\n\nexport const SET_LOADING_STATE = \"SET_LOADING_STATE\";\nexport function setLoadingState(data) {\n    return { type: SET_LOADING_STATE, data };\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    MAP: {},\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.endSimHour\n        ],\n        speed: settings.map.layers.ABM.animationSpeed\n    },\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: {\n        height: 0,\n        color: [255, 0, 0, 200],\n        name: \"Select Land-Use!\"\n    },\n    READY: false,\n    LOADING: false\n};\n\nexport default initialState;\n","import {\n    GET_CITYIO_DATA,\n    MENU_INTERACTION,\n    LISTEN_TO_MAP_EVENTS,\n    LISTEN_TO_ABM_SLIDERS,\n    LISTEN_TO_EDIT_MENU,\n    SET_READY_STATE,\n    SET_LOADING_STATE,\n    LISTEN_TO_ACCESS_TOGGLE\n} from \"./actions\";\nimport initialState from \"./initialState\";\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_CITYIO_DATA:\n            return { ...state, CITYIO: action.data };\n        case MENU_INTERACTION:\n            return { ...state, MENU: action.data };\n        case LISTEN_TO_MAP_EVENTS:\n            return { ...state, MAP: action.data };\n        case LISTEN_TO_ABM_SLIDERS:\n            return { ...state, SLIDERS: action.data };\n        case LISTEN_TO_ACCESS_TOGGLE:\n            return { ...state, ACCESS_TOGGLE: action.data };\n        case LISTEN_TO_EDIT_MENU:\n            return { ...state, SELECTED_TYPE: action.data };\n        case SET_READY_STATE:\n            return { ...state, READY: action.data };\n        case SET_LOADING_STATE:\n            return { ...state, LOADING: action.data };\n        default:\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nexport default configureStore;\n","export const newDataStyle = [\n    \"background: linear-gradient(#10B500, #0086B5)\",\n    \"border: 1px solid #ffffff\",\n    \"color: black\",\n    \"display: block\",\n    \"line-height: 20px\",\n    \"text-align: center\",\n    \"font-weight: bold\",\n].join(\";\");\n\nexport const errorStyle = [\n    \"background: linear-gradient(#00FF04 ,#FF00E0 )\",\n    \"border: 1px solid #ffffff\",\n    \"color: black\",\n    \"display: block\",\n    \"line-height: 20px\",\n    \"text-align: center\",\n    \"font-weight: bold\",\n].join(\";\");\n\nexport const loadingStyle = [\n    \"background: linear-gradient(#FF0000 ,#FF8633 )\",\n    \"border: 1px solid #ffffff\",\n    \"color: black\",\n    \"display: block\",\n    \"line-height: 20px\",\n    \"text-align: center\",\n    \"font-weight: bold\",\n].join(\";\");\n","import { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n} from \"../redux/actions\";\nimport settings from \"../settings/settings.json\";\nimport { loadingStyle, errorStyle } from \"../services/consoleStyle\";\n\nclass CityIO extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            oldHashs: {},\n            cityIOmodulesData: {},\n        };\n        this.cityioURL = null;\n    }\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    componentDidMount() {\n        this._isMounted = true;\n        this.handleURL();\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    handleURL = () => {\n        if (this.props.tableName === \"mockAPI\") {\n            this.cityioURL = settings.cityIO.mockURL;\n        } else {\n            this.cityioURL = settings.cityIO.baseURL + this.props.tableName;\n        }\n\n        // get the hashes first\n        this.getCityIOHash(this.cityioURL + \"/meta\");\n        // and every interval\n        this.timer = setInterval(() => {\n            if (this._isMounted) {\n                this.getCityIOHash(this.cityioURL + \"/meta\");\n            }\n        }, settings.cityIO.interval);\n        console.log(\n            \"%c starting cityIO GET interval every \" +\n                settings.cityIO.interval +\n                \"ms \",\n            loadingStyle\n        );\n    };\n\n    /**\n     * returns only the hasees from API\n     */\n    getCityIOHash = (URL) => {\n        axios\n            .get(URL)\n            .then((response) => {\n                this.handleCityIOHashes(response.data);\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    };\n\n    /**\n     * check for updated hashes.\n     * if new hashes exist,\n     * fetch !! WHOLE API (for now)\n     */\n    handleCityIOHashes = (result) => {\n        // if master hash ID has changed (cityIO table state)\n        if (result.id !== this.state.oldHashs.id) {\n            // reset the cityIOmodulesStatus\n            this.setState({ cityIOmodulesStatus: {} });\n\n            // reset the state of this flag\n            this.props.setLoadingState(true);\n\n            // new data in table, get all modules\n            // that are listed in settings\n            settings.cityIO.cityIOmodules.forEach((module) => {\n                // only update modules that have new data\n                if (result.hashes[module] !== this.state.oldHashs[module]) {\n                    // set this module as not ready\n                    this.setNestedState(\"cityIOmodulesStatus\", module, false);\n                    // get the module data from cityIO\n                    this.getCityIOmoduleData(\n                        module,\n                        this.cityioURL + \"/\" + module\n                    );\n                    // update this new module hash in state\n                    this.setNestedState(\n                        \"oldHashs\",\n                        module,\n                        result.hashes[module]\n                    );\n                } else {\n                    // update module name with ok\n                    this.setNestedState(\"cityIOmodulesStatus\", module, true);\n                }\n            });\n            // finally, put to state the hashes master id\n            this.setNestedState(\"oldHashs\", \"id\", result.id);\n        }\n    };\n\n    /**\n     *\n     * Helper function to set nested state\n     */\n\n    setNestedState = (parent, child, data) => {\n        var holder = { ...this.state[parent] };\n        holder[child] = data;\n        this.setState({ [parent]: holder });\n    };\n\n    /**\n     * get each module data\n     */\n    getCityIOmoduleData = (moduleName, URL) => {\n        axios\n            .get(URL)\n            .then((response) => {\n                // put response to state obj\n                this.setNestedState(\n                    \"cityIOmodulesData\",\n                    moduleName,\n                    response.data\n                );\n                console.log(\"...updating module:\", moduleName);\n                this.checkDoneCityIO(moduleName);\n            })\n\n            .catch((error) => {\n                if (error.response) {\n                    console.log(\n                        \"error.response:\",\n                        \"\\n\",\n                        error.response.data,\n                        \"\\n\",\n                        error.response.status,\n                        \"\\n\",\n                        error.response.headers\n                    );\n                } else if (error.request) {\n                    console.log(\"error.request:\", error.request);\n                } else {\n                    console.log(\"misc error:\", error.message);\n                }\n                console.log(\"request config:\", error.config);\n            });\n    };\n\n    checkDoneCityIO = (moduleName) => {\n        this.setNestedState(\"cityIOmodulesStatus\", moduleName, true);\n\n        // check if all modules are done\n        for (const status in this.state.cityIOmodulesStatus) {\n            if (this.state.cityIOmodulesStatus[status] !== true) {\n                // we still need to update some module, stop\n                return;\n            }\n        }\n        //  if so, share the data with the app\n        const data = this.state.cityIOmodulesData;\n        data.tableName = this.props.tableName;\n        // finally, send data to redux\n        this.props.getCityioData(data);\n        console.log(\"%c done updating from cityIO\", errorStyle);\n\n        // initializes rendering of Menu and Map containers\n        this.props.setReadyState(true);\n        this.props.setLoadingState(false);\n    };\n\n    render() {\n        return null;\n    }\n}\n\nconst mapDispatchToProps = {\n    getCityioData: getCityioData,\n    setReadyState: setReadyState,\n    setLoadingState: setLoadingState,\n};\n\nexport default connect(null, mapDispatchToProps)(CityIO);\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { listenToEditMenu } from \"../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\n\nfunction EditMenu(props) {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            background: \"#1D1F21\",\n            width: 300,\n\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        listItemPrimaryText: {\n            color: \"#FFF\",\n        },\n        listItemSecondaryText: {\n            color: \"#999\",\n            fontSize: \"0.7em\",\n        },\n        list: {\n            color: \"#999\",\n        },\n    }));\n\n    const theme = useTheme();\n    const classes = useStyles();\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    const selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const { height } = selectedType;\n    const marks = [\n        { value: 0, label: \"0\" },\n        { value: 50, label: \"50\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            let col = LanduseTypesList[type].color;\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n            let use;\n            LanduseTypesList[type].LBCS.forEach((lbcs) => {\n                use = Object.keys(lbcs.use)[0];\n            });\n\n            iconsArr.push(\n                <React.Fragment key={Math.random()}>\n                    <Divider\n                        key={Math.random()}\n                        variant=\"inset\"\n                        component=\"li\"\n                    />\n\n                    <ListItem\n                        key={Math.random()}\n                        alignItems=\"flex-start\"\n                        button\n                        variant=\"raised\"\n                        selected={selected}\n                        onClick={(event) =>\n                            handleListItemClick(\n                                event,\n                                type,\n                                LanduseTypesList[type]\n                            )\n                        }\n                        className={classes.list}\n                    >\n                        <ListItemAvatar>\n                            <Avatar style={{ backgroundColor: rgbCol }}>\n                                {type.charAt(0)}\n                            </Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            classes={{\n                                primary: classes.listItemPrimaryText,\n                                secondary: classes.listItemSecondaryText,\n                            }}\n                            primary={type}\n                            secondary={\n                                <React.Fragment>\n                                    {\"LBCS: \" + use}\n                                </React.Fragment>\n                            }\n                        />\n                    </ListItem>\n\n                    <Collapse in={selected}>\n                        <ListItem key={Math.random()}>\n                            <Slider\n                                value={height}\n                                valueLabelDisplay=\"auto\"\n                                className={classes.list}\n                                onChange={(event, value) =>\n                                    dispatch(\n                                        listenToEditMenu({\n                                            ...selectedType,\n                                            height: value,\n                                        })\n                                    )\n                                }\n                                aria-labelledby=\"Floors\"\n                                getAriaLabel={(index) => index.toString()}\n                                min={0}\n                                max={50}\n                                marks={marks}\n                            ></Slider>\n                        </ListItem>\n                    </Collapse>\n                </React.Fragment>\n            );\n        });\n        return iconsArr;\n    };\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            <List>\n                {createTypesIcons(props.cityioData.GEOGRID.properties.types)}\n            </List>\n        </Drawer>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport Switch from \"@material-ui/core/Switch\";\n\nexport const useStyles = makeStyles({\n    root: {\n        display: \"flex\",\n        paddingLeft: 16,\n        paddingRight: 16\n    },\n    paper: {\n        background: \"#1D1F21\"\n    },\n    list: {\n        width: \"23vw\",\n        color: \"#FFF\"\n    },\n    text: {\n        marginLeft: 16,\n        marginTop: 12,\n        flexGrow: 1,\n        fontSize: 20,\n        marginBottom: 12,\n        fontWeight: \"lighter\"\n    }\n});\n\nexport const ColoredSwitch = withStyles({\n    switchBase: {\n        \"&$checked + $track\": {\n            backgroundColor: \"#ff5278\"\n        }\n    },\n    checked: {},\n    track: {}\n})(Switch);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28\n    },\n    subtitle1: {\n        marginTop: 12\n    },\n    subtitle2: {\n        marginTop: 12\n    },\n    markLabel: {\n        color: \"white\"\n    }\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../redux/actions\";\n\nfunction ABMSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector(state => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue\n            })\n        );\n    };\n\n    const handleSetSpeedValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                speed: newValue\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\"\n        },\n        {\n            value: 21600,\n            label: \"6AM\"\n        },\n        {\n            value: 43200,\n            label: \"12PM\"\n        },\n        {\n            value: 64800,\n            label: \"6PM\"\n        },\n        {\n            value: 86400,\n            label: \"12AM\"\n        }\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Simulation Range\n            </Typography>\n            <Slider\n                classes={{\n                    markLabel: classes.markLabel\n                }}\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n            <Typography\n                className={classes.subtitle2}\n                variant=\"subtitle2\"\n                id=\"continuous-slider\"\n                gutterBottom\n            >\n                Simulation Speed\n            </Typography>\n            <Slider\n                min={0}\n                max={100}\n                value={sliders.speed}\n                onChange={handleSetSpeedValue}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"continuous-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ABMSubmenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { ColoredSwitch } from \"../styles\";\nimport { listenToAccessToggle } from \"../../../../redux/actions\";\n\nfunction AccessSubmenu(props) {\n    const accessToggle = useSelector(state => state.ACCESS_TOGGLE);\n\n    const { cityioData } = props;\n\n    const ACCESS_PROPERTIES =\n        cityioData && cityioData.access && cityioData.access.properties\n            ? cityioData.access.properties\n            : [];\n\n    const dispatch = useDispatch();\n\n    return (\n        <List>\n            {ACCESS_PROPERTIES.map((p, i) => (\n                <ListItem key={p}>\n                    <ListItemText\n                        primary={p}\n                        style={{ textTransform: \"capitalize\" }}\n                    />\n                    <ListItemSecondaryAction>\n                        <ColoredSwitch\n                            edge=\"end\"\n                            checked={accessToggle === i}\n                            onChange={() => {\n                                dispatch(listenToAccessToggle(i));\n                            }}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AccessSubmenu;\n","import React from \"react\";\nimport { useStyles, ColoredSwitch } from \"./styles\";\nimport { useSelector } from \"react-redux\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport settings from \"../../../settings/settings.json\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ABMSubmenu from \"./ABMSubmenu\";\nimport AccessSubmenu from \"./AccessSubmenu\";\n\nfunction TogglesMenu(props) {\n    const classes = useStyles();\n    const { open, toggleDrawer, handleToggle } = props;\n\n    const { menuState, cityioData } = useSelector(state => ({\n        menuState: state.MENU,\n        cityioData: state.CITYIO\n    }));\n\n    const togglesMeta = settings.menu.toggles;\n    const listOfToggles = Object.keys(togglesMeta);\n\n    /**\n     * gets props with initial menu state\n     * and turn on the layer on init\n     */\n    let togglesCompsArray = [];\n    // array of loaded API modules\n    const loadedModules = Object.keys(cityioData);\n    // create each toggle\n    for (let i = 0; i < listOfToggles.length; i++) {\n        // check if the mdoule of this toggle\n        // was loaded on the API\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\n\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\n\n        if (loadedModules.includes(requireModule) || requireModule === false) {\n            const thisToggle = (\n                <div key={listOfToggles[i]}>\n                    <ListItem>\n                        <ListItemText\n                            primary={togglesMeta[listOfToggles[i]].displayName}\n                        />\n                        <ListItemSecondaryAction>\n                            <ColoredSwitch\n                                edge=\"end\"\n                                onChange={handleToggle(listOfToggles[i])}\n                                checked={checked}\n                            />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n                    {listOfToggles[i] === \"ABM\" && (\n                        <Collapse in={checked} style={{ width: \"100%\" }}>\n                            <ABMSubmenu />\n                        </Collapse>\n                    )}\n                    {listOfToggles[i] === \"ACCESS\" && (\n                        <Collapse\n                            in={checked}\n                            style={{\n                                width: \"80%\",\n                                marginLeft: 24\n                            }}\n                        >\n                            <AccessSubmenu cityioData={cityioData} />\n                        </Collapse>\n                    )}\n                </div>\n            );\n            togglesCompsArray.push(thisToggle);\n        }\n    }\n\n    return (\n        <Drawer\n            className={classes.root}\n            BackdropProps={{\n                invisible: true\n            }}\n            classes={{\n                paper: classes.paper\n            }}\n            anchor=\"left\"\n            open={open}\n            onClose={toggleDrawer}\n        >\n            <List className={classes.list}>\n                <Typography variant=\"h5\" className={classes.text} gutterBottom>\n                    CityScopeJS\n                </Typography>\n                {togglesCompsArray}\n            </List>\n        </Drawer>\n    );\n}\n\nexport default TogglesMenu;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        position: \"fixed\",\n        paddingLeft: 16,\n        paddingTop: 8,\n        zIndex: 1\n    },\n    menuButton: {\n        marginTop: 8,\n        marginBottom: 8\n    },\n    editButton: {\n        marginTop: 8,\n        marginBottom: 8\n    },\n    resetViewButton: {\n        marginTop: 8,\n        marginBottom: 8\n    },\n    templatesButton: {\n        marginTop: 8,\n        marginBottom: 8\n    }\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport { useSelector } from \"react-redux\";\nimport Fab from \"@material-ui/core/Fab\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\n\nexport default function FABMenu(props) {\n    const classes = useStyles();\n\n    const menuState = useSelector((state) => state.MENU);\n    const { handleToggle, toggleDrawer } = props;\n\n    return (\n        <div className={classes.root}>\n            <Fab\n                className={classes.menuButton}\n                onClick={toggleDrawer}\n                style={{ backgroundColor: \"#1D1F21\" }}\n            >\n                <MenuIcon style={{ color: \"FFF\" }} />\n            </Fab>\n            <Fab\n                className={classes.editButton}\n                onClick={handleToggle(\"EDIT\")}\n                style={{ backgroundColor: \"#1D1F21\" }}\n            >\n                {menuState.includes(\"EDIT\") ? (\n                    <CancelIcon style={{ color: \"FFF\" }} />\n                ) : (\n                    <EditIcon style={{ color: \"FFF\" }} />\n                )}\n            </Fab>\n            <Fab\n                className={classes.resetViewButton}\n                onClick={handleToggle(\"RESET_VIEW\")}\n                style={{ backgroundColor: \"#1D1F21\" }}\n            >\n                {menuState.includes(\"RESET_VIEW\") ? (\n                    <NavigationIcon style={{ color: \"FFF\" }} />\n                ) : (\n                    <NearMeIcon style={{ color: \"FFF\" }} />\n                )}\n            </Fab>\n            <Fab\n                className={classes.templatesButton}\n                onClick={handleToggle(\"TEMPLATES\")}\n                style={{ backgroundColor: \"#1D1F21\" }}\n            >\n                <InsertDriveFileIcon style={{ color: \"FFF\" }} />\n            </Fab>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToMenuUI } from \"../../redux/actions\";\nimport EditMenu from \"./EditMenu/EditMenu\";\nimport TogglesMenu from \"./TogglesMenu\";\nimport FABMenu from \"./FABMenu\";\n\nfunction MenuContainer() {\n    const menuState = useSelector((state) => state.MENU);\n    const dispatch = useDispatch();\n\n    const [state, setState] = React.useState({\n        drawerOpen: false,\n    });\n\n    const toggleDrawer = () => {\n        setState({ ...state, drawerOpen: !state.drawerOpen });\n    };\n\n    const handleToggle = (value) => () => {\n        const i = menuState.indexOf(value);\n        const updatedMenuState = [...menuState];\n        if (i === -1) {\n            updatedMenuState.push(value);\n        } else {\n            updatedMenuState.splice(i, 1);\n        }\n\n        dispatch(listenToMenuUI(updatedMenuState));\n    };\n\n    const showEditMenu = menuState && menuState.includes(\"EDIT\");\n\n    return (\n        <div>\n            <TogglesMenu\n                open={state.drawerOpen}\n                toggleDrawer={toggleDrawer}\n                handleToggle={handleToggle}\n            />\n            <FABMenu toggleDrawer={toggleDrawer} handleToggle={handleToggle} />\n            {showEditMenu && <EditMenu key={\"EDIT\"} />}\n        </div>\n    );\n}\n\nexport default MenuContainer;\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const SelectionTarget = props => {\n    const selectedType = props.selectedType;\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    const divSize = props.divSize;\n    const rc = selectedType.color;\n    const color = \"rgb(\" + rc[0] + \",\" + rc[1] + \",\" + rc[2] + \")\";\n    const colorTrans = \"rgba(\" + rc[0] + \",\" + rc[1] + \",\" + rc[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\"\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n};\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = props => {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    return (\n        <div\n            style={{\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                pointerEvents: \"none\",\n                backgroundColor: \"rgba(0,0,0,0.5)\",\n                padding: \"1vw\",\n                color: \"rgba(255,255,255,0.9)\",\n                zIndex: 1,\n                left: mousePos.clientX,\n                top: mousePos.clientY,\n                fontSize: \"0.5em\",\n                fontWeight: 500\n            }}\n        >\n            <p>\n                Type:\n                {props.hoveredObj.object.properties.name}\n            </p>\n            {props.hoveredObj.object.properties.height.constructor === Array ? (\n                <>\n                    <p>\n                        Street Level Floors:\n                        {props.hoveredObj.object.properties.height[0]}\n                    </p>\n                    <p>\n                        Total Floors:\n                        {props.hoveredObj.object.properties.height[1]}\n                    </p>\n                </>\n            ) : (\n                <p>\n                    Total Floors:\n                    {props.hoveredObj.object.properties.height}\n                </p>\n            )}\n            <p>\n                ID:\n                {props.hoveredObj.object.properties.id}\n            </p>\n        </div>\n    );\n};\n","import settings from \"../../settings/settings.json\";\nimport axios from \"axios\";\nimport { errorStyle } from \"../../services/consoleStyle\";\nvar tzlookup = require(\"tz-lookup\");\n\n/**\n * returns time for table location\n * for the light emlement\n * @param {*} header\n */\n\nexport const setDirLightSettings = (header) => {\n    // get the hour element of this location\n    let hourAtLatLong = new Date().toLocaleString(\"en-US\", {\n        timeZone: tzlookup(header.latitude, header.longitude),\n        hour: \"2-digit\",\n        hour12: false,\n    });\n\n    // get the time in greenwich\n    var greenwichDate = new Date();\n    var greenwichHours = greenwichDate.getUTCHours();\n    // calc the offset\n    let timeZoneOffset = greenwichHours + 24 - parseInt(hourAtLatLong);\n    return timeZoneOffset;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n    let typesSettings = settings.map.types;\n    const TUIgridData = cityioData.grid;\n    const GEOGRID = cityioData.GEOGRID;\n    const GEOGRIDDATA = cityioData.GEOGRIDDATA;\n    // update GEOGRID features from GEOGRIDDATA on cityio\n    if (GEOGRIDDATA && GEOGRIDDATA.length > 0) {\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties = GEOGRIDDATA[i];\n            GEOGRID.features[i].properties.id = i;\n        }\n        // for first init of gird\n        // when GEOPGRIDDATA was not yet created\n    } else {\n        // clreate empty grid\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties.id = i;\n            // set no color for when no land use exist\n            GEOGRID.features[i].properties.color = [0, 0, 0, 0];\n            GEOGRID.features[i].properties.height = 0.1;\n            GEOGRID.features[i].properties.name = \"empty\";\n            GEOGRID.features[i].properties.interactive = true;\n        }\n    }\n\n    // handles TUI grid data on update\n    const geoGridMapping = cityioData.GEOGRID.properties.geogrid_to_tui_mapping;\n    let counter = 0;\n    for (let thisCellMapping in geoGridMapping) {\n        // type is the first value in the cell array\n        // the rotation is the 2nd\n        let gridCellType = TUIgridData[counter][0];\n        let interactiveCellProps = GEOGRID.features[thisCellMapping].properties;\n        // set up the cell type\n        interactiveCellProps.type = gridCellType;\n        // check if not undefined type (no scanning)\n        if (TUIgridData[counter][0] !== -1) {\n            // get value of cell from settings via its index\n            let cellValueByIndex = Object.values(typesSettings)[\n                TUIgridData[counter][0]\n            ];\n            // cast the cell color\n            interactiveCellProps.color = cellValueByIndex.color;\n            // cast the cell height\n            interactiveCellProps.height = cellValueByIndex.height;\n        } else {\n            console.log(\"... got null type...\");\n        }\n        counter = counter + 1;\n    }\n    const newGrid = JSON.parse(JSON.stringify(GEOGRID));\n    return newGrid;\n};\n\n/**\n * proccess grid data to geojson\n * of lineStrings\n * @param {cityIOdata} data\n * \n \nfeatures  :[\n    {\n        type: \"Feature\",\n        properties: {},\n        geometry: {\n            type: \"Point\",\n            coordinates: [125.6, 10.1]\n        },\n        properties: {\n            name: \"Dinagat Islands\"\n        }\n    }...\n]\n */\n\nexport const _proccesNetworkPnts = (cityioData) => {\n    const metaGrid = cityioData.GEOGRID.features;\n    // pnt object\n    const networkGeojson = {\n        type: \"FeatureCollection\",\n        features: [],\n    };\n\n    const gridRows = cityioData.GEOGRID.properties.header.nrows;\n    const gridCols = cityioData.GEOGRID.properties.header.ncols;\n\n    let counter = 0;\n\n    // create array for obstecles\n    // and array for coordinates\n    for (let cell = 0; cell < gridRows; cell++) {\n        for (var col = 0; col < gridCols; col++) {\n            let props;\n            const pntLatLong = metaGrid[counter].geometry.coordinates[0][0];\n            props = {\n                land_use: \"network\",\n                netWidth: 5,\n                color: [255, 255, 255, 150],\n                gridPosition: [col, cell],\n            };\n            const pnt = {\n                type: \"Feature\",\n                properties: props,\n                geometry: {\n                    type: \"Point\",\n                    coordinates: pntLatLong,\n                },\n            };\n            networkGeojson.features.push(pnt);\n            counter += 1;\n        }\n    }\n    return networkGeojson;\n};\n\n/**\n * Data format:\n * [\n *   {text: 'type', coordinates: [-122.466233, 37.684638]},\n *   ...\n * ]\n *\n * Grid data format:\n * features[i].geometry.coordinates[0][0]\n */\nexport const _proccessGridTextData = (cityioData) => {\n    const GEOGRID = cityioData.GEOGRID;\n    let textData = [];\n\n    const gridRows = cityioData.GEOGRID.properties.header.nrows;\n    const gridCols = cityioData.GEOGRID.properties.header.ncols;\n\n    let counter = 0;\n    for (let cell = 0; cell < gridRows; cell++) {\n        for (var col = 0; col < gridCols; col++) {\n            textData[counter] = {\n                text: [\n                    col,\n                    cell,\n                    // \" | \",\n                    // GEOGRID.features[counter].geometry.coordinates[0][0][0],\n                    // GEOGRID.features[counter].geometry.coordinates[0][0][1]\n                ].toString(),\n\n                // [col, cell].toString(),\n                coordinates: [\n                    GEOGRID.features[counter].geometry.coordinates[0][0][0],\n                    GEOGRID.features[counter].geometry.coordinates[0][0][1],\n                    GEOGRID.features[counter].properties.height + 10,\n                ],\n            };\n            counter += 1;\n        }\n    }\n    return textData;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (data) => {\n    const accessData = data.access;\n    // get colors from settings\n    let coordinates = accessData.features.map((d) => d.geometry.coordinates);\n    let values = accessData.features.map((d) => d.properties);\n    let heatmap = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        heatmap.push({\n            coordinates: coordinates[i],\n            values: values[i],\n        });\n    }\n    return heatmap;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n    let postURL;\n    // check if cityIO or local server\n    postURL =\n        tableName === \"mockAPI\"\n            ? settings.cityIO.mockURL + endPoint\n            : \"https://cityio.media.mit.edu/api/table/update/\" +\n              tableName +\n              endPoint;\n\n    const options = {\n        method: \"post\",\n        url: postURL,\n        data: data,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options).catch((error) => {\n        console.log(\"%c\" + error, errorStyle);\n\n        console.log(\"ERROR:\", error);\n    });\n};\n\nexport const _proccessBresenhamGrid = (cityioData) => {\n    let bresenhamGrid = {};\n    const metaGrid = cityioData.GEOGRID.features;\n    const gridRows = cityioData.GEOGRID.properties.header.nrows;\n    const gridCols = cityioData.GEOGRID.properties.header.ncols;\n\n    let counter = 0;\n    for (let row = 0; row < gridRows; row++) {\n        for (var col = 0; col < gridCols; col++) {\n            const pntLatLong = metaGrid[counter].geometry.coordinates[0][0];\n            let posString = [col, row].toString();\n            bresenhamGrid[posString] = pntLatLong;\n            counter += 1;\n        }\n    }\n    return bresenhamGrid;\n};\n\n/**\n * https://en.wikipedia.org/wiki/Bresenham%27s_line_algorithm\n */\nexport const _bresenhamLine = (x0, y0, x1, y1, bresenhamGrid) => {\n    // search for latLong for this pixel\n    const _pushTobresenhamLine = (x, y) => {\n        let posString = [x, y].toString();\n        pathArr.push(bresenhamGrid[posString]);\n    };\n    let pathArr = [];\n    // Iterators, counters required by algorithm\n    let xWalker,\n        yWalker,\n        deltaX,\n        deltaY,\n        absDeltaX,\n        absDeltaY,\n        errX,\n        errY,\n        xDestination,\n        yDestination,\n        step;\n    // Calculate line deltas\n    deltaX = x1 - x0;\n    deltaY = y1 - y0;\n    // Create a positive copy of deltas (makes iterating easier)\n    absDeltaX = Math.abs(deltaX);\n    absDeltaY = Math.abs(deltaY);\n    // Calculate error intervals for both axis\n    errX = 2 * absDeltaY - absDeltaX;\n    errY = 2 * absDeltaX - absDeltaY;\n    // The line is X-axis dominant\n    if (absDeltaY <= absDeltaX) {\n        // Line is drawn left to right\n        if (deltaX >= 0) {\n            xWalker = x0;\n            yWalker = y0;\n            xDestination = x1;\n        }\n        // Line is drawn right to left (swap ends)\n        else {\n            xWalker = x1;\n            yWalker = y1;\n            xDestination = x0;\n        }\n        // Push first pixel\n        _pushTobresenhamLine(xWalker, yWalker);\n        // Rasterize the line\n        for (step = 0; xWalker < xDestination; step++) {\n            // move one step on x\n            xWalker = xWalker + 1;\n            // errX is smaller than 0\n            if (errX < 0) {\n                errX = errX + 2 * absDeltaY;\n                _pushTobresenhamLine(xWalker, yWalker);\n            }\n            // errX is larger than 0\n            else {\n                if ((deltaX < 0 && deltaY < 0) || (deltaX > 0 && deltaY > 0)) {\n                    yWalker = yWalker + 1;\n                } else {\n                    yWalker = yWalker - 1;\n                }\n                errX = errX + 2 * (absDeltaY - absDeltaX);\n                // push pnt that stays on x for the y+1 step\n                // so that the a 90deg step is created\n                _pushTobresenhamLine(xWalker - 1, yWalker);\n            }\n            _pushTobresenhamLine(xWalker, yWalker);\n        }\n    }\n    // The line is Y-axis dominant\n    else if (absDeltaY > absDeltaX) {\n        // Line is drawn bottom to top\n        if (deltaY >= 0) {\n            xWalker = x0;\n            yWalker = y0;\n            yDestination = y1;\n        } else {\n            // Line is drawn top to bottom\n            xWalker = x1;\n            yWalker = y1;\n            yDestination = y0;\n        }\n        _pushTobresenhamLine(xWalker, yWalker); // Draw first pixel\n        // Rasterize the line\n        for (step = 0; yWalker < yDestination; step++) {\n            // move y\n            yWalker = yWalker + 1;\n            if (errY <= 0) {\n                errY = errY + 2 * absDeltaX;\n                _pushTobresenhamLine(xWalker, yWalker);\n            } else {\n                if ((deltaX < 0 && deltaY < 0) || (deltaX > 0 && deltaY > 0)) {\n                    xWalker = xWalker + 1;\n                } else {\n                    xWalker = xWalker - 1;\n                }\n                errY = errY + 2 * (absDeltaX - absDeltaY);\n                _pushTobresenhamLine(xWalker, yWalker - 1);\n            }\n            _pushTobresenhamLine(xWalker, yWalker);\n        }\n    }\n    return pathArr;\n};\n","/* global window */\nimport React, { Component } from \"react\";\nimport { CellMeta, SelectionTarget } from \"./baseMapComponents\";\nimport { connect } from \"react-redux\";\nimport {\n    _proccesNetworkPnts,\n    _proccessAccessData,\n    _proccessGridData,\n    _postMapEditsToCityIO,\n    _proccessGridTextData,\n    _proccessBresenhamGrid,\n    setDirLightSettings,\n    _bresenhamLine,\n} from \"./baseMapUtils\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { TripsLayer } from \"@deck.gl/geo-layers\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport {\n    HeatmapLayer,\n    PathLayer,\n    GeoJsonLayer,\n    TextLayer,\n    ScatterplotLayer,\n} from \"deck.gl\";\nimport { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\nimport settings from \"../../settings/settings.json\";\nimport { listenToSlidersEvents } from \"../../redux/actions\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            menu: [],\n            cityioData: null,\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            selectedNetState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n            networkFirstPoint: null,\n            networkEdge: [],\n            networkLayer: [],\n        };\n        this.animationFrame = null;\n        this.timeZoneOffset = setDirLightSettings(\n            this.props.cityioData.GEOGRID.properties.header\n        );\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 11 + this.timeZoneOffset),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        const { cityioData } = this.props;\n        // fix deck view rotate\n        this._rightClickViewRotate();\n        // setup sun effects\n        this._setupEffects();\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n        this.setState({\n            networkPnts: _proccesNetworkPnts(cityioData),\n            gridTextData: _proccessGridTextData(cityioData),\n            bresenhamGrid: _proccessBresenhamGrid(cityioData),\n            networkLayer: cityioData.GEONETWORK,\n        });\n\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    /**\n     * handels events as they derived from redux props\n     */\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.menu !== prevState.menu) {\n            this.setState({ menu: this.props.menu });\n        }\n\n        const { cityioData } = this.props;\n        if (prevState.cityioData !== cityioData) {\n            // get cityio data from props\n\n            this.setState({\n                cityioData: cityioData,\n                GEOGRID: _proccessGridData(cityioData),\n            });\n\n            // ! workaround for preloading access layer data\n            if (cityioData.access) {\n                this.setState({ access: _proccessAccessData(cityioData) });\n            }\n        }\n\n        // toggle ABM animation\n        if (\n            !prevProps.menu.includes(\"ABM\") &&\n            this.props.menu.includes(\"ABM\")\n        ) {\n            this.setState({ animateABM: true });\n        } else if (\n            prevProps.menu.includes(\"ABM\") &&\n            !this.props.menu.includes(\"ABM\")\n        ) {\n            this.setState({ animateABM: false });\n        }\n\n        // toggle rotate animation\n        if (\n            !prevProps.menu.includes(\"ROTATE\") &&\n            this.props.menu.includes(\"ROTATE\")\n        ) {\n            this.setState({ animateCamera: true });\n        } else if (\n            prevProps.menu.includes(\"ROTATE\") &&\n            !this.props.menu.includes(\"ROTATE\")\n        ) {\n            this.setState({ animateCamera: false });\n        }\n\n        if (\n            !prevProps.menu.includes(\"SHADOWS\") &&\n            this.props.menu.includes(\"SHADOWS\")\n        ) {\n            this._effects[0].shadowColor = [0, 0, 0, 0.5];\n        }\n\n        if (\n            prevProps.menu.includes(\"SHADOWS\") &&\n            !this.props.menu.includes(\"SHADOWS\")\n        ) {\n            this._effects[0].shadowColor = [0, 0, 0, 0];\n        }\n\n        //  toggle edit mode and send to cityio\n        if (\n            prevProps.menu.includes(\"EDIT\") &&\n            !this.props.menu.includes(\"EDIT\")\n        ) {\n            // take props from grid and send\n            let dataProps = [];\n            for (let i = 0; i < this.state.GEOGRID.features.length; i++) {\n                dataProps[i] = this.state.GEOGRID.features[i].properties;\n            }\n            _postMapEditsToCityIO(\n                dataProps,\n                cityioData.tableName,\n                \"/GEOGRIDDATA\"\n            );\n\n            _postMapEditsToCityIO(\n                this.state.networkLayer,\n                cityioData.tableName,\n                \"/GEONETWORK\"\n            );\n        }\n\n        // toggle reset view mode\n        if (\n            !prevProps.menu.includes(\"RESET_VIEW\") &&\n            this.props.menu.includes(\"RESET_VIEW\")\n        ) {\n            this._setViewStateToTableHeader();\n        } else if (\n            prevProps.menu.includes(\"RESET_VIEW\") &&\n            !this.props.menu.includes(\"RESET_VIEW\")\n        ) {\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    pitch: 45,\n                },\n            });\n        }\n    }\n\n    _onViewStateChange = ({ viewState }) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n\n        this.setState({ viewState });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        const header = this.props.cityioData.GEOGRID.properties.header;\n\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                longitude: header.longitude,\n                latitude: header.latitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 360 - header.rotation,\n                orthographic: true,\n            },\n        });\n    }\n\n    _setupEffects() {\n        const ambientLight = new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 0.85,\n        });\n        const dirLight = new _SunLight(this.dirLightSettings);\n        const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n        lightingEffect.shadowColor = [0, 0, 0, 0.5];\n        this._effects = [lightingEffect];\n    }\n\n    _animate() {\n        if (this.state.animateCamera) {\n            let bearing = this.state.viewState.bearing\n                ? this.state.viewState.bearing\n                : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    bearing: bearing,\n                },\n            });\n        }\n\n        if (this.state.animateABM) {\n            const time = this.props.sliders.time[1];\n            const speed = this.props.sliders.speed;\n            const startHour = this.props.sliders.time[0];\n            const endHour = this.props.sliders.time[2];\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n            var currentDateMidnight = new Date();\n            currentDateMidnight.setHours(0, 0, 0, 0);\n            var date = new Date(currentDateMidnight.getTime() + t * 1000);\n            this._effects[0].directionalLights[0].timestamp = Date.UTC(\n                date.getFullYear(),\n                date.getMonth(),\n                date.getDay(),\n                date.getHours(),\n                date.getMinutes(),\n                date.getSeconds()\n            );\n\n            this.props.listenToSlidersEvents({\n                ...this.props.sliders,\n                time: [\n                    this.props.sliders.time[0],\n                    t,\n                    this.props.sliders.time[2],\n                ],\n            });\n        }\n\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        const { selectedType } = this.props;\n        const { height, color, name } = selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n        multiSelectedObj.forEach((selected) => {\n            const thisCellProps = selected.object.properties;\n            if (thisCellProps && thisCellProps.interactive === true) {\n                thisCellProps.old_height = thisCellProps.height;\n                thisCellProps.old_color = thisCellProps.color;\n                thisCellProps.color = color;\n                thisCellProps.height = height;\n                thisCellProps.name = name;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    _handleNetworkHover = (pnt) => {\n        // paint the pnt\n        const { selectedType } = this.props;\n        // check if really a pnt\n        if (\n            pnt &&\n            pnt.object &&\n            pnt.object.properties &&\n            selectedType.name !== \"Clear network\"\n        ) {\n            const pntProps = pnt.object.properties;\n            pntProps.old_color = pntProps.color;\n            pntProps.color = selectedType.color;\n            pntProps.old_netWidth = pntProps.netWidth;\n            pntProps.netWidth = pntProps.netWidth * 2;\n            // dirty solution for animating selection\n            this.setState({\n                hoveredPnt: pnt.object,\n            });\n\n            // then back to org color\n            pntProps.color = pntProps.old_color;\n            pntProps.netWidth = pntProps.old_netWidth;\n\n            this.setState({\n                hoveredPnt: pnt.object,\n            });\n        }\n    };\n\n    _handleNetworkRemove = (path) => {\n        const selectedType = this.props.selectedType;\n        if (path.object && selectedType.name === \"Delete Path\") {\n            path = path.object;\n            this.state.networkLayer.forEach((item, index, object) => {\n                if (item.id === path.id) {\n                    object.splice(index, 1);\n                    let tmpObj = JSON.parse(JSON.stringify(object));\n                    this.setState({\n                        networkLayer: tmpObj,\n                    });\n                }\n            });\n        }\n    };\n\n    /**\n     *\n     * if we have the first pnt\n     * get the second point\n     * if on any of it's 4 immidate sides\n     * draw line\n     *\n     */\n    _handleNetworkCreate = (pnt) => {\n        // check if on network path  delete mode\n        const selectedType = this.props.selectedType;\n        // if we're not removing paths\n        if (selectedType.name !== \"Delete Path\") {\n            // if this is the first point\n            if (!this.state.networkFirstPoint) {\n                // make this the first point\n                this.setState({ networkFirstPoint: pnt });\n            } else {\n                const pickData = this.deckGL.pickObject({\n                    x: pnt.x,\n                    y: pnt.y,\n                });\n\n                if (\n                    pickData &&\n                    selectedType.class === \"networkClass\" &&\n                    selectedType.name !== \"Clear network\"\n                ) {\n                    const FP = this.state.networkFirstPoint.object.properties\n                        .gridPosition;\n                    const SP = pickData.object.properties.gridPosition;\n\n                    let lineObj = _bresenhamLine(\n                        FP[0],\n                        FP[1],\n                        SP[0],\n                        SP[1],\n                        this.state.bresenhamGrid\n                    );\n\n                    let tmpArr;\n\n                    tmpArr = Array.isArray(this.state.networkLayer)\n                        ? this.state.networkLayer\n                        : [];\n\n                    let bresenhamLine = {\n                        path: lineObj,\n                        id: tmpArr.length,\n                        selectedType: this.props.selectedType,\n                    };\n\n                    tmpArr.push(bresenhamLine);\n                    tmpArr = JSON.parse(JSON.stringify(tmpArr));\n                    this.setState({ networkLayer: tmpArr });\n                    // null the first pnt for new selection\n                    this.setState({ networkFirstPoint: null });\n                }\n            }\n        }\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        if (this.props.menu.includes(\"EDIT\")) {\n            return (\n                this.props.selectedType && (\n                    <SelectionTarget\n                        mousePos={this.state.mousePos}\n                        selectedType={this.props.selectedType}\n                        divSize={this.state.pickingRadius}\n                        mouseDown={this.state.mouseDown}\n                    />\n                )\n            );\n        } else {\n            return (\n                this.state.hoveredObj && (\n                    <CellMeta\n                        mousePos={this.state.mousePos}\n                        hoveredObj={this.state.hoveredObj}\n                    />\n                )\n            );\n        }\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n        if (e.nativeEvent.key === \"=\" && this.state.pickingRadius < 100) {\n            this.setState({ pickingRadius: this.state.pickingRadius + 5 });\n        } else if (e.nativeEvent.key === \"-\" && this.state.pickingRadius > 0) {\n            this.setState({ pickingRadius: this.state.pickingRadius - 5 });\n        }\n    };\n\n    /**\n     * remap line width\n     */\n    _remapValues = (value) => {\n        let remap =\n            value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n        return remap;\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        const zoomLevel = this.state.viewState.zoom;\n        const { cityioData } = this.props;\n        let layers = [];\n\n        if (this.props.menu.includes(\"TEXT\")) {\n            layers.push(\n                new TextLayer({\n                    id: \"gridText-layer\",\n                    data: this.state.gridTextData,\n                    getText: (d) => d.text,\n                    getPosition: (d) => d.coordinates,\n                    getColor: [255, 255, 255],\n                    getSize: 10,\n                })\n            );\n        }\n\n        if (this.props.menu.includes(\"GRID\")) {\n            layers.push(\n                new GeoJsonLayer({\n                    id: \"GRID\",\n                    // loads geogrid into visualization\n                    data: this.state.GEOGRID,\n                    visible: this.props.menu.includes(\"GRID\") ? true : false,\n                    pickable:\n                        this.props.selectedType.class === \"networkClass\"\n                            ? false\n                            : true,\n                    extruded: true,\n                    lineWidthScale: 1,\n                    lineWidthMinPixels: 2,\n                    getElevation: (d) => d.properties.height,\n                    getFillColor: (d) => d.properties.color,\n                    onClick: (event) => {\n                        if (\n                            this.props.menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        )\n                            this._handleGridcellEditing(event);\n                    },\n                    onHover: (e) => {\n                        if (e.object) {\n                            this.setState({ hoveredObj: e });\n                        }\n                    },\n\n                    onDrag: (event) => {\n                        if (\n                            this.props.menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        )\n                            this._handleGridcellEditing(event);\n                    },\n                    onDragStart: () => {\n                        if (\n                            this.props.menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        ) {\n                            this.setState({ draggingWhileEditing: true });\n                        }\n                    },\n                    onDragEnd: () => {\n                        this.setState({ draggingWhileEditing: false });\n                    },\n                    updateTriggers: {\n                        getFillColor: this.state.selectedCellsState,\n                        getElevation: this.state.selectedCellsState,\n                    },\n                    transitions: {\n                        getFillColor: 500,\n                        getElevation: 500,\n                    },\n                })\n            );\n        }\n\n        if (\n            this.props.menu.includes(\"NETWORK\") &&\n            this.state.networkPnts &&\n            this.state.networkPnts.features\n        ) {\n            if (this.props.menu.includes(\"EDIT\")) {\n                layers.push(\n                    new ScatterplotLayer({\n                        id: \"NETWORK\",\n                        data: this.state.networkPnts.features,\n                        pickable: true,\n                        opacity: 1,\n                        filled: true,\n                        radiusScale: 1,\n                        radiusMinPixels: 1,\n                        radiusMaxPixels: 100,\n                        getPosition: (d) => d.geometry.coordinates,\n                        getFillColor: (d) => d.properties.color,\n                        getRadius: (d) => d.properties.netWidth,\n\n                        onHover: (e) => {\n                            if (\n                                this.props.menu.includes(\"EDIT\") &&\n                                this.state.keyDownState !== \"Shift\"\n                            ) {\n                                this._handleNetworkHover(e);\n                            }\n                        },\n                        onClick: (e) => {\n                            if (\n                                this.props.menu.includes(\"EDIT\") &&\n                                this.state.keyDownState !== \"Shift\"\n                            ) {\n                                this._handleNetworkCreate(e);\n                            }\n                        },\n\n                        updateTriggers: {\n                            getFillColor: this.state.hoveredPnt,\n                            getRadius: this.state.hoveredPnt,\n                        },\n                        transitions: {\n                            getFillColor: 100,\n                            getRadius: 300,\n                        },\n                    })\n                );\n            }\n\n            layers.push(\n                new PathLayer({\n                    pickable: true,\n                    id: \"NETWORK_PATHS\",\n                    data: this.state.networkLayer,\n                    widthScale: 1,\n                    widthMinPixels: 5,\n                    getPath: (d) => d.path,\n                    getColor: (d) => d.selectedType.color,\n                    getWidth: (d) => d.selectedType.width,\n                    onClick: (e) => {\n                        if (\n                            this.props.menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        ) {\n                            this._handleNetworkRemove(e);\n                        }\n                    },\n                    updateTriggers: {\n                        getPath: this.state.networkLayer,\n                    },\n                    transitions: {\n                        getPath: 500,\n                    },\n                })\n            );\n        }\n\n        if (this.props.menu.includes(\"ACCESS\")) {\n            layers.push(\n                new HeatmapLayer({\n                    id: \"ACCESS\",\n                    visible: this.props.menu.includes(\"ACCESS\"),\n                    colorRange: settings.map.layers.heatmap.colors,\n                    radiusPixels: 200,\n                    opacity: 0.25,\n                    data: this.state.access,\n                    getPosition: (d) => d.coordinates,\n                    getWeight: (d) => d.values[this.props.accessToggle],\n                    updateTriggers: {\n                        getWeight: [this.props.accessToggle],\n                    },\n                })\n            );\n        }\n\n        if (this.props.menu.includes(\"ABM\")) {\n            layers.push(\n                new TripsLayer({\n                    id: \"ABM\",\n                    visible: this.props.menu.includes(\"ABM\") ? true : false,\n                    data: cityioData.ABM,\n                    getPath: (d) => d.path,\n                    getTimestamps: (d) => d.timestamps,\n                    getColor: (d) => {\n                        //switch between modes or types of users\n                        switch (d.mode[0]) {\n                            case 0:\n                                return [228, 26, 28];\n                            case 1:\n                                return [55, 126, 184];\n                            case 2:\n                                return [77, 175, 74];\n                            case 3:\n                                return [255, 255, 51];\n                            case 4:\n                                return [152, 78, 163];\n                            case 5:\n                                return [255, 127, 0];\n                            default:\n                                return [255, 255, 255];\n                        }\n                    },\n                    getWidth: 1,\n                    widthScale: this._remapValues(zoomLevel),\n                    opacity: 0.8,\n                    rounded: true,\n                    trailLength: 500,\n                    currentTime: this.props.sliders.time[1],\n                })\n            );\n        }\n\n        if (this.props.menu.includes(\"PATHS\")) {\n            layers.push(\n                new PathLayer({\n                    id: \"PATHS\",\n                    visible: this.props.menu.includes(\"PATHS\") ? true : false,\n                    _shadow: false,\n                    data: cityioData.ABM,\n                    getPath: (d) => {\n                        const noisePath =\n                            Math.random() < 0.5\n                                ? Math.random() * 0.00005\n                                : Math.random() * -0.00005;\n                        for (let i in d.path) {\n                            d.path[i][0] = d.path[i][0] + noisePath;\n                            d.path[i][1] = d.path[i][1] + noisePath;\n                            d.path[i][2] = d.mode[0] * 2;\n                        }\n                        return d.path;\n                    },\n                    getColor: (d) => {\n                        switch (d.mode[0]) {\n                            case 0:\n                                return [228, 26, 28];\n                            case 1:\n                                return [55, 126, 184];\n                            case 2:\n                                return [77, 175, 74];\n                            case 3:\n                                return [255, 255, 51];\n                            case 4:\n                                return [152, 78, 163];\n                            case 5:\n                                return [255, 127, 0];\n                            default:\n                                return [255, 255, 255];\n                        }\n                    },\n                    opacity: 0.2,\n                    getWidth: 1.5,\n                })\n            );\n        }\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {/* renders the slection box div */}\n\n                <React.Fragment>{this._renderSelectionTarget()}</React.Fragment>\n\n                <DeckGL\n                    // sets the cursor on paint\n                    getCursor={() =>\n                        this.props.menu.includes(\"EDIT\") ? \"none\" : \"all-scroll\"\n                    }\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    effects={this._effects}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        asyncRender={true}\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.blue}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        sliders: state.SLIDERS,\n        menu: state.MENU,\n        accessToggle: state.ACCESS_TOGGLE,\n    };\n};\n\nconst mapDispatchToProps = {\n    listenToSlidersEvents: listenToSlidersEvents,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);\n","import { Matrix3d, RectPoints, Vector } from \"./layer\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1\n    ].map(num => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./layer\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 30;\nconst halfAnchor = anchorSize / 2;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"4px solid white\",\n        cursor: \"move\"\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor\n    }\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {}\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={evt => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation)\n        }}\n    />\n);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        top: \"50vh\",\n        zIndex: 1000\n    }\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\nimport DeleteLocalStorage from \"./deleteLocalStorage\";\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport class Layer extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n        // if entered keystone mode\n        if (!prevProps.isEditMode && this.props.isEditMode) {\n            // if found prev. keystone data\n            if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }\n            // if left keystone mode\n        } else if (prevProps.isEditMode && !this.props.isEditMode) {\n            console.log(\"saving edited projMap...\");\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n    _clearLocalStraoge = () => {\n        if (localStorage.getItem(\"projMap\")) {\n            localStorage.removeItem(\"projMap\");\n        }\n        window.location.reload();\n    };\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <React.Fragment>\n                {isEditMode && (\n                    <div onClick={() => this._clearLocalStraoge()}>\n                        <DeleteLocalStorage />\n                    </div>\n                )}\n\n                <div\n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport MAP from \"./baseMap\";\nimport { connect } from \"react-redux\";\nimport { Layer } from \"../prjMap/layer\";\n\nclass MapContainer extends Component {\n    _checkKeystone = () => {\n        return this.props.menu.includes(\"KS\") ? true : false;\n    };\n\n    render() {\n        return (\n            <div\n                style={{\n                    background: \"black\",\n                    height: \"100vh\",\n                    width: \"100vw\",\n                    maxWidth: \"100%\",\n                    overflow: \"hidden\"\n                }}\n            >\n                <Layer\n                    className=\"mapLayer\"\n                    style={{\n                        height: \"100vh\",\n                        width: \"100vw\"\n                    }}\n                    isEditMode={this._checkKeystone()}\n                >\n                    <MAP\n                        menu={this.props.menu}\n                        selectedType={this.props.selectedType}\n                    />\n                </Layer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        menu: state.MENU,\n        selectedType: state.SELECTED_TYPE\n    };\n};\n\nexport default connect(mapStateToProps, null)(MapContainer);\n","import React, { Component } from \"react\";\nimport { CircularGridLines, RadarChart } from \"react-vis\";\nimport \"../../../../node_modules/react-vis/dist/style.css\";\n\nimport \"./Radar.css\";\n\n/**\n * \n * \n *  \"domain\": [\n            { \"name\": \"amazing city\", \"domain\": [0, 1] },\n            { \"name\": \"validated innovation\", \"domain\": [0, 1] },\n            { \"name\": \"predicted happiness\", \"domain\": [0, 1] },\n            { \"name\": \"wow mix-use\", \"domain\": [0, 1] },\n            { \"name\": \"ok buildings\", \"domain\": [0, 1] },\n            { \"name\": \"fun crime rates\", \"domain\": [0, 1] },\n            { \"name\": \"success urbanism\", \"domain\": [0, 1] },\n            { \"name\": \"happy AI\", \"domain\": [0, 1] },\n            { \"name\": \"free parking\", \"domain\": [0, 1] },\n            { \"name\": \"deep chainy\", \"domain\": [0, 1] },\n            { \"name\": \"failed urbanism\", \"domain\": [0, 1] },\n            { \"name\": \"Data for free\", \"domain\": [0, 1] },\n            { \"name\": \"vapor energy\", \"domain\": [0, 1] },\n            { \"name\": \"deep chainy\", \"domain\": [0, 1] }\n        ],\n */\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            domains: [],\n            radarData: [],\n        };\n        this.radarSize = 350;\n\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n        let radarData = {};\n        let domains = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"radar\") {\n                radarData[indicators[i].name] = indicators[i].value;\n                indicators[i].domain = [0, 1];\n                domains.push(indicators[i]);\n            }\n        }\n        this.setState({ radarData: [radarData], domains: domains });\n    }\n\n    componentDidMount() {\n        console.log(\"...init radar\");\n        this.setState({ indicators: this.props.indicators });\n        this.generateData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.setState({ indicators: this.props.indicators });\n            console.log(\"new radar data..\");\n            this.generateData();\n        }\n    }\n\n    render() {\n        if (this.props.cityioData.indicators) {\n            return (\n                <RadarChart\n                    className=\"Radar blur\"\n                    animation\n                    data={this.state.radarData}\n                    domains={this.state.domains}\n                    colorRange={this.colorRange}\n                    style={{\n                        polygons: {\n                            fillOpacity: 0.2,\n                            strokeWidth: 2,\n                        },\n                        axes: {\n                            text: {\n                                opacity: 0,\n                                fontWeight: 700,\n                                fill: \"white\",\n                            },\n                            strokeWidth: 0,\n                        },\n                        labels: {\n                            textAnchor: \"middle\",\n                            fontSize: 8,\n                            fontWeight: \"600\",\n                            fill: \"white\",\n                        },\n                    }}\n                    margin={{\n                        left: this.radarSize / 6,\n                        top: this.radarSize / 6,\n                        bottom: this.radarSize / 6,\n                        right: this.radarSize / 6,\n                    }}\n                    width={this.radarSize}\n                    height={this.radarSize}\n                >\n                    <CircularGridLines\n                        style={{\n                            fill: \"white\",\n                            fillOpacity: 0.1,\n                            backgroundColor: \"#fff\",\n                            opacity: 0.5,\n                            stroke: \"white\",\n                            width: 0.1,\n                        }}\n                        tickValues={[...new Array(11)].map(\n                            (v, i) => i / 10 - 1\n                        )}\n                    />\n                </RadarChart>\n            );\n        } else return null;\n    }\n}\n\nexport default Radar;\n","import React, { Component } from \"react\";\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalBarSeries,\n} from \"react-vis\";\nimport \"../../../../node_modules/react-vis/dist/style.css\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            barChartData: null,\n        };\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    componentDidMount() {\n        console.log(\"....init BarChart\");\n        this.generateData();\n    }\n\n    /**\n   \n    [\n    { x: 2, y: 10 },\n    { x: 4, y: 5 },\n    { x: 12, y: 15 },\n    ]\n     */\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n\n        let dataArr = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"bar\") {\n                dataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].value,\n                });\n            }\n        }\n        this.setState({ barChartData: dataArr });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.generateData();\n        }\n    }\n\n    render() {\n        if (this.state.barChartData) {\n            return (\n                <FlexibleWidthXYPlot\n                    color={this.colorRange[1]}\n                    opacity={0.25}\n                    xType=\"ordinal\"\n                    width={350}\n                    height={250}\n                    stackBy=\"y\"\n                    yDomain={[0, 1]}\n                >\n                    <XAxis\n                        style={{\n                            text: {\n                                fill: \"#fff\",\n                            },\n                        }}\n                        tickLabelAngle={90}\n                    />\n                    <YAxis style={{ text: { fill: \"#fff\" } }} />\n                    <VerticalBarSeries data={this.state.barChartData} />\n                </FlexibleWidthXYPlot>\n            );\n        } else return null;\n    }\n}\n\nexport default Radar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(1),\n    },\n}));\n\nexport default function AreaCalc(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            {\"This div's text looks like that of a button.\"}\n        </div>\n    );\n}\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Radar from \"./Radar/Radar\";\nimport BarChart from \"./BarChart/BarChart\";\nimport AreaCalc from \"./AreaCalc/AreaCalc\";\n\nfunction VisContainer(props) {\n    const useStyles = makeStyles({\n        root: {\n            display: \"flex\",\n            paddingLeft: 16,\n            paddingRight: 16,\n        },\n        paper: {\n            background: \"#1D1F21\",\n            width: 400,\n        },\n        list: {\n            color: \"#FFF\",\n        },\n        text: {\n            marginLeft: 16,\n            marginTop: 12,\n            flexGrow: 1,\n            fontSize: 20,\n            marginBottom: 12,\n            fontWeight: \"lighter\",\n        },\n    });\n\n    const classes = useStyles();\n    const showRadar = props.menu && props.menu.includes(\"RADAR\");\n\n    return (\n        <React.Fragment>\n            {showRadar && (\n                <Drawer\n                    className={classes.root}\n                    variant=\"persistent\"\n                    anchor=\"right\"\n                    open={true}\n                    classes={{\n                        paper: classes.paper,\n                    }}\n                >\n                    <List className={classes.list}>\n                        <ListItem>\n                            <ListItemText className={classes.text}>\n                                <h2>Urban Indicators</h2>\n                            </ListItemText>\n                        </ListItem>\n                        <ListItem>\n                            <AreaCalc cityioData={props.cityioData} />\n                        </ListItem>\n                        <Divider />\n                        <ListItem>\n                            <Radar cityioData={props.cityioData} />\n                        </ListItem>\n                        <Divider />\n\n                        <ListItem>\n                            <BarChart cityioData={props.cityioData} />\n                        </ListItem>\n                    </List>\n                </Drawer>\n            )}\n        </React.Fragment>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        menu: state.MENU,\n    };\n};\n\nexport default connect(mapStateToProps, null)(VisContainer);\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { useSelector } from \"react-redux\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: none;\n`;\n\nfunction LoadingSpinner() {\n    const loading = useSelector(state => state.LOADING);\n    return (\n        <div\n            style={{\n                position: \"fixed\",\n                bottom: 50,\n                right: 50,\n                zIndex: 1\n            }}\n        >\n            <PulseLoader\n                css={override}\n                size={20}\n                color=\"white\"\n                loading={loading}\n            />\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CityIO from \"../../services/cityIO\";\nimport MenuContainer from \"../MenuContainer/MenuContainer\";\nimport MapContainer from \"../baseMap/baseMapContainer\";\nimport VisContainer from \"../visContainer/visContainer\";\nimport LoadingSpinner from \"../LoadingSpinner\";\n\nfunction Screen(props) {\n    // wait for 'ready' flag when app is ready to start\n    const ready = useSelector((state) => state.READY);\n    // get the table name for cityIO comp\n    const { tableName } = props;\n\n    return (\n        <>\n            <CityIO tableName={tableName} />\n            {/* if ready, render the app*/}\n            {ready && (\n                <>\n                    <MenuContainer />\n                    <MapContainer />\n                    <VisContainer />\n                </>\n            )}\n            <LoadingSpinner />\n        </>\n    );\n}\n\nexport default Screen;\n","import Provider from \"./Provider\";\nimport \"./index.css\";\nimport configureStore from \"./redux/store\";\nimport Screen from \"./components/Screen\";\nimport { StylesProvider } from \"@material-ui/core/styles\";\nimport React, { Component } from \"react\";\nimport { newDataStyle } from \"./services/consoleStyle\";\n\nconst store = configureStore();\n\nconst MapRoute = () => {\n    let url = window.location.toString();\n    let pre = \"cityscope=\";\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length);\n\n    let table = null;\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\n        table = cityscopePrjName;\n    } else {\n        table = \"grasbrook\";\n    }\n    console.log(\"%c loading CityScope project: \" + table, newDataStyle);\n\n    return (\n        <Provider store={store}>\n            <StylesProvider injectFirst>\n                <Screen tableName={table} />\n            </StylesProvider>\n        </Provider>\n    );\n};\n\nclass App extends Component {\n    render() {\n        return <MapRoute />;\n    }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = document.getElementById(\"root\");\nconst render = () => {\n    return ReactDOM.render(<App />, root);\n};\n\nrender(App);\n\nif (module.hot) {\n    module.hot.accept(\"./App\", () => {\n        const NextApp = require(\"./App\").default;\n        render(NextApp);\n    });\n}\n"],"sourceRoot":""}