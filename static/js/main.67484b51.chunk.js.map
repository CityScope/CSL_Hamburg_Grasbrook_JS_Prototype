{"version":3,"sources":["redux/Provider.js","redux/actions.js","redux/initialState.js","redux/reducer.js","redux/store.js","components/CityScopeJS/CityIO/cityIO.js","components/CityScopeJS/BaseMap/BaseMapUtils.js","components/CityScopeJS/MenuContainer/EditMenu/EditMenu.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/AccessSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/index.js","components/CityScopeJS/MenuContainer/FABMenu/index.js","components/CityScopeJS/MenuContainer/MenuContainer.js","components/CityScopeJS/BaseMap/CellMeta/CellMeta.js","components/CityScopeJS/BaseMap/PaintBrush/PaintBrush.js","components/CityScopeJS/BaseMap/BaseMap.js","components/CityScopeJS/ProjectionMapping/util.ts","components/CityScopeJS/ProjectionMapping/anchor.tsx","components/CityScopeJS/ProjectionMapping/deleteLocalStorage.js","components/CityScopeJS/ProjectionMapping/ProjectionMapping.tsx","components/CityScopeJS/BaseMap/BaseMapContainer.js","components/CityScopeJS/VisContainer/Radar/Radar.js","components/CityScopeJS/VisContainer/DownloadRawData/DownloadRawData.js","components/CityScopeJS/VisContainer/BarChart/BarChart.js","components/CityScopeJS/VisContainer/AreaCalc/AreaCalc.js","components/CityScopeJS/VisContainer/VisContainer.js","components/CityScopeJS/CityIO/LoadingSpinner/index.js","components/CityScopeJS/CityScopeJS.js","components/SplashScreen/SplashScreen.js","components/GridEditor/EditorMap/EditorBrush.js","components/GridEditor/EditorMap/EditorMap.js","components/GridEditor/EditorMenu/TypesEditor/TypesEditor.js","components/GridEditor/EditorMenu/GridProps/GridMaker/gridCreator.js","components/GridEditor/EditorMenu/GridProps/GridMaker/GridMaker.js","components/GridEditor/EditorMenu/GridProps/CommitGrid/CommitGrid.js","components/GridEditor/EditorMenu/GridProps/CenterMapButton/CenterMapButton.js","components/GridEditor/EditorMenu/GridProps/GridProps.js","components/GridEditor/EditorMenu/EditorMenu.js","components/GridEditor/GridEditor.js","components/Router/Router.js","index.js"],"names":["ProviderWrapper","children","store","listenToSlidersEvents","data","type","listenToEditMenu","listenToRowEdits","listenToBaseMapCenter","listOfToggles","Object","keys","settings","menu","toggles","menuInitState","i","length","values","showOnInit","push","initialState","MENU","CITYIO","MAP","SLIDERS","time","map","layers","ABM","startSimHour","endSimHour","speed","animationSpeed","ACCESS_TOGGLE","SELECTED_TYPE","READY","LOADING","ROW_EDIT","BASE_MAP_CENTER","latCenter","lonCenter","TYPES_LIST","GRID_CREATED","reducer","state","action","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","configureStore","createStore","CityIO","props","handleURL","tableName","cityioURL","cityIO","mockURL","baseURL","getCityIOHash","timer","setInterval","_isMounted","interval","console","log","URL","axios","get","then","response","handleCityIOHashes","catch","e","result","id","oldHashs","setState","cityIOmodulesStatus","setLoadingState","cityIOmodules","forEach","module","hashes","setNestedState","getCityIOmoduleData","parent","child","holder","moduleName","checkDoneCityIO","error","status","headers","request","message","config","cityIOmodulesData","getCityioData","setReadyState","this","Component","mapDispatchToProps","connect","hexToRgb","hex","exec","parseInt","testHex","hexString","test","_proccessGridData","cityioData","GEOGRID","GEOGRIDDATA","features","properties","JSON","parse","stringify","_proccessAccessData","accessData","access","coordinates","d","geometry","heatmap","classes","makeStyles","theme","drawer","width","zIndex","marginAutoContainer","display","marginAutoItem","margin","useStyles","React","useState","selectedIndex","setSelectedIndex","dispatch","useDispatch","selectedType","useSelector","height","marks","value","label","Drawer","className","variant","anchor","open","paper","List","LanduseTypesList","iconsArr","col","color","rgbCol","selected","typeHasHeightProps","Fragment","key","Math","random","Divider","component","root","dividerColor","ListItem","alignItems","button","onClick","event","name","typeProps","list","ListItemAvatar","Avatar","style","backgroundColor","charAt","ListItemText","primary","listItemPrimaryText","secondary","listItemSecondaryText","Collapse","in","Slider","valueLabelDisplay","slider","onChangeCommitted","getAriaLabel","index","toString","min","max","createTypesIcons","types","marginLeft","subtitle1","marginTop","subtitle2","ABMSubmenu","sliders","Typography","gutterBottom","onChange","newValue","aria-labelledby","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","c","colors","l","startColor","endColor","startTitle","endTitle","p","textTransform","ListItemSecondaryAction","Switch","edge","checked","TogglesMenu","paddingLeft","paddingRight","padding","spacing","drawerPaper","toggleDrawer","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","includes","thisToggle","displayName","elevation","BackdropProps","invisible","onClose","FABMenu","flexDirection","position","paddingTop","Tooltip","title","Fab","MenuContainer","drawerOpen","indexOf","updatedMenuState","splice","showEditMenu","CellMeta","mousePos","borderRadius","pointerEvents","left","clientX","top","clientY","fontSize","fontWeight","hoveredObj","object","PaintBrush","hoveredCells","isInteractiveCell","interactive","divSize","colorTrans","mouseX","mouseY","msg","border","mouseDown","borderColor","Map","_onViewStateChange","viewState","orthographic","_mulipleObjPicked","dim","pickingRadius","x","y","deckGL","pickObjects","_handleGridcellEditing","multiSelectedObj","thisCellProps","selectedCellsState","_renderPaintBrush","_handleKeyUp","keyDownState","_handleKeyDown","nativeEvent","_remapValues","draggingWhileEditing","initialViewState","animationFrame","cancelAnimationFrame","_rightClickViewRotate","_setupEffects","_setViewStateToTableHeader","_animate","prevProps","prevState","animateABM","animateCamera","_effects","shadowColor","dataProps","endPoint","options","method","url","Accept","_postMapEditsToCityIO","pitch","header","longitude","latitude","zoom","bearing","rotation","ambientLight","AmbientLight","intensity","dirLight","_SunLight","timestamp","_shadow","lightingEffect","LightingEffect","startHour","endHour","t","currentDateMidnight","Date","setHours","date","getTime","directionalLights","UTC","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","requestAnimationFrame","bind","document","getElementById","addEventListener","evt","preventDefault","zoomLevel","GeoJsonLayer","visible","pickable","extruded","wireframe","lineWidthScale","lineWidthMinPixels","getElevation","getFillColor","onDrag","onDragStart","onHover","onDragEnd","updateTriggers","transitions","HeatmapLayer","colorRange","radiusPixels","opacity","getPosition","getWeight","TripsLayer","getPath","path","getTimestamps","timestamps","getColor","mode","getWidth","widthScale","rounded","trailLength","currentTime","PathLayer","noisePath","onKeyDown","onKeyUp","onMouseMove","onMouseUp","onMouseDown","ref","deck","onViewStateChange","_renderLayers","effects","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","asyncRender","reuseMaps","mapboxApiAccessToken","process","mapStyle","blue","preventStyleDiffing","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","a","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","vectorToTransform","vector","styles","container","cursor","anchorSize","bottom","right","AnchorComponent","translation","onMouseEnter","transform","DeleteLocalStorage","Grid","justify","Button","startIcon","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","ProjectionMapping","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","onAnchorMouseUp","isEditMode","newVector","_clearLocalStraoge","localStorage","getItem","removeItem","location","reload","getBoundingClientRect","ls","setItem","removeEventListener","anchorStyle","anchorClassName","MapContainer","_checkKeystone","overflow","Radar","domains","radarData","radarSize","drawerWidth","indicators","refData","viz_type","ref_value","domain","generateData","animation","polygons","fillOpacity","strokeWidth","axes","text","fill","labels","textAnchor","stroke","tickValues","Array","v","items","DownloadRawData","element","createElement","file","Blob","href","createObjectURL","download","body","appendChild","click","downloadTxtFile","size","barChartData","hoverdNode","dataArr","hoveredNode","xType","stackBy","yDomain","tickLabelAngle","onValueMouseOver","refChartData","AreaCalc","radialRadius","hoveredRadial","setHoveredRadial","cellSize","geoGridData","calcAreaObj","gridCellData","typeName","hasOwnProperty","count","area","r","g","valToHex","rgbToHex","radialData","k","calcArea","colorType","innerRadius","radius","getLabel","labelsRadiusMultiplier","labelsStyle","textShadow","showLabels","getAngle","onSeriesMouseOut","padAngle","background","showRadar","Paper","BarChart","override","css","LoadingSpinner","loading","App","ready","flexWrap","maxWidth","inputRoot","labelRoot","labelFocused","SplashScreen","Link","SelectionTarget","_hexToRgb","BaseMap","_toggleOrthoView","componentDidUpdate","mapCenter","_renderSelectionTarget","dirLightSettings","stroked","filled","createdGrid","cellInfo","rightButton","sat","TypesEditor","columns","field","lookup","No","Web","TUI","typesArray","LBCS","NAICS","createtypesArray","useEffect","selectedRow","setSelectedRow","rowColor","setRowColor","item","xs","paging","search","selection","rowStyle","rowData","tableData","onRowClick","row","editable","onRowAdd","newData","Promise","resolve","setTimeout","onRowUpdate","oldData","onRowDelete","deg_to_rad","deg","PI","rad_to_deg","rad","randomProperty","obj","GridMaker","handleGridCreation","grid","gridProps","top_left_lon","parseFloat","top_left_lat","userPrj","projection","cell_size","nrows","ncols","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","rndType","geojsonPolygon","polygon_xy","polygon_ll","ll","gridCreator","CommitGrid","reqResonse","setReqResonse","reduxState","hasGrid","postGridToCityIO","geoGridObj","struct","typesList","geoJsonFeatures","geoGridObject","newTypesList","oldType","prepareData","toLowerCase","requestsList","geoGridURL","geoGridDataURL","cityscopeJSendpoint","reqResonseUI","CenterMapButton","GridProps","formValues","setformValues","handleChangeForm","target","noValidate","autoComplete","TextField","textField","defaultValue","InputProps","inputProps","helperText","EditMenu","GridEditor","EditorMap","createMuiTheme","palette","default","AppRouter","pre","cityscopePrjName","substring","app","Router","ThemeProvider","CssBaseline","Provider","ReactDOM","render"],"mappings":"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","file":"static/js/main.67484b51.chunk.js","sourcesContent":["import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","/**\n * ACTIONS\n */\nexport const GET_CITYIO_DATA = \"GET_CITYIO_DATA\";\nexport function getCityioData(data) {\n    return { type: GET_CITYIO_DATA, data };\n}\n\nexport const LISTEN_TO_MAP_EVENTS = \"LISTEN_TO_MAP_EVENTS\";\nexport function listenToMapEvents(data) {\n    return { type: LISTEN_TO_MAP_EVENTS, data };\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = \"LISTEN_TO_ABM_SLIDERS\";\nexport function listenToSlidersEvents(data) {\n    return { type: LISTEN_TO_ABM_SLIDERS, data };\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = \"LISTEN_TO_ACCESS_TOGGLE\";\nexport function listenToAccessToggle(data) {\n    return { type: LISTEN_TO_ACCESS_TOGGLE, data };\n}\n\nexport const MENU_INTERACTION = \"MENU_INTERACTION\";\nexport function listenToMenuUI(data) {\n    return { type: MENU_INTERACTION, data };\n}\n\nexport const LISTEN_TO_EDIT_MENU = \"LISTEN_TO_EDIT_MENU\";\nexport function listenToEditMenu(data) {\n    return { type: LISTEN_TO_EDIT_MENU, data };\n}\n\nexport const SET_READY_STATE = \"SET_READY_STATE\";\nexport function setReadyState(data) {\n    return { type: SET_READY_STATE, data };\n}\n\nexport const SET_LOADING_STATE = \"SET_LOADING_STATE\";\nexport function setLoadingState(data) {\n    return { type: SET_LOADING_STATE, data };\n}\n\n/**\n * Editor Actions\n */\n\nexport const LISTEN_TO_GRID_CREATOR = \"LISTEN_TO_GRID_CREATOR\";\nexport function listenToGridCreator(data) {\n    return { type: LISTEN_TO_GRID_CREATOR, data };\n}\n\nexport const LISTEN_TO_ROW_EDIT = \"LISTEN_TO_ROW_EDIT\";\nexport function listenToRowEdits(data) {\n    return { type: LISTEN_TO_ROW_EDIT, data };\n}\n\nexport const LISTEN_TO_TYPES_LIST = \"LISTEN_TO_TYPES_LIST\";\nexport function listeonToTypesList(data) {\n    return { type: LISTEN_TO_TYPES_LIST, data };\n}\n\nexport const LISTEN_TO_BASE_MAP_CENTER = \"LISTEN_TO_BASE_MAP_CENTER\";\nexport function listenToBaseMapCenter(data) {\n    return { type: LISTEN_TO_BASE_MAP_CENTER, data };\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    MAP: {},\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.endSimHour,\n        ],\n        speed: settings.map.layers.ABM.animationSpeed,\n    },\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: null,\n    READY: false,\n    LOADING: false,\n\n    /**\n     * ! EDITOR INIT STATE\n     */\n\n    ROW_EDIT: null,\n    BASE_MAP_CENTER: {\n        latCenter: null,\n        lonCenter: null,\n    },\n    TYPES_LIST: null,\n    GRID_CREATED: null,\n};\n\nexport default initialState;\n","import {\n    GET_CITYIO_DATA,\n    MENU_INTERACTION,\n    LISTEN_TO_MAP_EVENTS,\n    LISTEN_TO_ABM_SLIDERS,\n    LISTEN_TO_EDIT_MENU,\n    SET_READY_STATE,\n    SET_LOADING_STATE,\n    LISTEN_TO_ACCESS_TOGGLE,\n    LISTEN_TO_ROW_EDIT,\n    LISTEN_TO_TYPES_LIST,\n    LISTEN_TO_GRID_CREATOR,\n    LISTEN_TO_BASE_MAP_CENTER,\n} from \"./actions\";\nimport initialState from \"./initialState\";\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_CITYIO_DATA:\n            return { ...state, CITYIO: action.data };\n        case MENU_INTERACTION:\n            return { ...state, MENU: action.data };\n        case LISTEN_TO_MAP_EVENTS:\n            return { ...state, MAP: action.data };\n        case LISTEN_TO_ABM_SLIDERS:\n            return { ...state, SLIDERS: action.data };\n        case LISTEN_TO_ACCESS_TOGGLE:\n            return { ...state, ACCESS_TOGGLE: action.data };\n        case LISTEN_TO_EDIT_MENU:\n            return { ...state, SELECTED_TYPE: action.data };\n        case SET_READY_STATE:\n            return { ...state, READY: action.data };\n        case SET_LOADING_STATE:\n            return { ...state, LOADING: action.data };\n\n        //! Editor\n        case LISTEN_TO_ROW_EDIT:\n            return { ...state, ROW_EDIT: action.data };\n\n        case LISTEN_TO_TYPES_LIST:\n            return { ...state, TYPES_LIST: action.data };\n\n        case LISTEN_TO_GRID_CREATOR:\n            return { ...state, GRID_CREATED: action.data };\n\n        case LISTEN_TO_BASE_MAP_CENTER:\n            return { ...state, BASE_MAP_CENTER: action.data };\n\n        default:\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nexport default configureStore;\n","import { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n} from \"../../../redux/actions\";\nimport settings from \"../../../settings/settings.json\";\n\nclass CityIO extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            oldHashs: {},\n            cityIOmodulesData: {},\n        };\n        this.cityioURL = null;\n    }\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    componentDidMount() {\n        this._isMounted = true;\n        this.handleURL();\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    handleURL = () => {\n        if (this.props.tableName === \"mockAPI\") {\n            this.cityioURL = settings.cityIO.mockURL;\n        } else {\n            this.cityioURL = settings.cityIO.baseURL + this.props.tableName;\n        }\n\n        // get the hashes first\n        this.getCityIOHash(this.cityioURL + \"/meta\");\n        // and every interval\n        this.timer = setInterval(() => {\n            if (this._isMounted) {\n                this.getCityIOHash(this.cityioURL + \"/meta\");\n            }\n        }, settings.cityIO.interval);\n        console.log(\n            \"starting cityIO GET interval every \" +\n                settings.cityIO.interval +\n                \"ms \"\n        );\n    };\n\n    /**\n     * returns only the hasees from API\n     */\n    getCityIOHash = (URL) => {\n        axios\n            .get(URL)\n            .then((response) => {\n                this.handleCityIOHashes(response.data);\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    };\n\n    /**\n     * check for updated hashes.\n     * if new hashes exist,\n     * fetch !! WHOLE API (for now)\n     */\n    handleCityIOHashes = (result) => {\n        // if master hash ID has changed (cityIO table state)\n        if (result.id !== this.state.oldHashs.id) {\n            // reset the cityIOmodulesStatus\n            this.setState({ cityIOmodulesStatus: {} });\n\n            // reset the state of this flag\n            this.props.setLoadingState(true);\n\n            // new data in table, get all modules\n            // that are listed in settings\n            settings.cityIO.cityIOmodules.forEach((module) => {\n                // only update modules that have new data\n                if (result.hashes[module] !== this.state.oldHashs[module]) {\n                    // set this module as not ready\n                    this.setNestedState(\"cityIOmodulesStatus\", module, false);\n                    // get the module data from cityIO\n                    this.getCityIOmoduleData(\n                        module,\n                        this.cityioURL + \"/\" + module\n                    );\n                    // update this new module hash in state\n                    this.setNestedState(\n                        \"oldHashs\",\n                        module,\n                        result.hashes[module]\n                    );\n                } else {\n                    // update module name with ok\n                    this.setNestedState(\"cityIOmodulesStatus\", module, true);\n                }\n            });\n            // finally, put to state the hashes master id\n            this.setNestedState(\"oldHashs\", \"id\", result.id);\n        }\n    };\n\n    /**\n     *\n     * Helper function to set nested state\n     */\n\n    setNestedState = (parent, child, data) => {\n        var holder = { ...this.state[parent] };\n        holder[child] = data;\n        this.setState({ [parent]: holder });\n    };\n\n    /**\n     * get each module data\n     */\n    getCityIOmoduleData = (moduleName, URL) => {\n        axios\n            .get(URL)\n            .then((response) => {\n                // put response to state obj\n                this.setNestedState(\n                    \"cityIOmodulesData\",\n                    moduleName,\n                    response.data\n                );\n                console.log(\"...updating module:\", moduleName);\n                this.checkDoneCityIO(moduleName);\n            })\n\n            .catch((error) => {\n                if (error.response) {\n                    console.log(\n                        \"error.response:\",\n                        \"\\n\",\n                        error.response.data,\n                        \"\\n\",\n                        error.response.status,\n                        \"\\n\",\n                        error.response.headers\n                    );\n                } else if (error.request) {\n                    console.log(\"error.request:\", error.request);\n                } else {\n                    console.log(\"misc error:\", error.message);\n                }\n                console.log(\"request config:\", error.config);\n            });\n    };\n\n    checkDoneCityIO = (moduleName) => {\n        this.setNestedState(\"cityIOmodulesStatus\", moduleName, true);\n\n        // check if all modules are done\n        for (const status in this.state.cityIOmodulesStatus) {\n            if (this.state.cityIOmodulesStatus[status] !== true) {\n                // we still need to update some module, stop\n                return;\n            }\n        }\n        //  if so, share the data with the app\n        const data = this.state.cityIOmodulesData;\n        data.tableName = this.props.tableName;\n        // finally, send data to redux\n        this.props.getCityioData(data);\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        this.props.setReadyState(true);\n        this.props.setLoadingState(false);\n    };\n\n    render() {\n        return null;\n    }\n}\n\nconst mapDispatchToProps = {\n    getCityioData: getCityioData,\n    setReadyState: setReadyState,\n    setLoadingState: setLoadingState,\n};\n\nexport default connect(null, mapDispatchToProps)(CityIO);\n","import axios from \"axios\";\n\n/**\n * conver rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n    function valToHex(c) {\n        var hex = c.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n    return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n/**\n * conver hex to rgb array\n */\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n    let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n    return isHex;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n    // get the static grid\n    const GEOGRID = cityioData.GEOGRID;\n    // if GEOGRRIDDATA exist and is the same length as our grid\n    if (\n        cityioData.GEOGRIDDATA &&\n        cityioData.GEOGRIDDATA.length === cityioData.GEOGRID.features.length\n    ) {\n        // get the grid data\n        const GEOGRIDDATA = cityioData.GEOGRIDDATA;\n        // update GEOGRID features from GEOGRIDDATA on cityio\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n            // inject id\n            GEOGRID.features[i].properties.id = i;\n        }\n    }\n    const newGrid = JSON.parse(JSON.stringify(GEOGRID));\n    return newGrid;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (data) => {\n    const accessData = data.access;\n    // get colors from settings\n    let coordinates = accessData.features.map((d) => d.geometry.coordinates);\n    let values = accessData.features.map((d) => d.properties);\n    let heatmap = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        heatmap.push({\n            coordinates: coordinates[i],\n            values: values[i],\n        });\n    }\n    return heatmap;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n    let postURL =\n        \"https://cityio.media.mit.edu/api/table/update/\" + tableName + endPoint;\n\n    const options = {\n        method: \"post\",\n        url: postURL,\n        data: data,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options).catch((error) => {\n        console.log(error);\n\n        console.log(\"ERROR:\", error);\n    });\n};\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { listenToEditMenu } from \"../../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { testHex, hexToRgb } from \"../../BaseMap/BaseMapUtils\";\n\nfunction EditMenu(props) {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            width: 300,\n            zIndex: theme.zIndex.drawer + 1,\n        },\n\n        marginAutoContainer: {\n            width: \"100%\",\n            display: \"flex\",\n        },\n        marginAutoItem: {\n            margin: \"auto\",\n            width: \"80%\",\n        },\n    }));\n\n    const classes = useStyles();\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    let selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const height = selectedType ? selectedType.height : null;\n\n    const marks = [\n        { value: 0, label: \"0 floors\" },\n        { value: 50, label: \"50 floors\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            let col = LanduseTypesList[type].color;\n            if (testHex(col)) {\n                col = hexToRgb(col);\n            }\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n            let typeHasHeightProps = false;\n            if (LanduseTypesList[type].height) {\n                typeHasHeightProps = true;\n            }\n\n            iconsArr.push(\n                <React.Fragment key={Math.random()}>\n                    <Divider\n                        key={Math.random()}\n                        variant=\"inset\"\n                        component=\"li\"\n                        classes={{ root: classes.dividerColor }}\n                    />\n\n                    <ListItem\n                        key={Math.random()}\n                        alignItems=\"flex-start\"\n                        button\n                        variant=\"raised\"\n                        selected={selected}\n                        onClick={(event) =>\n                            handleListItemClick(\n                                event,\n                                type,\n                                LanduseTypesList[type]\n                            )\n                        }\n                        className={classes.list}\n                    >\n                        <ListItemAvatar key={Math.random()}>\n                            <Avatar style={{ backgroundColor: rgbCol }}>\n                                {type.charAt(0)}\n                            </Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            key={Math.random()}\n                            classes={{\n                                primary: classes.listItemPrimaryText,\n                                secondary: classes.listItemSecondaryText,\n                            }}\n                            primary={type}\n                        />\n                    </ListItem>\n\n                    {typeHasHeightProps && (\n                        <div className={classes.marginAutoContainer}>\n                            <div className={classes.marginAutoItem}>\n                                <Collapse in={selected} key={Math.random()}>\n                                    <Slider\n                                        key={Math.random()}\n                                        value={height}\n                                        valueLabelDisplay=\"auto\"\n                                        className={classes.slider}\n                                        onChangeCommitted={(event, value) =>\n                                            dispatch(\n                                                listenToEditMenu({\n                                                    ...selectedType,\n                                                    height: value,\n                                                })\n                                            )\n                                        }\n                                        getAriaLabel={(index) =>\n                                            index.toString()\n                                        }\n                                        min={0}\n                                        max={50}\n                                        marks={marks}\n                                    ></Slider>\n                                </Collapse>\n                            </div>\n                        </div>\n                    )}\n                </React.Fragment>\n            );\n        });\n        return iconsArr;\n    };\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            <List>\n                {createTypesIcons(props.cityioData.GEOGRID.properties.types)}\n            </List>\n        </Drawer>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../../redux/actions\";\n\nfunction ABMSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector((state) => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const handleSetSpeedValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                speed: newValue,\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\",\n        },\n        {\n            value: 21600,\n            label: \"6AM\",\n        },\n        {\n            value: 43200,\n            label: \"12PM\",\n        },\n        {\n            value: 64800,\n            label: \"6PM\",\n        },\n        {\n            value: 86400,\n            label: \"12AM\",\n        },\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Simulation Range\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n            <Typography\n                className={classes.subtitle2}\n                variant=\"subtitle2\"\n                id=\"continuous-slider\"\n                gutterBottom\n            >\n                Simulation Speed\n            </Typography>\n            <Slider\n                min={0}\n                max={100}\n                value={sliders.speed}\n                onChange={handleSetSpeedValue}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"continuous-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ABMSubmenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { listenToAccessToggle } from \"../../../../../redux/actions\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { ContinuousColorLegend } from \"react-vis\";\n\nimport settings from \"../../../../../settings/settings.json\";\n\nfunction AccessSubmenu(props) {\n    const accessToggle = useSelector((state) => state.ACCESS_TOGGLE);\n\n    const { cityioData } = props;\n\n    const ACCESS_PROPERTIES =\n        cityioData && cityioData.access && cityioData.access.properties\n            ? cityioData.access.properties\n            : [];\n\n    const dispatch = useDispatch();\n    const c = settings.map.layers.heatmap.colors;\n    const l = c.length - 1;\n    return (\n        <List>\n            <ListItem>\n                <ContinuousColorLegend\n                    width={500}\n                    startColor={\n                        \"rgb(\" + c[0][0] + \",\" + c[0][1] + \",\" + c[0][2] + \")\"\n                    }\n                    endColor={\n                        \"rgb(\" + c[l][0] + \",\" + c[l][1] + \",\" + c[l][2] + \")\"\n                    }\n                    startTitle=\"No Access\"\n                    endTitle=\"Full Access\"\n                />\n            </ListItem>\n            {ACCESS_PROPERTIES.map((p, i) => (\n                <ListItem key={p}>\n                    <ListItemText\n                        primary={p}\n                        style={{ textTransform: \"capitalize\" }}\n                    />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            checked={accessToggle === i}\n                            onChange={() => {\n                                dispatch(listenToAccessToggle(i));\n                            }}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AccessSubmenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport settings from \"../../../../settings/settings.json\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ABMSubmenu from \"./ABMSubmenu\";\nimport AccessSubmenu from \"./AccessSubmenu\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction TogglesMenu(props) {\n    let drawerWidth = 350;\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            display: \"flex\",\n            paddingLeft: 16,\n            paddingRight: 16,\n            width: drawerWidth,\n            padding: theme.spacing(0, 1),\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const { open, toggleDrawer, handleToggle } = props;\n\n    const { menuState, cityioData } = useSelector((state) => ({\n        menuState: state.MENU,\n        cityioData: state.CITYIO,\n    }));\n\n    const togglesMeta = settings.menu.toggles;\n    const listOfToggles = Object.keys(togglesMeta);\n\n    /**\n     * gets props with initial menu state\n     * and turn on the layer on init\n     */\n    let togglesCompsArray = [];\n    // array of loaded API modules\n    const loadedModules = Object.keys(cityioData);\n    // create each toggle\n    for (let i = 0; i < listOfToggles.length; i++) {\n        // check if the mdoule of this toggle\n        // was loaded on the API\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\n\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\n\n        if (loadedModules.includes(requireModule) || requireModule === false) {\n            const thisToggle = (\n                <div key={listOfToggles[i]}>\n                    <ListItem>\n                        <ListItemText\n                            primary={togglesMeta[listOfToggles[i]].displayName}\n                        />\n                        <ListItemSecondaryAction>\n                            <Switch\n                                edge=\"end\"\n                                onChange={handleToggle(listOfToggles[i])}\n                                checked={checked}\n                            />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"ABM\" && (\n                            <Collapse in={checked} style={{ width: \"100%\" }}>\n                                <ABMSubmenu />\n                            </Collapse>\n                        )\n                    }\n                    {listOfToggles[i] === \"ACCESS\" && (\n                        <Collapse\n                            in={checked}\n                            style={{\n                                width: \"80%\",\n                                marginLeft: 24,\n                            }}\n                        >\n                            <AccessSubmenu cityioData={cityioData} />\n                        </Collapse>\n                    )}\n                </div>\n            );\n            togglesCompsArray.push(thisToggle);\n        }\n    }\n\n    return (\n        <Drawer\n            elevation={3}\n            className={classes.drawer}\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n            BackdropProps={{\n                invisible: true,\n            }}\n            anchor=\"left\"\n            open={open}\n            onClose={toggleDrawer}\n        >\n            <List className={classes.list}>\n                <ListItem>\n                    <Typography variant=\"h6\" gutterBottom>\n                        MIT CityScope\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Toggle layers visibility\n                    </Typography>\n                </ListItem>\n                {togglesCompsArray}\n            </List>\n        </Drawer>\n    );\n}\n\nexport default TogglesMenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Fab from \"@material-ui/core/Fab\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function FABMenu(props) {\n    const useStyles = makeStyles({\n        root: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            position: \"fixed\",\n            paddingLeft: 16,\n            paddingTop: 8,\n            zIndex: 1,\n        },\n    });\n\n    const classes = useStyles();\n\n    const menuState = useSelector((state) => state.MENU);\n    const { handleToggle, toggleDrawer } = props;\n\n    return (\n        <List className={classes.root}>\n            <ListItem>\n                <Tooltip title=\"Open Layer + Settings Menu\">\n                    <Fab color=\"secondary\" onClick={toggleDrawer}>\n                        <MenuIcon />\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Toggle Edit Grid Mode, send to cityIO\">\n                    <Fab color=\"secondary\" onClick={handleToggle(\"EDIT\")}>\n                        {menuState.includes(\"EDIT\") ? (\n                            <CancelIcon style={{ color: \"e91e63\" }} />\n                        ) : (\n                            <EditIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Reset View/Toggle Ortho\">\n                    <Fab color=\"secondary\" onClick={handleToggle(\"RESET_VIEW\")}>\n                        {menuState.includes(\"RESET_VIEW\") ? (\n                            <NavigationIcon />\n                        ) : (\n                            <NearMeIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToMenuUI } from \"../../../redux/actions\";\nimport EditMenu from \"./EditMenu/EditMenu\";\nimport TogglesMenu from \"./TogglesMenu\";\nimport FABMenu from \"./FABMenu\";\n\nfunction MenuContainer() {\n    const menuState = useSelector((state) => state.MENU);\n    const dispatch = useDispatch();\n\n    const [state, setState] = React.useState({\n        drawerOpen: false,\n    });\n\n    const toggleDrawer = () => {\n        setState({ ...state, drawerOpen: !state.drawerOpen });\n    };\n\n    const handleToggle = (value) => () => {\n        const i = menuState.indexOf(value);\n        const updatedMenuState = [...menuState];\n        if (i === -1) {\n            updatedMenuState.push(value);\n        } else {\n            updatedMenuState.splice(i, 1);\n        }\n\n        dispatch(listenToMenuUI(updatedMenuState));\n    };\n\n    const showEditMenu = menuState && menuState.includes(\"EDIT\");\n\n    return (\n        <div>\n            <TogglesMenu\n                open={state.drawerOpen}\n                toggleDrawer={toggleDrawer}\n                handleToggle={handleToggle}\n            />\n            <FABMenu toggleDrawer={toggleDrawer} handleToggle={handleToggle} />\n            {showEditMenu && <EditMenu key={\"EDIT\"} />}\n        </div>\n    );\n}\n\nexport default MenuContainer;\n","import React from \"react\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    return (\n        <div\n            style={{\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                pointerEvents: \"none\",\n                backgroundColor: \"rgba(0,0,0,0.5)\",\n                padding: \"1vw\",\n                color: \"rgba(255,255,255,0.9)\",\n                zIndex: 1,\n                left: mousePos.clientX,\n                top: mousePos.clientY,\n                fontSize: \"0.65em\",\n                fontWeight: 500,\n            }}\n        >\n            <p>\n                Type:\n                {props.hoveredObj.object.properties.name}\n            </p>\n            <p>\n                Floors:\n                {props.hoveredObj.object.properties.height}\n            </p>\n            <p>\n                ID:\n                {props.hoveredObj.object.properties.id}\n            </p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { testHex, hexToRgb } from \"../BaseMapUtils\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \"Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}:\n            </div>\n        </div>\n    );\n};\n","import React, { Component } from \"react\";\nimport { CellMeta } from \"./CellMeta/CellMeta\";\nimport { PaintBrush } from \"./PaintBrush/PaintBrush\";\nimport { connect } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../redux/actions\";\nimport {\n    _proccessAccessData,\n    _proccessGridData,\n    _postMapEditsToCityIO,\n    testHex,\n    hexToRgb,\n} from \"./BaseMapUtils\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { TripsLayer } from \"@deck.gl/geo-layers\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { HeatmapLayer, PathLayer, GeoJsonLayer } from \"deck.gl\";\nimport { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\nimport settings from \"../../../settings/settings.json\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            menu: [],\n            cityioData: null,\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n        this.animationFrame = null;\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n        // setup sun effects\n        this._setupEffects();\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    /**\n     * handels events as they derived from redux props\n     */\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.menu !== prevState.menu) {\n            this.setState({ menu: this.props.menu });\n        }\n\n        const { cityioData } = this.props;\n        if (prevState.cityioData !== cityioData) {\n            // get cityio data from props\n\n            this.setState({\n                cityioData: cityioData,\n                GEOGRID: _proccessGridData(cityioData),\n            });\n\n            // ! workaround for preloading access layer data\n            if (cityioData.access) {\n                this.setState({ access: _proccessAccessData(cityioData) });\n            }\n        }\n\n        // toggle ABM animation\n        if (\n            !prevProps.menu.includes(\"ABM\") &&\n            this.props.menu.includes(\"ABM\")\n        ) {\n            this.setState({ animateABM: true });\n        } else if (\n            prevProps.menu.includes(\"ABM\") &&\n            !this.props.menu.includes(\"ABM\")\n        ) {\n            this.setState({ animateABM: false });\n        }\n\n        // toggle rotate animation\n        if (\n            !prevProps.menu.includes(\"ROTATE\") &&\n            this.props.menu.includes(\"ROTATE\")\n        ) {\n            this.setState({ animateCamera: true });\n        } else if (\n            prevProps.menu.includes(\"ROTATE\") &&\n            !this.props.menu.includes(\"ROTATE\")\n        ) {\n            this.setState({ animateCamera: false });\n        }\n        if (\n            !prevProps.menu.includes(\"SHADOWS\") &&\n            this.props.menu.includes(\"SHADOWS\")\n        ) {\n            this._effects[0].shadowColor = [0, 0, 0, 0.5];\n        }\n\n        if (\n            prevProps.menu.includes(\"SHADOWS\") &&\n            !this.props.menu.includes(\"SHADOWS\")\n        ) {\n            this._effects[0].shadowColor = [0, 0, 0, 0];\n        }\n        //  toggle edit mode and send to cityio\n        if (\n            prevProps.menu.includes(\"EDIT\") &&\n            !this.props.menu.includes(\"EDIT\")\n        ) {\n            // take props from grid and send\n            let dataProps = [];\n            for (let i = 0; i < this.state.GEOGRID.features.length; i++) {\n                dataProps[i] = this.state.GEOGRID.features[i].properties;\n            }\n            _postMapEditsToCityIO(\n                dataProps,\n                cityioData.tableName,\n                \"/GEOGRIDDATA\"\n            );\n        }\n\n        // toggle reset view mode\n        if (\n            !prevProps.menu.includes(\"RESET_VIEW\") &&\n            this.props.menu.includes(\"RESET_VIEW\")\n        ) {\n            this._setViewStateToTableHeader();\n        } else if (\n            prevProps.menu.includes(\"RESET_VIEW\") &&\n            !this.props.menu.includes(\"RESET_VIEW\")\n        ) {\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    pitch: 45,\n                },\n            });\n        }\n    }\n\n    _onViewStateChange = ({ viewState }) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n\n        this.setState({ viewState });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        const header = this.props.cityioData.GEOGRID.properties.header;\n\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                longitude: header.longitude,\n                latitude: header.latitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 360 - header.rotation,\n                orthographic: true,\n            },\n        });\n    }\n\n    _setupEffects() {\n        const ambientLight = new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 0.85,\n        });\n        let dirLightSettings = {\n            timestamp: 1554927200000,\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n        const dirLight = new _SunLight(dirLightSettings);\n        const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n        lightingEffect.shadowColor = [0, 0, 0, 0.5];\n        this._effects = [lightingEffect];\n    }\n\n    _animate() {\n        if (this.state.animateCamera) {\n            let bearing = this.state.viewState.bearing\n                ? this.state.viewState.bearing\n                : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    bearing: bearing,\n                },\n            });\n        }\n\n        if (this.state.animateABM) {\n            const time = this.props.sliders.time[1];\n            const speed = this.props.sliders.speed;\n            const startHour = this.props.sliders.time[0];\n            const endHour = this.props.sliders.time[2];\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n            var currentDateMidnight = new Date();\n            currentDateMidnight.setHours(0, 0, 0, 0);\n            var date = new Date(currentDateMidnight.getTime() + t * 1000);\n            this._effects[0].directionalLights[0].timestamp = Date.UTC(\n                date.getFullYear(),\n                date.getMonth(),\n                date.getDay(),\n                date.getHours(),\n                date.getMinutes(),\n                date.getSeconds()\n            );\n            this.props.listenToSlidersEvents({\n                ...this.props.sliders,\n                time: [\n                    this.props.sliders.time[0],\n                    t,\n                    this.props.sliders.time[2],\n                ],\n            });\n        }\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        const { selectedType } = this.props;\n        const { height, color, name } = selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n        multiSelectedObj.forEach((selected) => {\n            const thisCellProps = selected.object.properties;\n            if (thisCellProps && thisCellProps.interactive) {\n                thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n                thisCellProps.height = height;\n                thisCellProps.name = name;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderPaintBrush = () => {\n        if (this.props.menu.includes(\"EDIT\")) {\n            return (\n                this.props.selectedType && (\n                    <PaintBrush\n                        mousePos={this.state.mousePos}\n                        selectedType={this.props.selectedType}\n                        divSize={this.state.pickingRadius}\n                        mouseDown={this.state.mouseDown}\n                        hoveredCells={this.state.hoveredObj}\n                    />\n                )\n            );\n        } else {\n            return (\n                this.state.hoveredObj && (\n                    <CellMeta\n                        mousePos={this.state.mousePos}\n                        hoveredObj={this.state.hoveredObj}\n                    />\n                )\n            );\n        }\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * remap line width\n     */\n    _remapValues = (value) => {\n        let remap =\n            value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n        return remap;\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        const zoomLevel = this.state.viewState.zoom;\n        const { cityioData, selectedType, menu } = this.props;\n        let layers = [];\n\n        if (menu.includes(\"GRID\")) {\n            layers.push(\n                new GeoJsonLayer({\n                    id: \"GRID\",\n                    data: this.state.GEOGRID,\n                    visible: menu.includes(\"GRID\") ? true : false,\n                    pickable: true,\n                    extruded: true,\n                    wireframe: true,\n                    lineWidthScale: 1,\n                    lineWidthMinPixels: 2,\n                    getElevation: (d) => d.properties.height,\n                    getFillColor: (d) => d.properties.color,\n\n                    onClick: (event) => {\n                        if (\n                            selectedType &&\n                            menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        )\n                            this._handleGridcellEditing(event);\n                    },\n\n                    onDrag: (event) => {\n                        if (\n                            selectedType &&\n                            menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        )\n                            this._handleGridcellEditing(event);\n                    },\n\n                    onDragStart: () => {\n                        if (\n                            selectedType &&\n                            menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        ) {\n                            this.setState({ draggingWhileEditing: true });\n                        }\n                    },\n\n                    onHover: (e) => {\n                        if (e.object) {\n                            this.setState({ hoveredObj: e });\n                        }\n                    },\n\n                    onDragEnd: () => {\n                        this.setState({ draggingWhileEditing: false });\n                    },\n                    updateTriggers: {\n                        getFillColor: this.state.selectedCellsState,\n                        getElevation: this.state.selectedCellsState,\n                    },\n                    transitions: {\n                        getFillColor: 500,\n                        getElevation: 500,\n                    },\n                })\n            );\n        }\n\n        if (menu.includes(\"ACCESS\")) {\n            layers.push(\n                new HeatmapLayer({\n                    id: \"ACCESS\",\n                    visible: menu.includes(\"ACCESS\"),\n                    colorRange: settings.map.layers.heatmap.colors,\n                    radiusPixels: 200,\n                    opacity: 0.25,\n                    data: this.state.access,\n                    getPosition: (d) => d.coordinates,\n                    getWeight: (d) => d.values[this.props.accessToggle],\n                    updateTriggers: {\n                        getWeight: [this.props.accessToggle],\n                    },\n                })\n            );\n        }\n\n        if (menu.includes(\"ABM\")) {\n            layers.push(\n                new TripsLayer({\n                    id: \"ABM\",\n                    visible: menu.includes(\"ABM\") ? true : false,\n                    data: cityioData.ABM,\n                    getPath: (d) => d.path,\n                    getTimestamps: (d) => d.timestamps,\n                    getColor: (d) => {\n                        //switch between modes or types of users\n                        switch (d.mode[0]) {\n                            case 0:\n                                return [228, 26, 28];\n                            case 1:\n                                return [55, 126, 184];\n                            case 2:\n                                return [77, 175, 74];\n                            case 3:\n                                return [255, 255, 51];\n                            case 4:\n                                return [152, 78, 163];\n                            case 5:\n                                return [255, 127, 0];\n                            default:\n                                return [255, 255, 255];\n                        }\n                    },\n                    getWidth: 1,\n                    widthScale: this._remapValues(zoomLevel),\n                    opacity: 0.8,\n                    rounded: true,\n                    trailLength: 500,\n                    currentTime: this.props.sliders.time[1],\n                })\n            );\n        }\n\n        if (menu.includes(\"AGGREGATED_TRIPS\")) {\n            layers.push(\n                new PathLayer({\n                    id: \"AGGREGATED_TRIPS\",\n                    visible: menu.includes(\"AGGREGATED_TRIPS\") ? true : false,\n                    _shadow: false,\n                    data: cityioData.ABM,\n                    getPath: (d) => {\n                        const noisePath =\n                            Math.random() < 0.5\n                                ? Math.random() * 0.00005\n                                : Math.random() * -0.00005;\n                        for (let i in d.path) {\n                            d.path[i][0] = d.path[i][0] + noisePath;\n                            d.path[i][1] = d.path[i][1] + noisePath;\n                            d.path[i][2] = d.mode[0] * 2;\n                        }\n                        return d.path;\n                    },\n                    getColor: (d) => {\n                        switch (d.mode[0]) {\n                            case 0:\n                                return [228, 26, 28];\n                            case 1:\n                                return [55, 126, 184];\n                            case 2:\n                                return [77, 175, 74];\n                            case 3:\n                                return [255, 255, 51];\n                            case 4:\n                                return [152, 78, 163];\n                            case 5:\n                                return [255, 127, 0];\n                            default:\n                                return [255, 255, 255];\n                        }\n                    },\n                    opacity: 0.2,\n                    getWidth: 1.5,\n                })\n            );\n        }\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                <React.Fragment>{this._renderPaintBrush()}</React.Fragment>\n\n                <DeckGL\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    effects={this._effects}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        asyncRender={false}\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.blue}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        sliders: state.SLIDERS,\n        menu: state.MENU,\n        accessToggle: state.ACCESS_TOGGLE,\n        selectedType: state.SELECTED_TYPE,\n    };\n};\n\nconst mapDispatchToProps = {\n    listenToSlidersEvents: listenToSlidersEvents,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);\n","import { Matrix3d, RectPoints, Vector } from \"./ProjectionMapping\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1,\n    ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./ProjectionMapping\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 30;\nconst halfAnchor = anchorSize / 2;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"4px solid white\",\n        cursor: \"move\",\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor,\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor,\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor,\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor,\n    },\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {},\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={(evt) => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation),\n        }}\n    />\n);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        top: \"50vh\",\n        zIndex: 1000\n    }\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\nimport DeleteLocalStorage from \"./deleteLocalStorage\";\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport class ProjectionMapping extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n        // if entered keystone mode\n        if (!prevProps.isEditMode && this.props.isEditMode) {\n            // if found prev. keystone data\n            if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }\n            // if left keystone mode\n        } else if (prevProps.isEditMode && !this.props.isEditMode) {\n            console.log(\"saving edited projMap...\");\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n    _clearLocalStraoge = () => {\n        if (localStorage.getItem(\"projMap\")) {\n            localStorage.removeItem(\"projMap\");\n        }\n        window.location.reload();\n    };\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <React.Fragment>\n                {isEditMode && (\n                    <div onClick={() => this._clearLocalStraoge()}>\n                        <DeleteLocalStorage />\n                    </div>\n                )}\n\n                <div\n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport BaseMap from \"./BaseMap\";\nimport { connect } from \"react-redux\";\nimport { ProjectionMapping } from \"../ProjectionMapping/ProjectionMapping\";\n\nclass MapContainer extends Component {\n    _checkKeystone = () => {\n        return this.props.menu.includes(\"KEYSTONE\") ? true : false;\n    };\n\n    render() {\n        return (\n            <div\n                style={{\n                    height: \"100vh\",\n                    width: \"100vw\",\n                    overflow: \"hidden\",\n                }}\n            >\n                <ProjectionMapping\n                    style={{\n                        height: \"100vh\",\n                        width: \"100vw\",\n                    }}\n                    isEditMode={this._checkKeystone()}\n                >\n                    <BaseMap\n                        menu={this.props.menu}\n                        selectedType={this.props.selectedType}\n                    />\n                </ProjectionMapping>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        menu: state.MENU,\n        selectedType: state.SELECTED_TYPE,\n    };\n};\n\nexport default connect(mapStateToProps, null)(MapContainer);\n","import React, { Component } from \"react\";\nimport { CircularGridLines, RadarChart } from \"react-vis\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\nimport \"./Radar.css\";\nimport { DiscreteColorLegend } from \"react-vis\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            domains: [],\n            radarData: [],\n        };\n        this.radarSize = this.props.drawerWidth - 50;\n\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n        let radarData = {};\n        let refData = {};\n        let domains = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"radar\") {\n                radarData[indicators[i].name] = [indicators[i].value];\n                refData[indicators[i].name] = [indicators[i].ref_value];\n                indicators[i].domain = [0, 1];\n                domains.push(indicators[i]);\n            }\n        }\n        this.setState({ radarData: [radarData, refData], domains: domains });\n    }\n\n    componentDidMount() {\n        this.setState({ indicators: this.props.indicators });\n        this.generateData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.setState({ indicators: this.props.indicators });\n            console.log(\"new radar data..\");\n            this.generateData();\n        }\n    }\n\n    render() {\n        if (this.props.cityioData.indicators) {\n            return (\n                <div>\n                    <RadarChart\n                        className=\"Radar blur\"\n                        animation\n                        data={this.state.radarData}\n                        domains={this.state.domains}\n                        colorRange={this.colorRange}\n                        style={{\n                            polygons: {\n                                fillOpacity: 0.2,\n                                strokeWidth: 2,\n                            },\n                            axes: {\n                                text: {\n                                    opacity: 0,\n                                    fontWeight: 700,\n                                    fill: \"white\",\n                                },\n                                strokeWidth: 0,\n                            },\n                            labels: {\n                                textAnchor: \"middle\",\n                                fontSize: 10,\n                                fill: \"white\",\n                            },\n                        }}\n                        margin={{\n                            left: this.radarSize / 6,\n                            top: this.radarSize / 6,\n                            bottom: this.radarSize / 6,\n                            right: this.radarSize / 6,\n                        }}\n                        width={this.radarSize}\n                        height={this.radarSize}\n                    >\n                        <CircularGridLines\n                            style={{\n                                fill: \"white\",\n                                fillOpacity: 0.1,\n                                backgroundColor: \"#FFF\",\n                                opacity: 0.5,\n                                stroke: \"white\",\n                                width: 0.1,\n                            }}\n                            tickValues={[...new Array(11)].map(\n                                (v, i) => i / 10 - 1\n                            )}\n                        />\n                    </RadarChart>\n\n                    <DiscreteColorLegend\n                        items={[\"Design\", \"Reference\"]}\n                        colors={this.colorRange}\n                    />\n                </div>\n            );\n        } else return null;\n    }\n}\n\nexport default Radar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst downloadTxtFile = (props) => {\n    let data = JSON.stringify(props);\n    const element = document.createElement(\"a\");\n    const file = new Blob([data], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"data.json\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n};\n\nexport default function DownloadRawData(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Button\n                onClick={() => {\n                    downloadTxtFile(props);\n                }}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<SaveIcon />}\n            >\n                {props.title}\n            </Button>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalBarSeries,\n} from \"react-vis\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            barChartData: null,\n            hoverdNode: null,\n        };\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    componentDidMount() {\n        this.generateData();\n    }\n\n    /**\n   data format \n    [\n    { x: 2, y: 10 },\n    { x: 4, y: 5 },\n    { x: 12, y: 15 },\n    ]\n     */\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n\n        let dataArr = [];\n        // let refDataArr = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"bar\") {\n                dataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].value,\n                });\n\n                // refDataArr.push({\n                //     x: indicators[i].name,\n                //     y: indicators[i].ref_value,\n                // });\n            }\n        }\n\n        this.setState({\n            barChartData: dataArr,\n            // refChartData: refDataArr\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.generateData();\n        }\n    }\n\n    render() {\n        const { hoveredNode } = this.state;\n\n        return (\n            <>\n                {this.state.barChartData && (\n                    <div>\n                        {hoveredNode && (\n                            <Typography gutterBottom>\n                                {hoveredNode.x} : {hoveredNode.y}\n                            </Typography>\n                        )}\n\n                        <FlexibleWidthXYPlot\n                            opacity={0.2}\n                            xType=\"ordinal\"\n                            width={this.props.drawerWidth - 50}\n                            height={this.props.drawerWidth - 50}\n                            stackBy=\"y\"\n                            yDomain={[0, 1]}\n                        >\n                            <XAxis\n                                style={{\n                                    text: {\n                                        fill: \"#FFF\",\n                                    },\n                                }}\n                                tickLabelAngle={90}\n                            />\n                            <YAxis style={{ text: { fill: \"#FFF\" } }} />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.barChartData}\n                            />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.refChartData}\n                            />\n                        </FlexibleWidthXYPlot>\n\n                        <DownloadRawData\n                            data={this.props.cityioData.indicators}\n                            title={\"radar & bars data\"}\n                        />\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nexport default Radar;\n","import React, { useState } from \"react\";\nimport { rgbToHex } from \"../../BaseMap/BaseMapUtils\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function AreaCalc(props) {\n    const radialRadius = props.drawerWidth - 100;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    const useStyles = makeStyles((theme) => ({\n        list: {\n            width: props.drawerWidth - 50,\n        },\n    }));\n\n    const classes = useStyles();\n\n    const calcArea = () => {\n        let gridProps = props.cityioData.GEOGRID.properties;\n        let cellSize = gridProps.header.cellSize;\n        let geoGridData = props.cityioData.GEOGRIDDATA;\n        let calcAreaObj = {};\n        geoGridData.forEach((gridCellData) => {\n            let typeName = gridCellData.name;\n            if (\n                //    if this type is not null\n                gridCellData.name !== \"None\"\n            ) {\n                if (calcAreaObj.hasOwnProperty(typeName)) {\n                    calcAreaObj[typeName].count =\n                        calcAreaObj[typeName].count + 1;\n                    // avoid landuse with no height\n                    let height =\n                        gridCellData.height < 1 ? 1 : gridCellData.height;\n                    calcAreaObj[typeName].area =\n                        calcAreaObj[typeName].area + height * cellSize;\n                } else {\n                    calcAreaObj[typeName] = {};\n                    calcAreaObj[typeName].area = 0;\n                    calcAreaObj[typeName].count = 0;\n                    calcAreaObj[typeName].name = typeName;\n                    calcAreaObj[typeName].color = rgbToHex(\n                        gridCellData.color[0],\n                        gridCellData.color[1],\n                        gridCellData.color[2]\n                    );\n                }\n            }\n        });\n        //  convert to react-vis happy data format\n        let radialData = [];\n        for (const k in calcAreaObj) {\n            radialData.push(calcAreaObj[k]);\n        }\n\n        let data = {\n            children: radialData,\n            color: 1,\n        };\n        return data;\n    };\n\n    const data = calcArea();\n\n    return (\n        <List className={classes.list}>\n            <ListItem>\n                {hoveredRadial.name ? (\n                    <Typography gutterBottom>\n                        {hoveredRadial.name}: {hoveredRadial.area} sqm\n                    </Typography>\n                ) : (\n                    <Typography gutterBottom>Hover on chart...</Typography>\n                )}\n            </ListItem>\n\n            <ListItem>\n                <RadialChart\n                    colorType=\"literal\"\n                    animation={true}\n                    className={\"donut-chart-example\"}\n                    innerRadius={radialRadius / 2 - radialRadius / 5}\n                    radius={radialRadius / 2}\n                    getLabel={(d) => d.name}\n                    labelsRadiusMultiplier={0.95}\n                    labelsStyle={{\n                        textAnchor: \"middle\",\n\n                        fontSize: 11,\n                        fill: \"#FFF\",\n                        textShadow: \"2px 2px 2px #000\",\n                    }}\n                    showLabels\n                    getAngle={(d) => d.area}\n                    data={data.children}\n                    onValueMouseOver={(evt) => setHoveredRadial(evt)}\n                    onSeriesMouseOut={() => setHoveredRadial(false)}\n                    width={radialRadius}\n                    height={radialRadius}\n                    padAngle={0.01}\n                >\n                    {hoveredRadial !== false && (\n                        <Hint value={hoveredRadial}>\n                            <div\n                                style={{\n                                    background: \"rgba(0,0,0,0.8)\",\n                                    fontSize: 14,\n                                }}\n                            >\n                                <Typography variant={\"caption\"} gutterBottom>\n                                    Area: {hoveredRadial.area} sqm\n                                </Typography>\n                            </div>\n                        </Hint>\n                    )}\n                </RadialChart>\n            </ListItem>\n\n            <ListItem>\n                <DownloadRawData data={data.children} title={\"area data\"} />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Radar from \"./Radar/Radar\";\nimport BarChart from \"./BarChart/BarChart\";\nimport AreaCalc from \"./AreaCalc/AreaCalc\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction VisContainer(props) {\n    const drawerWidth = 450;\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n            display: \"flex\",\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const showRadar = props.menu && props.menu.includes(\"RADAR\");\n\n    return (\n        <React.Fragment>\n            {showRadar && (\n                <Drawer\n                    variant=\"persistent\"\n                    anchor=\"right\"\n                    open={true}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <List className={classes.list}>\n                        <ListItem>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Urban Indicators\n                            </Typography>\n                        </ListItem>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <Radar\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <BarChart\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <AreaCalc\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n                    </List>\n                </Drawer>\n            )}\n        </React.Fragment>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        menu: state.MENU,\n    };\n};\n\nexport default connect(mapStateToProps, null)(VisContainer);\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { useSelector } from \"react-redux\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: none;\n`;\n\nfunction LoadingSpinner() {\n    const loading = useSelector((state) => state.LOADING);\n    return (\n        <div\n            style={{\n                position: \"fixed\",\n                bottom: 50,\n                right: 50,\n                zIndex: 1,\n            }}\n        >\n            <PulseLoader\n                css={override}\n                size={20}\n                color=\"white\"\n                loading={loading}\n            />\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CityIO from \"./CityIO/cityIO\";\nimport MenuContainer from \"./MenuContainer/MenuContainer\";\nimport MapContainer from \"./BaseMap/BaseMapContainer\";\nimport VisContainer from \"./VisContainer/VisContainer\";\nimport LoadingSpinner from \"./CityIO/LoadingSpinner\";\n\nexport default function App(props) {\n    // wait for 'ready' flag from cityIO when app is ready to start\n    const ready = useSelector((state) => state.READY);\n    // get the table name for cityIO comp\n    const { tableName } = props;\n\n    return (\n        <>\n            <CityIO tableName={tableName} />\n            {/* if ready, render the app*/}\n            {ready && (\n                <>\n                    <MenuContainer />\n                    <MapContainer />\n                    <VisContainer />\n                </>\n            )}\n            <LoadingSpinner />\n        </>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Button from \"@material-ui/core/Button\";\nimport Link from \"@material-ui/core/Link\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        margin: \"auto\",\n        padding: theme.spacing(2),\n        width: \"100%\",\n        maxWidth: \"50%\",\n    },\n\n    inputRoot: {\n        fontSize: 40,\n    },\n    labelRoot: {\n        fontSize: 30,\n        color: \"white\",\n        \"&$labelFocused\": {\n            color: \"white\",\n        },\n    },\n    labelFocused: {\n        fontSize: 15,\n    },\n}));\n\nexport default function SplashScreen() {\n    const classes = useStyles();\n\n    return (\n        <>\n            <div className={classes.root}>\n                <Typography variant=\"h2\" gutterBottom>\n                    CityScopeJS\n                </Typography>\n\n                <div>\n                    <Link href=\"https://github.com/CityScope/CS_cityscopeJS\">\n                        {\"\"}\n                        <Button color=\"default\">\n                            <GitHubIcon />\n                        </Button>\n                    </Link>\n                </div>\n\n                <Typography variant=\"h5\" gutterBottom>\n                    CityScopeJS is a unified front-end for MIT CityScope\n                    project, an open-source urban modeling and simulation\n                    platform. CityScopeJS allows users to examine different\n                    urban-design alternatives, and observe their impact through\n                    multiple layers of urban analytics modules, such as economy,\n                    traffic and ABM simulation, urban access, storm-water, noise\n                    and more.\n                </Typography>\n            </div>\n        </>\n    );\n}\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport default function SelectionTarget(props) {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n    const selectedType = props.selectedType;\n    const divSize = props.divSize;\n\n    const colorTrans =\n        \"rgba(\" +\n        selectedType.color[0] +\n        \",\" +\n        selectedType.color[1] +\n        \",\" +\n        selectedType.color[2] +\n        \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: selectedType.color,\n                color: selectedType.color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\",\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport EditorBrush from \"./EditorBrush\";\nimport { connect } from \"react-redux\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\nimport settings from \"../GridEditorSettings.json\";\nimport { listenToBaseMapCenter } from \"../../../redux/actions\";\n\nexport const _hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n};\n\nclass BaseMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 12),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n        // setup sun effects\n        this._setupEffects();\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n    }\n\n    _toggleOrthoView = (viewState) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n    };\n\n    _onViewStateChange = ({ viewState }) => {\n        this.setState({ viewState });\n    };\n\n    componentDidUpdate = (prevProps) => {\n        if (this.props.mapCenter !== prevProps.mapCenter)\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    latitude: this.props.mapCenter.latCenter,\n                    longitude: this.props.mapCenter.lonCenter,\n                    pitch: 0,\n                    bearing: 0,\n                    orthographic: false,\n                },\n            });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                latitude: settings.GEOGRID.properties.header.latitude,\n                longitude: settings.GEOGRID.properties.header.longitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 0,\n                orthographic: true,\n            },\n        });\n    }\n\n    _setupEffects() {\n        const ambientLight = new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 0.85,\n        });\n        const dirLight = new _SunLight(this.dirLightSettings);\n        const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n        lightingEffect.shadowColor = [0, 0, 0, 0.5];\n        this._effects = [lightingEffect];\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        if (!this.props.selectedType) return;\n        const { height, name, color, interactive } = this.props.selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n\n        multiSelectedObj.forEach((selected) => {\n            let thisCellProps = selected.object.properties;\n            thisCellProps.color = _hexToRgb(color);\n            thisCellProps.height = parseInt(height);\n            thisCellProps.name = name;\n            if (interactive !== \"No\") {\n                thisCellProps.interactive = interactive;\n            } else {\n                delete thisCellProps.interactive;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        return (\n            this.props.selectedType && (\n                <EditorBrush\n                    mousePos={this.state.mousePos}\n                    selectedType={this.props.selectedType}\n                    divSize={this.state.pickingRadius}\n                    mouseDown={this.state.mouseDown}\n                />\n            )\n        );\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        let layers = [];\n        layers.push(\n            new GeoJsonLayer({\n                id: \"GRID\",\n                opacity: 0.5,\n                stroked: false,\n                filled: true,\n                wireframe: true,\n                data: this.props.createdGrid,\n                visible: true,\n                pickable: true,\n                extruded: true,\n                lineWidthScale: 1,\n                lineWidthMinPixels: 1,\n                getElevation: (d) => d.properties.height,\n                getFillColor: (d) => d.properties.color,\n\n                onClick: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n\n                onDrag: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n                onDragStart: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    ) {\n                        this.setState({ draggingWhileEditing: true });\n                    }\n                },\n                onDragEnd: () => {\n                    this.setState({ draggingWhileEditing: false });\n                },\n                updateTriggers: {\n                    getFillColor: this.state.selectedCellsState,\n                    getElevation: this.state.selectedCellsState,\n                },\n                transitions: {\n                    getFillColor: 500,\n                    getElevation: 500,\n                },\n            })\n        );\n\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {this._renderSelectionTarget()}\n\n                <DeckGL\n                    // sets the cursor on paint\n                    // getCursor={() => \"none\"}\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    effects={this._effects}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.sat}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    listenToBaseMapCenter: listenToBaseMapCenter,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedType: state.ROW_EDIT,\n        mapCenter: state.BASE_MAP_CENTER,\n        createdGrid: state.GRID_CREATED,\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap);\n","import MaterialTable from \"material-table\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport {\n    listenToRowEdits,\n    listeonToTypesList,\n} from \"../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport settings from \"../../GridEditorSettings.json\";\n\nexport default function TypesEditor() {\n    const createtypesArray = (LanduseTypesList) => {\n        let typesArray = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            typesArray.push({\n                name: type,\n                color: LanduseTypesList[type].color,\n                height: LanduseTypesList[type].height\n                    ? LanduseTypesList[type].height\n                    : null,\n                LBCS: JSON.stringify(LanduseTypesList[type].LBCS),\n                NAICS: JSON.stringify(LanduseTypesList[type].NAICS),\n                interactive: LanduseTypesList[type].interactive,\n            });\n        });\n        return typesArray;\n    };\n\n    const [state, setState] = React.useState({\n        columns: [\n            { title: \"Type\", field: \"name\" },\n            { title: \"Height\", field: \"height\", type: \"numeric\" },\n            {\n                title: \"Interactive\",\n                field: \"interactive\",\n                lookup: { No: \"No\", Web: \"Web\", TUI: \"TUI\" },\n            },\n            { title: \"Color\", field: \"color\", type: \"string\" },\n            { title: \"LBCS\", field: \"LBCS\", type: \"string\" },\n            { title: \"NAICS\", field: \"NAICS\", type: \"string\" },\n        ],\n        data: createtypesArray(settings.GEOGRID.properties.types),\n    });\n    // redux the type list on every change\n    useEffect(() => {\n        dispatch(listeonToTypesList(state.data));\n    });\n    const dispatch = useDispatch();\n    const [selectedRow, setSelectedRow] = useState(null);\n    const [rowColor, setRowColor] = useState(null);\n\n    return (\n        <div style={{ maxWidth: \"100%\" }}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <MaterialTable\n                        title=\"Types Editor\"\n                        columns={state.columns}\n                        data={state.data}\n                        options={{\n                            paging: false,\n                            search: false,\n                            selection: false,\n                            rowStyle: (rowData) => ({\n                                backgroundColor:\n                                    selectedRow === rowData.tableData.id\n                                        ? rowColor\n                                        : null,\n                            }),\n                        }}\n                        onRowClick={(evt, row) => {\n                            setSelectedRow(row.tableData.id);\n                            setRowColor(row.color);\n                            dispatch(listenToRowEdits(row));\n                        }}\n                        editable={{\n                            onRowAdd: (newData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data.push(newData);\n                                            return { ...prevState, data };\n                                        });\n                                    }, 600);\n                                }),\n                            onRowUpdate: (newData, oldData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        if (oldData) {\n                                            setState((prevState) => {\n                                                const data = [\n                                                    ...prevState.data,\n                                                ];\n                                                data[\n                                                    data.indexOf(oldData)\n                                                ] = newData;\n\n                                                return { ...prevState, data };\n                                            });\n                                        }\n\n                                        // dispath change to redux\n                                        dispatch(listenToRowEdits(newData));\n                                    }, 600);\n                                }),\n                            onRowDelete: (oldData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data.splice(\n                                                data.indexOf(oldData),\n                                                1\n                                            );\n                                            return { ...prevState, data };\n                                        });\n                                    }, 600);\n                                }),\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import proj4 from \"proj4\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport { _hexToRgb } from \"../../../EditorMap/EditorMap\";\n\nfunction deg_to_rad(deg) {\n    return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n    return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n    var keys = Object.keys(obj);\n    return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps) => {\n    let top_left_lon = parseFloat(gridProps.longitude);\n    let top_left_lat = parseFloat(gridProps.latitude);\n    let rotation = parseFloat(gridProps.rotation);\n    let userPrj = gridProps.projection;\n    let cell_size = parseFloat(gridProps.cellSize);\n    let nrows = parseFloat(gridProps.nrows);\n    let ncols = parseFloat(gridProps.ncols);\n\n    const webMercator = proj4.defs(\"EPSG:4326\");\n    let EARTH_RADIUS_M = 6.371e6;\n    let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n    let bearing = (90 - rotation + 360) % 360;\n    let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n    let la1 = deg_to_rad(top_left_lon_lat.lat);\n    let lo1 = deg_to_rad(top_left_lon_lat.lon);\n    let bearing_rad = deg_to_rad(bearing);\n    let la2 = Math.asin(\n        Math.sin(la1) * Math.cos(Ad) +\n            Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n    );\n    let lo2 =\n        lo1 +\n        Math.atan2(\n            Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n            Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n        );\n    let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n    let top_left_xy = proj4(webMercator, userPrj, [\n        top_left_lon_lat.lon,\n        top_left_lon_lat.lat,\n    ]);\n\n    let top_right_xy = proj4(webMercator, userPrj, [\n        top_right_lon_lat.lon,\n        top_right_lon_lat.lat,\n    ]);\n\n    let dydx =\n        (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n    let theta = Math.atan(dydx);\n    let cosTheta = Math.cos(theta);\n    let sinTheta = Math.sin(theta);\n    // create rotate matrix\n    let x_unRot = [];\n    let y_unRot = [];\n    for (let i = 0; i < nrows; i++) {\n        for (let j = 0; j < ncols; j++) {\n            x_unRot.push(j * cell_size);\n            y_unRot.push(-i * cell_size);\n        }\n    }\n\n    let x_rot = [];\n    let y_rot = [];\n    for (let i = 0; i < x_unRot.length; i++) {\n        x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n        y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n    }\n\n    let x_rot_trans = [];\n    let y_rot_trans = [];\n    for (let i = 0; i < x_rot.length; i++) {\n        x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n        y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n    }\n\n    var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n    var dydCol = y_rot_trans[1] - y_rot_trans[0];\n    var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n    var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n    let gridPnts = [];\n    let geojsonFeatureCollection = {\n        type: \"FeatureCollection\",\n        // polygons go here\n        features: [],\n    };\n\n    let types = settings.GEOGRID.properties.types;\n\n    for (let i = 0; i < x_rot_trans.length; i++) {\n        let rndType = randomProperty(types);\n\n        let geojsonPolygon = {\n            type: \"Feature\",\n            geometry: {\n                type: \"Polygon\",\n                coordinates: null,\n            },\n            properties: {\n                color: _hexToRgb(rndType.color),\n                height: rndType.height,\n                name: rndType.name,\n                interactive: rndType.interactive,\n            },\n        };\n\n        var polygon_xy = [\n            [x_rot_trans[i], y_rot_trans[i]],\n            [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n            [\n                x_rot_trans[i] + dxdRow + dxdCol,\n                y_rot_trans[i] + dydRow + dydCol,\n            ],\n            [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n            [x_rot_trans[i], y_rot_trans[i]],\n        ];\n\n        var polygon_ll = [];\n        for (var v = 0; v < 5; v++) {\n            let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n            polygon_ll.push(ll);\n        }\n\n        geojsonPolygon.geometry.coordinates = [polygon_ll];\n        gridPnts.push(geojsonPolygon);\n    }\n    geojsonFeatureCollection.features = gridPnts;\n\n    return geojsonFeatureCollection;\n};\n","import React from \"react\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport Button from \"@material-ui/core/Button\";\nimport { gridCreator } from \"./gridCreator\";\nimport { listenToGridCreator } from \"../../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function GridMaker(props) {\n    const dispatch = useDispatch();\n\n    // function downloadObjectAsJson(exportObj) {\n    //     var dataStr =\n    //         \"data:text/json;charset=utf-8,\" +\n    //         encodeURIComponent(JSON.stringify(exportObj));\n    //     var downloadAnchorNode = document.createElement(\"a\");\n    //     downloadAnchorNode.setAttribute(\"href\", dataStr);\n    //     downloadAnchorNode.setAttribute(\"download\", \"grid.json\");\n    //     document.body.appendChild(downloadAnchorNode); // required for firefox\n    //     downloadAnchorNode.click();\n    //     downloadAnchorNode.remove();\n    // }\n\n    const handleGridCreation = () => {\n        let grid = gridCreator(props.gridProps);\n        // downloadObjectAsJson(grid);\n        dispatch(listenToGridCreator(grid));\n    };\n\n    return (\n        <Button\n            onClick={() => {\n                handleGridCreation();\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<AppsIcon />}\n        >\n            Create Grid\n        </Button>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport axios from \"axios\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSelector } from \"react-redux\";\nimport Link from \"@material-ui/core/Link\";\n\nconst reqResonseUI = (response, tableName) => {\n    let cityscopeJSendpoint =\n        \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" +\n        tableName;\n    // create the feedback text\n    let resText = (\n        <Typography variant=\"caption\">\n            CityIO is {response.data.status}. Grid deployed to{\" \"}\n            <Link href={cityscopeJSendpoint}>{cityscopeJSendpoint}</Link>\n        </Typography>\n    );\n\n    return resText;\n};\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst prepareData = (struct, typesList, geoJsonFeatures, gridProps) => {\n    let geoGridObject = struct;\n\n    // take types list and prepare to csJS format\n    let newTypesList = {};\n\n    typesList.forEach((oldType) => {\n        newTypesList[oldType.name] = oldType;\n\n        // // fixes JSON => string in material-table\n        // newTypesList[oldType.name].LBCS = JSON.parse(\n        //     JSON.stringify(oldType.LBCS)\n        // );\n        // newTypesList[oldType.name].NAICS = JSON.parse(\n        //     JSON.stringify(oldType.NAICS)\n        // );\n    });\n\n    geoGridObject.properties.types = newTypesList;\n\n    // inject table props to grid\n    geoGridObject.properties.header = gridProps;\n    geoGridObject.properties.header.longitude = parseFloat(\n        geoGridObject.properties.header.longitude\n    );\n    geoGridObject.properties.header.latitude = parseFloat(\n        geoGridObject.properties.header.latitude\n    );\n    geoGridObject.properties.header.rotation = parseFloat(\n        geoGridObject.properties.header.rotation\n    );\n    geoGridObject.properties.header.nrows = parseFloat(\n        geoGridObject.properties.header.nrows\n    );\n    geoGridObject.properties.header.ncols = parseFloat(\n        geoGridObject.properties.header.ncols\n    );\n    geoGridObject.properties.header.cellSize = parseFloat(\n        geoGridObject.properties.header.cellSize\n    );\n\n    // lastly get the grid features\n    geoGridObject.features = geoJsonFeatures;\n\n    return geoGridObject;\n};\n\nexport default function CommitGrid(props) {\n    const [reqResonse, setReqResonse] = React.useState(null);\n\n    const reduxState = useSelector((state) => state);\n    const hasGrid = reduxState.GRID_CREATED;\n\n    const postGridToCityIO = () => {\n        let struct = settings.GEOGRID;\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        // take grid struct from settings\n        let geoGridObj = prepareData(\n            struct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n\n        let tableName = geoGridObj.properties.header.tableName.toLowerCase();\n        let requestsList = {\n            geoGridURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRID\",\n\n            geoGridDataURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRIDDATA\",\n        };\n\n        const options = {\n            method: \"post\",\n            url: requestsList.geoGridURL,\n            data: geoGridObj,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n\n        axios(options)\n            .then(function (response) {\n                setReqResonse(reqResonseUI(response, tableName));\n            })\n            // then reset GEOGRIDDATA of that new grid\n\n            .then(function () {\n                options.url = requestsList.geoGridDataURL;\n                options.data = {};\n                axios(options);\n                console.log(\"removed GEOGRIDDATA\");\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    return (\n        <>\n            {hasGrid && (\n                <>\n                    <Button\n                        onClick={() => {\n                            postGridToCityIO();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudUploadIcon />}\n                    >\n                        Commit Grid to cityIO\n                    </Button>\n                    <div style={{ width: \"100%\" }}> {reqResonse}</div>\n                </>\n            )}\n        </>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CenterFocusStrongIcon from \"@material-ui/icons/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\n\nimport { listenToBaseMapCenter } from \"../../../../../redux/actions\";\n\nexport default function CenterMapButton(props) {\n    const dispatch = useDispatch();\n\n    return (\n        <Button\n            onClick={() => {\n                dispatch(\n                    listenToBaseMapCenter({\n                        latCenter: parseFloat(props.mapCenter[0]),\n                        lonCenter: parseFloat(props.mapCenter[1]),\n                    })\n                );\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<CenterFocusStrongIcon />}\n            style={{ fontSize: \"12px\" }}\n        >\n            Center Map\n        </Button>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GridMaker from \"./GridMaker/GridMaker\";\nimport CommitGrid from \"./CommitGrid/CommitGrid\";\nimport CenterMapButton from \"./CenterMapButton/CenterMapButton\";\nimport settings from \"../../GridEditorSettings.json\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default function GridProps() {\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            \"& .MuiTextField-root\": {\n                margin: theme.spacing(1),\n                flexWrap: \"wrap\",\n            },\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n        paper: {\n            width: \"100%\",\n        },\n    }));\n\n    const [formValues, setformValues] = React.useState({\n        tableName: \"CityScopeJS\",\n        latitude: settings.GEOGRID.properties.header.latitude,\n        longitude: settings.GEOGRID.properties.header.longitude,\n        nrows: settings.GEOGRID.properties.header.nrows,\n        ncols: settings.GEOGRID.properties.header.nrows,\n        rotation: settings.GEOGRID.properties.header.rotation,\n        cellSize: settings.GEOGRID.properties.header.cellSize,\n        projection: settings.GEOGRID.properties.header.projection,\n    });\n\n    const handleChangeForm = (event) => {\n        const { id, value } = event.target;\n        setformValues({ ...formValues, [id]: value });\n    };\n\n    const classes = useStyles();\n\n    //  get all data\n    // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n    return (\n        <Paper elevation={3} className={classes.paper}>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <Typography variant=\"h6\">Grid Properties</Typography>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"tableName\"\n                        label=\"CityScope Project Name\"\n                        defaultValue={formValues.tableName}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"latitude\"\n                        label=\"Latitude\"\n                        defaultValue={formValues.latitude}\n                        type=\"number\"\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"longitude\"\n                        label=\"Longitude\"\n                        defaultValue={formValues.longitude}\n                        type=\"number\"\n                    />\n                </div>\n                <div className={classes.root}>\n                    <CenterMapButton\n                        mapCenter={[formValues.latitude, formValues.longitude]}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"nrows\"\n                        label=\"Rows\"\n                        defaultValue={formValues.nrows}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 100,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"ncols\"\n                        label=\"Columns\"\n                        defaultValue={formValues.ncols}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 100,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"rotation\"\n                        label=\"Rotation (deg)\"\n                        defaultValue={formValues.rotation}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 360,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"cellSize\"\n                        label=\"Cell Size (m^2)\"\n                        defaultValue={formValues.cellSize}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 1000,\n                                min: 0,\n                            },\n                        }}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        id=\"projection\"\n                        label=\"Projection\"\n                        defaultValue={formValues.projection}\n                        type=\"string\"\n                        helperText=\"Note: wrong projection might break app. Find the relevant projection at: https://epsg.io/\"\n                    />\n                </div>\n                <div className={classes.root}>\n                    <GridMaker gridProps={formValues} />\n                    <CommitGrid gridProps={formValues} />\n                </div>\n            </form>\n        </Paper>\n    );\n}\n","// // export default EditMenuMain;\n\nimport React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TypesEditor from \"./TypesEditor/TypesEditor\";\nimport GridProps from \"./GridProps/GridProps\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function EditMenu() {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            width: \"50%\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            <List>\n                <ListItem>\n                    <Typography variant=\"h5\">CityScope Grid Editor</Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\">\n                        Tool for creating CityScope endpoints with virtual\n                        editable girds, types, and props, and deploy them to\n                        cityIO.\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <GridProps />\n                </ListItem>\n                <ListItem>\n                    <TypesEditor />\n                </ListItem>\n            </List>\n        </Drawer>\n    );\n}\n","import React, { Component } from \"react\";\nimport EditorMap from \"./EditorMap/EditorMap\";\nimport EditorMenu from \"./EditorMenu/EditorMenu\";\nexport default class GridEditor extends Component {\n    render() {\n        return (\n            <>\n                <EditorMap />\n                <EditorMenu />\n            </>\n        );\n    }\n}\n","import Provider from \"../../redux/Provider\";\nimport \"./Router.css\";\nimport configureStore from \"../../redux/store\";\nimport CityScopeJS from \"../CityScopeJS/CityScopeJS\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport React, { Component } from \"react\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport SplashScreen from \"../SplashScreen/SplashScreen\";\nimport GridEditor from \"../GridEditor/GridEditor\";\n\n/**\n *  ! https://material-ui.com/customization/palette/\n */\nconst theme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        background: { default: \"#000\", paper: \"#29323c\" },\n    },\n});\n\nconst AppRouter = () => {\n    let url = window.location.toString();\n    let pre = \"cityscope=\";\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length);\n    let app = null;\n\n    console.log(window.location.search);\n\n    // check URL for proper CS project link\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\n        console.log(\"Loading CityScope project: \" + cityscopePrjName);\n        app = <CityScopeJS tableName={cityscopePrjName} />;\n    } else if (window.location.search === \"?editor\") {\n        app = <GridEditor />;\n    } else {\n        app = <SplashScreen />;\n    }\n\n    return app;\n};\n\nexport default class Router extends Component {\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Provider store={configureStore()}>\n                    <AppRouter />\n                </Provider>\n            </ThemeProvider>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Router from \"./components/Router/Router\";\n\nconst root = document.getElementById(\"root\");\nconst render = () => {\n    return ReactDOM.render(<Router />, root);\n};\n\nrender(Router);\n\nif (module.hot) {\n    module.hot.accept(Router, () => {\n        const hotModule = require(\"./components/Router/Router\").default;\n        render(hotModule);\n    });\n}\n"],"sourceRoot":""}