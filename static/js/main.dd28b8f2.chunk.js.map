{"version":3,"sources":["redux/Provider.js","redux/actions.js","redux/initialState.js","redux/reducer.js","redux/store.js","components/CityScopeJS/CityIO/utils.js","components/CityScopeJS/CityIO/cityIO.js","components/CityScopeJS/BaseMap/BaseMapUtils.js","components/CityScopeJS/MenuContainer/EditMenu/EditMenu.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/styles.js","components/CityScopeJS/MenuContainer/TogglesMenu/ABMSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/styles.js","components/CityScopeJS/MenuContainer/TogglesMenu/ShadowSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/AccessSubmenu/index.js","components/CityScopeJS/MenuContainer/TogglesMenu/index.js","components/CityScopeJS/MenuContainer/FABMenu/index.js","components/CityScopeJS/MenuContainer/SaveMenu/styles.js","components/CityScopeJS/MenuContainer/SaveMenu/components/SaveAsScenario/index.js","components/CityScopeJS/MenuContainer/SaveMenu/components/ScenarioItems/index.js","components/CityScopeJS/MenuContainer/SaveMenu/index.js","components/CityScopeJS/MenuContainer/MenuContainer.js","components/CityScopeJS/BaseMap/CellMeta/CellMeta.js","components/CityScopeJS/BaseMap/PaintBrush/PaintBrush.js","components/GridEditor/EditorMap/EditorBrush.js","components/GridEditor/EditorMap/EditorMap.js","components/CityScopeJS/BaseMap/BaseMap.js","components/CityScopeJS/ProjectionMapping/util.ts","components/CityScopeJS/ProjectionMapping/anchor.tsx","components/CityScopeJS/ProjectionMapping/deleteLocalStorage.js","components/CityScopeJS/ProjectionMapping/ProjectionMapping.tsx","components/CityScopeJS/BaseMap/BaseMapContainer.js","components/CityScopeJS/VisContainer/Radar/Radar.js","components/CityScopeJS/VisContainer/DownloadRawData/DownloadRawData.js","components/CityScopeJS/VisContainer/BarChart/BarChart.js","components/CityScopeJS/VisContainer/AreaCalc/AreaCalc.js","components/CityScopeJS/VisContainer/VisContainer.js","components/CityScopeJS/CityIO/LoadingSpinner/index.js","components/CityScopeJS/CityScopeJS.js","components/SplashScreen/SplashScreen.js","components/GridEditor/EditorMenu/TypesEditor/TypesEditor.js","components/GridEditor/EditorMenu/GridProps/GridMaker/gridCreator.js","components/GridEditor/EditorMenu/GridProps/GridMaker/GridMaker.js","components/GridEditor/EditorMenu/GridProps/CommitGrid/CommitGrid.js","components/GridEditor/EditorMenu/GridProps/CenterMapButton/CenterMapButton.js","components/GridEditor/EditorMenu/GridProps/GridProps.js","components/GridEditor/EditorMenu/EditorMenu.js","components/GridEditor/GridEditor.js","components/Router/Router.js","index.js"],"names":["ProviderWrapper","children","store","listenToSlidersEvents","data","type","listenToEditMenu","setLoadingState","setScenarioNames","listenToRowEdits","listenToBaseMapCenter","listOfToggles","Object","keys","settings","menu","toggles","menuInitState","i","length","values","showOnInit","push","initialState","MENU","CITYIO","SCENARIO_NAMES","MAP","SLIDERS","time","map","layers","ABM","startSimHour","currentSimHour","endSimHour","speed","animationSpeed","ACCESS_TOGGLE","SELECTED_TYPE","READY","LOADING","ROW_EDIT","BASE_MAP_CENTER","latCenter","lonCenter","TYPES_LIST","GRID_CREATED","reducer","state","action","reduxDevTools","window","__REDUX_DEVTOOLS_EXTENSION__","configureStore","createStore","getScenarioIndices","tableName","options","method","url","cityIO","baseURL","headers","Accept","axios","then","res","scenarioIndices","filter","str","includes","parseInt","replace","promises","id","getScenarioName","Promise","all","r","name","catch","err","console","log","CityIO","props","handleURL","cityioURL","getCityIOHash","timer","setInterval","_isMounted","interval","URL","get","response","handleCityIOHashes","e","result","oldHashs","setState","cityIOmodulesStatus","cityIOmodules","forEach","module","hashes","setNestedState","getCityIOmoduleData","checkDoneCityIO","parent","child","holder","moduleName","error","status","request","message","config","cityIOmodulesData","getCityioData","setReadyState","this","Component","mapDispatchToProps","connect","hexToRgb","hex","exec","testHex","hexString","test","_proccessGridData","cityioData","GEOGRID","GEOGRIDDATA","features","properties","JSON","parse","stringify","_proccessAccessData","accessData","access","coordinates","d","geometry","heatmap","_postMapEditsToCityIO","endPoint","classes","makeStyles","theme","drawer","width","zIndex","marginAutoContainer","display","marginAutoItem","margin","useStyles","React","useState","selectedIndex","setSelectedIndex","dispatch","useDispatch","selectedType","useSelector","height","marks","value","label","Drawer","className","variant","anchor","open","paper","List","LanduseTypesList","iconsArr","col","color","rgbCol","selected","typeHasHeightProps","Fragment","key","Math","random","Divider","component","root","dividerColor","ListItem","alignItems","button","onClick","event","typeProps","list","ListItemAvatar","Avatar","style","backgroundColor","charAt","ListItemText","primary","listItemPrimaryText","secondary","listItemSecondaryText","Collapse","in","Slider","valueLabelDisplay","slider","onChangeCommitted","getAriaLabel","index","toString","min","max","createTypesIcons","types","marginLeft","subtitle1","marginTop","subtitle2","ABMSubmenu","sliders","Typography","gutterBottom","onChange","newValue","aria-labelledby","ShadowSubmenu","AccessSubmenu","accessToggle","ACCESS_PROPERTIES","c","colors","l","startColor","endColor","startTitle","endTitle","p","textTransform","ListItemSecondaryAction","Switch","edge","checked","TogglesMenu","paddingLeft","paddingRight","padding","spacing","drawerPaper","toggleDrawer","handleToggle","menuState","togglesMeta","togglesCompsArray","loadedModules","requireModule","thisToggle","displayName","elevation","BackdropProps","invisible","onClose","FABMenu","flexDirection","position","paddingTop","toggleSaveDrawer","Tooltip","title","Fab","disabled","SaveAsScenario","setOpen","setName","handleClose","scenarioNames","postScenario","info","Button","startIcon","Dialog","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","fullWidth","target","DialogActions","newScenarioIndex","getScenarioIndex","ScenarioItems","scenario","getScenario","deleteScenario","SaveMenu","MenuContainer","drawerOpen","saveDrawerOpen","indexOf","updatedMenuState","splice","showEditMenu","CellMeta","mousePos","borderRadius","pointerEvents","left","clientX","top","clientY","fontSize","fontWeight","hoveredObj","object","PaintBrush","hoveredCells","isInteractiveCell","interactive","divSize","colorTrans","mouseX","mouseY","msg","border","mouseDown","borderColor","SelectionTarget","_hexToRgb","BaseMap","_toggleOrthoView","viewState","orthographic","_onViewStateChange","componentDidUpdate","prevProps","mapCenter","latitude","longitude","pitch","bearing","_mulipleObjPicked","dim","pickingRadius","x","y","deckGL","pickObjects","_handleGridcellEditing","multiSelectedObj","thisCellProps","selectedCellsState","_renderSelectionTarget","_handleKeyUp","keyDownState","_handleKeyDown","nativeEvent","draggingWhileEditing","initialViewState","dirLightSettings","timestamp","Date","UTC","intensity","_shadow","_rightClickViewRotate","_setupEffects","_setViewStateToTableHeader","header","zoom","ambientLight","AmbientLight","dirLight","_SunLight","lightingEffect","LightingEffect","shadowColor","_effects","document","getElementById","addEventListener","evt","preventDefault","GeoJsonLayer","opacity","stroked","filled","wireframe","createdGrid","visible","pickable","extruded","lineWidthScale","lineWidthMinPixels","getElevation","getFillColor","cellInfo","rightButton","onDrag","onDragStart","onDragEnd","updateTriggers","transitions","onKeyDown","onKeyUp","onMouseMove","onMouseUp","onMouseDown","ref","deck","onViewStateChange","_renderLayers","effects","controller","touchZoom","touchRotate","dragPan","dragRotate","keyboard","reuseMaps","mapboxApiAccessToken","process","mapStyle","sat","preventStyleDiffing","Map","_updateSunDirecation","currentDateMidnight","setHours","date","getTime","directionalLights","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","_renderPaintBrush","_remapValues","animationFrame","cancelAnimationFrame","_setupSunEffects","_animate","prevState","animateABM","animateCamera","dataProps","rotation","startHour","endHour","t","requestAnimationFrame","bind","zoomLevel","TripsLayer","ABM2","trips","getPath","path","getTimestamps","timestamps","getColor","attr","mode","getWidth","widthScale","rounded","trailLength","currentTime","PathLayer","noisePath","onHover","HeatmapLayer","colorRange","radiusPixels","getPosition","getWeight","asyncRender","blue","solve","require","transformPointsToMatrix","sourcePoints","targetPoints","a","b","n","fromX","fromY","toX","toY","h","num","precision","factor","pow","tempNumber","round","matrixToTransform","matrix","join","vectorToTransform","vector","styles","container","cursor","anchorSize","bottom","right","AnchorComponent","translation","onMouseEnter","transform","DeleteLocalStorage","Grid","justify","anchors","defaultMatrix","_setDeltaVal","deltaInitVals","ProjectionMapping","layerTranslateDelta","anchorTranslateDelta","isAnchorDragging","anchorMoving","translateDelta","undefined","transformOrigin","containerTranslate","onAnchorMouseDown","stopPropagation","pageX","pageY","onAnchorMouseMove","vectorIndexToModify","deltaX","deltaY","onAnchorMouseUp","isEditMode","newVector","_clearLocalStraoge","localStorage","getItem","removeItem","location","reload","getBoundingClientRect","ls","setItem","removeEventListener","anchorStyle","anchorClassName","MapContainer","_checkKeystone","overflow","Radar","domains","radarData","radarSize","drawerWidth","indicators","refData","viz_type","ref_value","domain","generateData","animation","polygons","fillOpacity","strokeWidth","axes","text","fill","labels","textAnchor","stroke","tickValues","Array","v","items","DownloadRawData","element","createElement","file","Blob","href","createObjectURL","download","body","appendChild","click","downloadTxtFile","size","barChartData","hoverdNode","dataArr","hoveredNode","xType","stackBy","yDomain","tickLabelAngle","onValueMouseOver","refChartData","AreaCalc","radialRadius","hoveredRadial","setHoveredRadial","cellSize","geoGridData","calcAreaObj","gridCellData","typeName","hasOwnProperty","count","area","g","valToHex","rgbToHex","radialData","k","calcArea","colorType","innerRadius","radius","getLabel","labelsRadiusMultiplier","labelsStyle","textShadow","showLabels","getAngle","onSeriesMouseOut","padAngle","background","showRadar","Paper","BarChart","override","css","LoadingSpinner","loading","App","ready","maxWidth","textAlign","maxHeight","inputRoot","labelRoot","labelFocused","caption","SplashScreen","textFieldContent","setTextFieldContent","Box","autoComplete","handleTextFieldChange","InputProps","InputLabelProps","focused","loadCityScopeJSproject","TypesEditor","columns","field","lookup","No","Web","TUI","typesArray","LBCS","NAICS","createtypesArray","useEffect","selectedRow","setSelectedRow","rowColor","setRowColor","item","xs","paging","search","selection","rowStyle","rowData","tableData","onRowClick","row","editable","onRowAdd","newData","resolve","setTimeout","onRowUpdate","oldData","onRowDelete","deg_to_rad","deg","PI","rad_to_deg","rad","randomProperty","obj","GridMaker","handleGridCreation","grid","gridProps","top_left_lon","parseFloat","top_left_lat","userPrj","projection","cell_size","nrows","ncols","webMercator","proj4","defs","top_left_lon_lat","lon","lat","Ad","la1","lo1","bearing_rad","la2","asin","sin","cos","top_right_lon_lat","atan2","top_left_xy","top_right_xy","dydx","theta","atan","cosTheta","sinTheta","x_unRot","y_unRot","j","x_rot","y_rot","x_rot_trans","y_rot_trans","dxdCol","dydCol","dxdRow","dydRow","gridPnts","geojsonFeatureCollection","rndType","geojsonPolygon","polygon_xy","polygon_ll","ll","gridCreator","prepareData","struct","typesList","geoJsonFeatures","geoGridObject","newTypesList","oldType","CommitGrid","reqResonse","setReqResonse","reduxState","hasGrid","postGridToCityIO","geoGridObj","toLowerCase","requestsList","geoGridURL","geoGridDataURL","cityscopeJSendpoint","Link","reqResonseUI","dataStr","encodeURIComponent","downloadAnchorNode","setAttribute","remove","downloadObjectAsJson","CenterMapButton","GridProps","flexWrap","formValues","setformValues","handleChangeForm","noValidate","textField","defaultValue","inputProps","helperText","EditMenu","GridEditor","EditorMap","createMuiTheme","palette","default","AppRouter","pre","cityscopePrjName","substring","app","Router","ThemeProvider","CssBaseline","Provider","ReactDOM","render"],"mappings":"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","file":"static/js/main.dd28b8f2.chunk.js","sourcesContent":["import React from \"react\";\nimport { Provider } from \"react-redux\";\n\nconst ProviderWrapper = ({ children, store }) => (\n    <Provider store={store}>{children}</Provider>\n);\n\nexport default ProviderWrapper;\n","/**\n * ACTIONS\n */\nexport const GET_CITYIO_DATA = \"GET_CITYIO_DATA\";\nexport function getCityioData(data) {\n    return { type: GET_CITYIO_DATA, data };\n}\n\nexport const LISTEN_TO_MAP_EVENTS = \"LISTEN_TO_MAP_EVENTS\";\nexport function listenToMapEvents(data) {\n    return { type: LISTEN_TO_MAP_EVENTS, data };\n}\n\nexport const LISTEN_TO_ABM_SLIDERS = \"LISTEN_TO_ABM_SLIDERS\";\nexport function listenToSlidersEvents(data) {\n    return { type: LISTEN_TO_ABM_SLIDERS, data };\n}\n\nexport const LISTEN_TO_ACCESS_TOGGLE = \"LISTEN_TO_ACCESS_TOGGLE\";\nexport function listenToAccessToggle(data) {\n    return { type: LISTEN_TO_ACCESS_TOGGLE, data };\n}\n\nexport const MENU_INTERACTION = \"MENU_INTERACTION\";\nexport function listenToMenuUI(data) {\n    return { type: MENU_INTERACTION, data };\n}\n\nexport const LISTEN_TO_EDIT_MENU = \"LISTEN_TO_EDIT_MENU\";\nexport function listenToEditMenu(data) {\n    return { type: LISTEN_TO_EDIT_MENU, data };\n}\n\nexport const SET_READY_STATE = \"SET_READY_STATE\";\nexport function setReadyState(data) {\n    return { type: SET_READY_STATE, data };\n}\n\nexport const SET_LOADING_STATE = \"SET_LOADING_STATE\";\nexport function setLoadingState(data) {\n    return { type: SET_LOADING_STATE, data };\n}\n\nexport const SET_SCENARIO_NAMES = \"SET_SCENARIO_NAMES\";\nexport function setScenarioNames(data) {\n    return { type: SET_SCENARIO_NAMES, data };\n}\n\n/**\n * Editor Actions\n */\n\nexport const LISTEN_TO_GRID_CREATOR = \"LISTEN_TO_GRID_CREATOR\";\nexport function listenToGridCreator(data) {\n    return { type: LISTEN_TO_GRID_CREATOR, data };\n}\n\nexport const LISTEN_TO_ROW_EDIT = \"LISTEN_TO_ROW_EDIT\";\nexport function listenToRowEdits(data) {\n    return { type: LISTEN_TO_ROW_EDIT, data };\n}\n\nexport const LISTEN_TO_TYPES_LIST = \"LISTEN_TO_TYPES_LIST\";\nexport function listeonToTypesList(data) {\n    return { type: LISTEN_TO_TYPES_LIST, data };\n}\n\nexport const LISTEN_TO_BASE_MAP_CENTER = \"LISTEN_TO_BASE_MAP_CENTER\";\nexport function listenToBaseMapCenter(data) {\n    return { type: LISTEN_TO_BASE_MAP_CENTER, data };\n}\n","import settings from \"../settings/settings.json\";\n\n/**\n * ! INIT STATE\n */\nconst listOfToggles = Object.keys(settings.menu.toggles);\nlet menuInitState = [];\nfor (let i = 0; i < listOfToggles.length; i++) {\n    if (Object.values(settings.menu.toggles)[i].showOnInit) {\n        menuInitState.push(listOfToggles[i]);\n    }\n}\n\nconst initialState = {\n    MENU: menuInitState,\n    CITYIO: {},\n    SCENARIO_NAMES: [],\n    MAP: {},\n    SLIDERS: {\n        time: [\n            settings.map.layers.ABM.startSimHour,\n            settings.map.layers.ABM.currentSimHour,\n            settings.map.layers.ABM.endSimHour,\n        ],\n        speed: settings.map.layers.ABM.animationSpeed,\n    },\n    ACCESS_TOGGLE: 0,\n    SELECTED_TYPE: null,\n    READY: false,\n    LOADING: false,\n\n    /**\n     * ! EDITOR INIT STATE\n     */\n\n    ROW_EDIT: null,\n    BASE_MAP_CENTER: {\n        latCenter: null,\n        lonCenter: null,\n    },\n    TYPES_LIST: null,\n    GRID_CREATED: null,\n};\n\nexport default initialState;\n","import {\n    GET_CITYIO_DATA,\n    MENU_INTERACTION,\n    LISTEN_TO_MAP_EVENTS,\n    LISTEN_TO_ABM_SLIDERS,\n    LISTEN_TO_EDIT_MENU,\n    SET_READY_STATE,\n    SET_LOADING_STATE,\n    SET_SCENARIO_NAMES,\n    LISTEN_TO_ACCESS_TOGGLE,\n    LISTEN_TO_ROW_EDIT,\n    LISTEN_TO_TYPES_LIST,\n    LISTEN_TO_GRID_CREATOR,\n    LISTEN_TO_BASE_MAP_CENTER,\n} from \"./actions\";\nimport initialState from \"./initialState\";\n\n/**\n * REDUCER\n */\nexport default function reducer(state = initialState, action) {\n    switch (action.type) {\n        case GET_CITYIO_DATA:\n            return { ...state, CITYIO: action.data };\n        case MENU_INTERACTION:\n            return { ...state, MENU: action.data };\n        case LISTEN_TO_MAP_EVENTS:\n            return { ...state, MAP: action.data };\n        case LISTEN_TO_ABM_SLIDERS:\n            return { ...state, SLIDERS: action.data };\n        case LISTEN_TO_ACCESS_TOGGLE:\n            return { ...state, ACCESS_TOGGLE: action.data };\n        case LISTEN_TO_EDIT_MENU:\n            return { ...state, SELECTED_TYPE: action.data };\n        case SET_READY_STATE:\n            return { ...state, READY: action.data };\n        case SET_LOADING_STATE:\n            return { ...state, LOADING: action.data };\n        case SET_SCENARIO_NAMES:\n            return { ...state, SCENARIO_NAMES: action.data };\n\n        //! Editor\n        case LISTEN_TO_ROW_EDIT:\n            return { ...state, ROW_EDIT: action.data };\n\n        case LISTEN_TO_TYPES_LIST:\n            return { ...state, TYPES_LIST: action.data };\n\n        case LISTEN_TO_GRID_CREATOR:\n            return { ...state, GRID_CREATED: action.data };\n\n        case LISTEN_TO_BASE_MAP_CENTER:\n            return { ...state, BASE_MAP_CENTER: action.data };\n\n        default:\n            return state;\n    }\n}\n","import { createStore } from \"redux\";\nimport reducer from \"./reducer\";\n\nconst reduxDevTools =\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__();\n\nconst configureStore = () => {\n    const store = createStore(reducer, reduxDevTools);\n\n    if (process.env.NODE_ENV !== \"production\") {\n        if (module.hot) {\n            module.hot.accept(\"./reducer\", () => {\n                store.replaceReducer(reducer);\n            });\n        }\n    }\n\n    return store;\n};\n\nexport default configureStore;\n","import axios from \"axios\";\nimport settings from \"../../../settings/settings.json\";\n\nexport const getScenarioIndices = (\n    tableName,\n    setScenarioNames,\n    setLoadingState\n) => {\n    var getURL = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n    const options = {\n        method: \"get\",\n        url: getURL,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options)\n        .then((res) => {\n            const metaDataKeys = Object.keys(res.data);\n            const scenarioIndices = metaDataKeys\n                .filter((str) => str.includes(\"scenarios\"))\n                .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n            const promises = [];\n            for (const id of scenarioIndices) {\n                promises.push(getScenarioName(tableName, id));\n            }\n            Promise.all(promises)\n                .then((res) => {\n                    setScenarioNames(\n                        res.map((r) => ({\n                            name: r.data.name,\n                            id: r.data.id,\n                        }))\n                    );\n                    setLoadingState && setLoadingState(false);\n                })\n                .catch((err) =>\n                    console.log(\"error getting scenario names\", err)\n                );\n        })\n        .catch((err) => {\n            console.log(\"Error getting scenarios\", err);\n        });\n};\n\nexport const getScenarioName = (tableName, id) => {\n    const getURL =\n        settings.cityIO.baseURL + tableName + \"/scenarios\" + id + \"/info\";\n    const options = {\n        method: \"get\",\n        url: getURL,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    return axios(options);\n};\n","import { Component } from \"react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport {\n    getCityioData,\n    setReadyState,\n    setLoadingState,\n    setScenarioNames,\n} from \"../../../redux/actions\";\nimport settings from \"../../../settings/settings.json\";\nimport { getScenarioIndices } from \"./utils\";\n\nclass CityIO extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            oldHashs: {},\n            cityIOmodulesData: {},\n        };\n        this.cityioURL = null;\n    }\n\n    /**\n     * start fetching API hashes to check for new data\n     */\n    componentDidMount() {\n        this._isMounted = true;\n        this.handleURL();\n    }\n\n    componentWillUnmount() {\n        this._isMounted = false;\n    }\n\n    handleURL = () => {\n        this.cityioURL = settings.cityIO.baseURL + this.props.tableName;\n\n        // get the hashes first\n        this.getCityIOHash(this.cityioURL + \"/meta\");\n        // and every interval\n        this.timer = setInterval(() => {\n            if (this._isMounted) {\n                this.getCityIOHash(this.cityioURL + \"/meta\");\n            }\n        }, settings.cityIO.interval);\n        console.log(\n            \"starting cityIO GET interval every \" +\n                settings.cityIO.interval +\n                \"ms \"\n        );\n    };\n\n    /**\n     * returns only the hasees from API\n     */\n    getCityIOHash = (URL) => {\n        axios\n            .get(URL)\n            .then((response) => {\n                this.handleCityIOHashes(response.data);\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    };\n\n    /**\n     * check for updated hashes.\n     * if new hashes exist,\n     * fetch !! WHOLE API (for now)\n     */\n    handleCityIOHashes = (result) => {\n        // if master hash ID has changed (cityIO table state)\n        if (result.id !== this.state.oldHashs.id) {\n            // reset the cityIOmodulesStatus\n            this.setState({ cityIOmodulesStatus: {} });\n\n            // reset the state of this flag\n            this.props.setLoadingState(true);\n\n            // get scenario indices\n            getScenarioIndices(\n                this.props.tableName,\n                this.props.setScenarioNames\n            );\n\n            // new data in table, get all modules\n            // that are listed in settings\n            settings.cityIO.cityIOmodules.forEach((module) => {\n                // only update modules that have new data\n                if (result.hashes[module] !== this.state.oldHashs[module]) {\n                    // set this module as not ready\n                    this.setNestedState(\"cityIOmodulesStatus\", module, false);\n                    // get the module data from cityIO\n                    this.getCityIOmoduleData(\n                        module,\n                        this.cityioURL + \"/\" + module\n                    );\n                    // update this new module hash in state\n                    this.setNestedState(\n                        \"oldHashs\",\n                        module,\n                        result.hashes[module]\n                    );\n                } else {\n                    // update module name with ok\n                    this.setNestedState(\"cityIOmodulesStatus\", module, true);\n                }\n            });\n            this.checkDoneCityIO();\n            // finally, put to state the hashes master id\n            this.setNestedState(\"oldHashs\", \"id\", result.id);\n        }\n    };\n\n    /**\n     *\n     * Helper function to set nested state\n     */\n\n    setNestedState = (parent, child, data) => {\n        var holder = { ...this.state[parent] };\n        holder[child] = data;\n        this.setState({ [parent]: holder });\n    };\n\n    /**\n     * get each module data\n     */\n    getCityIOmoduleData = (moduleName, URL) => {\n        axios\n            .get(URL)\n            .then((response) => {\n                // put response to state obj\n                this.setNestedState(\n                    \"cityIOmodulesData\",\n                    moduleName,\n                    response.data\n                );\n                console.log(\"...updating module:\", moduleName);\n                this.setNestedState(\"cityIOmodulesStatus\", moduleName, true);\n                this.checkDoneCityIO();\n            })\n\n            .catch((error) => {\n                if (error.response) {\n                    console.log(\n                        \"error.response:\",\n                        \"\\n\",\n                        error.response.data,\n                        \"\\n\",\n                        error.response.status,\n                        \"\\n\",\n                        error.response.headers\n                    );\n                } else if (error.request) {\n                    console.log(\"error.request:\", error.request);\n                } else {\n                    console.log(\"misc error:\", error.message);\n                }\n                console.log(\"request config:\", error.config);\n            });\n    };\n\n    checkDoneCityIO = () => {\n        // check if all modules are done\n        for (const status in this.state.cityIOmodulesStatus) {\n            if (this.state.cityIOmodulesStatus[status] !== true) {\n                // we still need to update some module, stop\n                return;\n            }\n        }\n        //  if so, share the data with the app\n        const data = this.state.cityIOmodulesData;\n        data.tableName = this.props.tableName;\n        // finally, send data to redux\n        this.props.getCityioData(data);\n        console.log(\"done updating from cityIO\");\n\n        // initializes rendering of Menu and Map containers\n        this.props.setReadyState(true);\n        this.props.setLoadingState(false);\n    };\n\n    render() {\n        return null;\n    }\n}\n\nconst mapDispatchToProps = {\n    getCityioData: getCityioData,\n    setReadyState: setReadyState,\n    setLoadingState: setLoadingState,\n    setScenarioNames: setScenarioNames,\n};\n\nexport default connect(null, mapDispatchToProps)(CityIO);\n","import axios from \"axios\";\n\n/**\n * conver rgb to hex\n */\nexport function rgbToHex(r, g, b) {\n    function valToHex(c) {\n        var hex = c.toString(16);\n        return hex.length === 1 ? \"0\" + hex : hex;\n    }\n    return \"#\" + valToHex(r) + valToHex(g) + valToHex(b);\n}\n\n/**\n * conver hex to rgb array\n */\nexport function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n}\n\n/**\n *\n * @param {string} hexString test if vaild 3->6 HEX color\n */\nexport const testHex = (hexString) => {\n    let isHex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/i.test(hexString);\n    return isHex;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the interactive area\n */\nexport const _proccessGridData = (cityioData) => {\n    // get the static grid\n    const GEOGRID = cityioData.GEOGRID;\n    // if GEOGRRIDDATA exist and is the same length as our grid\n    if (\n        cityioData.GEOGRIDDATA &&\n        cityioData.GEOGRIDDATA.length === cityioData.GEOGRID.features.length\n    ) {\n        // get the grid data\n        const GEOGRIDDATA = cityioData.GEOGRIDDATA;\n        // update GEOGRID features from GEOGRIDDATA on cityio\n        for (let i = 0; i < GEOGRID.features.length; i++) {\n            GEOGRID.features[i].properties = GEOGRIDDATA[i];\n\n            // inject id\n            GEOGRID.features[i].properties.id = i;\n        }\n    }\n    const newGrid = JSON.parse(JSON.stringify(GEOGRID));\n    return newGrid;\n};\n\n/**\n * Description. gets `props` with geojson\n * and procces the access layer data\n */\nexport const _proccessAccessData = (data) => {\n    const accessData = data.access;\n    // get colors from settings\n    let coordinates = accessData.features.map((d) => d.geometry.coordinates);\n    let values = accessData.features.map((d) => d.properties);\n    let heatmap = [];\n    for (let i = 0; i < coordinates.length; i++) {\n        heatmap.push({\n            coordinates: coordinates[i],\n            values: values[i],\n        });\n    }\n    return heatmap;\n};\n\n/**\n * checks if edits are done (toggled off)\n * than returns a redux state\n * with grid edits payload\n */\nexport const _postMapEditsToCityIO = (data, tableName, endPoint) => {\n    let postURL =\n        \"https://cityio.media.mit.edu/api/table/update/\" + tableName + endPoint;\n\n    const options = {\n        method: \"post\",\n        url: postURL,\n        data: data,\n        headers: {\n            \"Content-Type\": \"application/json\",\n            Accept: \"application/json\",\n        },\n    };\n    axios(options).catch((error) => {\n        console.log(error);\n\n        console.log(\"ERROR:\", error);\n    });\n};\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport { listenToEditMenu } from \"../../../../redux/actions\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { testHex, hexToRgb } from \"../../BaseMap/BaseMapUtils\";\n\nfunction EditMenu(props) {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            width: 300,\n            zIndex: theme.zIndex.drawer + 1,\n        },\n\n        marginAutoContainer: {\n            width: \"100%\",\n            display: \"flex\",\n        },\n        marginAutoItem: {\n            margin: \"auto\",\n            width: \"80%\",\n        },\n    }));\n\n    const classes = useStyles();\n    const [selectedIndex, setSelectedIndex] = React.useState(null);\n    const dispatch = useDispatch();\n    let selectedType = useSelector((state) => state.SELECTED_TYPE);\n    const height = selectedType ? selectedType.height : null;\n\n    const marks = [\n        { value: 0, label: \"0 floors\" },\n        { value: 50, label: \"50 floors\" },\n    ];\n\n    const handleListItemClick = (event, name, typeProps) => {\n        // ! injects the type name into the attributes themselves\n        typeProps.name = name;\n        setSelectedIndex(name);\n        dispatch(listenToEditMenu(typeProps));\n    };\n\n    // create the types themselves\n    const createTypesIcons = (LanduseTypesList) => {\n        let iconsArr = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            let col = LanduseTypesList[type].color;\n            if (testHex(col)) {\n                col = hexToRgb(col);\n            }\n            let rgbCol = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n            const selected = selectedIndex === type;\n            let typeHasHeightProps = false;\n            if (LanduseTypesList[type].height) {\n                typeHasHeightProps = true;\n            }\n\n            iconsArr.push(\n                <React.Fragment key={Math.random()}>\n                    <Divider\n                        key={Math.random()}\n                        variant=\"inset\"\n                        component=\"li\"\n                        classes={{ root: classes.dividerColor }}\n                    />\n\n                    <ListItem\n                        key={Math.random()}\n                        alignItems=\"flex-start\"\n                        button\n                        variant=\"raised\"\n                        selected={selected}\n                        onClick={(event) =>\n                            handleListItemClick(\n                                event,\n                                type,\n                                LanduseTypesList[type]\n                            )\n                        }\n                        className={classes.list}\n                    >\n                        <ListItemAvatar key={Math.random()}>\n                            <Avatar style={{ backgroundColor: rgbCol }}>\n                                {type.charAt(0)}\n                            </Avatar>\n                        </ListItemAvatar>\n\n                        <ListItemText\n                            key={Math.random()}\n                            classes={{\n                                primary: classes.listItemPrimaryText,\n                                secondary: classes.listItemSecondaryText,\n                            }}\n                            primary={type}\n                        />\n                    </ListItem>\n\n                    {typeHasHeightProps && (\n                        <div className={classes.marginAutoContainer}>\n                            <div className={classes.marginAutoItem}>\n                                <Collapse in={selected} key={Math.random()}>\n                                    <Slider\n                                        key={Math.random()}\n                                        value={height}\n                                        valueLabelDisplay=\"auto\"\n                                        className={classes.slider}\n                                        onChangeCommitted={(event, value) =>\n                                            dispatch(\n                                                listenToEditMenu({\n                                                    ...selectedType,\n                                                    height: value,\n                                                })\n                                            )\n                                        }\n                                        getAriaLabel={(index) =>\n                                            index.toString()\n                                        }\n                                        min={0}\n                                        max={50}\n                                        marks={marks}\n                                    ></Slider>\n                                </Collapse>\n                            </div>\n                        </div>\n                    )}\n                </React.Fragment>\n            );\n        });\n        return iconsArr;\n    };\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            <List>\n                {createTypesIcons(props.cityioData.GEOGRID.properties.types)}\n            </List>\n        </Drawer>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n    };\n};\n\nexport default connect(mapStateToProps, null)(EditMenu);\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../../redux/actions\";\n\nfunction ABMSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector((state) => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const handleSetSpeedValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                speed: newValue,\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\",\n        },\n        {\n            value: 21600,\n            label: \"6AM\",\n        },\n        {\n            value: 43200,\n            label: \"12PM\",\n        },\n        {\n            value: 64800,\n            label: \"6PM\",\n        },\n        {\n            value: 86400,\n            label: \"12AM\",\n        },\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Simulation Range\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n            <Typography\n                className={classes.subtitle2}\n                variant=\"subtitle2\"\n                id=\"continuous-slider\"\n                gutterBottom\n            >\n                Simulation Speed\n            </Typography>\n            <Slider\n                min={0}\n                max={100}\n                value={sliders.speed}\n                onChange={handleSetSpeedValue}\n                valueLabelDisplay=\"auto\"\n                aria-labelledby=\"continuous-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ABMSubmenu;\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        width: \"80%\",\n        marginLeft: 28,\n    },\n    subtitle1: {\n        marginTop: 12,\n    },\n    subtitle2: {\n        marginTop: 12,\n    },\n});\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../../../redux/actions\";\n\nfunction ShadowSubmenu() {\n    const classes = useStyles();\n\n    const sliders = useSelector((state) => state.SLIDERS);\n\n    const dispatch = useDispatch();\n\n    const handleSetTimeValue = (e, newValue) => {\n        dispatch(\n            listenToSlidersEvents({\n                ...sliders,\n                time: newValue,\n            })\n        );\n    };\n\n    const marks = [\n        {\n            value: 0,\n            label: \"12AM\",\n        },\n        {\n            value: 21600,\n            label: \"6AM\",\n        },\n        {\n            value: 43200,\n            label: \"12PM\",\n        },\n        {\n            value: 64800,\n            label: \"6PM\",\n        },\n        {\n            value: 86400,\n            label: \"12AM\",\n        },\n    ];\n\n    return (\n        <div className={classes.root}>\n            <Typography\n                className={classes.subtitle1}\n                variant=\"subtitle2\"\n                id=\"range-slider\"\n                gutterBottom\n            >\n                Time of day\n            </Typography>\n            <Slider\n                min={0}\n                max={86400}\n                marks={marks}\n                value={sliders.time}\n                onChange={handleSetTimeValue}\n                valueLabelDisplay=\"off\"\n                aria-labelledby=\"range-slider\"\n            />\n        </div>\n    );\n}\n\nexport default ShadowSubmenu;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport { listenToAccessToggle } from \"../../../../../redux/actions\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { ContinuousColorLegend } from \"react-vis\";\n\nimport settings from \"../../../../../settings/settings.json\";\n\nfunction AccessSubmenu(props) {\n    const accessToggle = useSelector((state) => state.ACCESS_TOGGLE);\n\n    const { cityioData } = props;\n\n    const ACCESS_PROPERTIES =\n        cityioData && cityioData.access && cityioData.access.properties\n            ? cityioData.access.properties\n            : [];\n\n    const dispatch = useDispatch();\n    const c = settings.map.layers.heatmap.colors;\n    const l = c.length - 1;\n    return (\n        <List>\n            <ListItem>\n                <ContinuousColorLegend\n                    width={500}\n                    startColor={\n                        \"rgb(\" + c[0][0] + \",\" + c[0][1] + \",\" + c[0][2] + \")\"\n                    }\n                    endColor={\n                        \"rgb(\" + c[l][0] + \",\" + c[l][1] + \",\" + c[l][2] + \")\"\n                    }\n                    startTitle=\"No Access\"\n                    endTitle=\"Full Access\"\n                />\n            </ListItem>\n            {ACCESS_PROPERTIES.map((p, i) => (\n                <ListItem key={p}>\n                    <ListItemText\n                        primary={p}\n                        style={{ textTransform: \"capitalize\" }}\n                    />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            checked={accessToggle === i}\n                            onChange={() => {\n                                dispatch(listenToAccessToggle(i));\n                            }}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AccessSubmenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport settings from \"../../../../settings/settings.json\";\nimport Collapse from \"@material-ui/core/Collapse\";\nimport ABMSubmenu from \"./ABMSubmenu\";\nimport ShadowSubmenu from \"./ShadowSubmenu\";\nimport AccessSubmenu from \"./AccessSubmenu\";\nimport Switch from \"@material-ui/core/Switch\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nfunction TogglesMenu(props) {\n    let drawerWidth = 350;\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            display: \"flex\",\n            paddingLeft: 16,\n            paddingRight: 16,\n            width: drawerWidth,\n            padding: theme.spacing(0, 1),\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const { open, toggleDrawer, handleToggle } = props;\n\n    const { menuState, cityioData } = useSelector((state) => ({\n        menuState: state.MENU,\n        cityioData: state.CITYIO,\n    }));\n\n    const togglesMeta = settings.menu.toggles;\n    const listOfToggles = Object.keys(togglesMeta);\n\n    /**\n     * gets props with initial menu state\n     * and turn on the layer on init\n     */\n    let togglesCompsArray = [];\n    // array of loaded API modules\n    const loadedModules = Object.keys(cityioData);\n    // create each toggle\n    for (let i = 0; i < listOfToggles.length; i++) {\n        // check if the mdoule of this toggle\n        // was loaded on the API\n        let requireModule = togglesMeta[listOfToggles[i]].requireModule;\n\n        const checked = menuState.includes(listOfToggles[i]) ? true : false;\n\n        if (loadedModules.includes(requireModule) || requireModule === false) {\n            const thisToggle = (\n                <div key={listOfToggles[i]}>\n                    <ListItem>\n                        <ListItemText\n                            primary={togglesMeta[listOfToggles[i]].displayName}\n                        />\n                        <ListItemSecondaryAction>\n                            <Switch\n                                edge=\"end\"\n                                onChange={handleToggle(listOfToggles[i])}\n                                checked={checked}\n                            />\n                        </ListItemSecondaryAction>\n                    </ListItem>\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"SHADOWS\" && (\n                            <Collapse in={checked} style={{ width: \"100%\" }}>\n                                <ShadowSubmenu />\n                            </Collapse>\n                        )\n                    }\n\n                    {\n                        // ! Handle submenus of ABM/ACCESS\n\n                        listOfToggles[i] === \"ABM\" && (\n                            <Collapse in={checked} style={{ width: \"100%\" }}>\n                                <ABMSubmenu />\n                            </Collapse>\n                        )\n                    }\n                    {listOfToggles[i] === \"ACCESS\" && (\n                        <Collapse\n                            in={checked}\n                            style={{\n                                width: \"80%\",\n                                marginLeft: 24,\n                            }}\n                        >\n                            <AccessSubmenu cityioData={cityioData} />\n                        </Collapse>\n                    )}\n                </div>\n            );\n            togglesCompsArray.push(thisToggle);\n        }\n    }\n\n    return (\n        <Drawer\n            elevation={3}\n            className={classes.drawer}\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n            BackdropProps={{\n                invisible: true,\n            }}\n            anchor=\"left\"\n            open={open}\n            onClose={toggleDrawer}\n        >\n            <List className={classes.list}>\n                <ListItem>\n                    <Typography variant=\"h6\" gutterBottom>\n                        MIT CityScope\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Toggle layers visibility\n                    </Typography>\n                </ListItem>\n                {togglesCompsArray}\n            </List>\n        </Drawer>\n    );\n}\n\nexport default TogglesMenu;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Fab from \"@material-ui/core/Fab\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport NearMeIcon from \"@material-ui/icons/NearMe\";\nimport NavigationIcon from \"@material-ui/icons/Navigation\";\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function FABMenu(props) {\n    const useStyles = makeStyles({\n        root: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            position: \"fixed\",\n            paddingLeft: 16,\n            paddingTop: 8,\n            zIndex: 1,\n        },\n    });\n\n    const classes = useStyles();\n\n    const menuState = useSelector((state) => state.MENU);\n    const { handleToggle, toggleDrawer, toggleSaveDrawer } = props;\n\n    return (\n        <List className={classes.root}>\n            <ListItem>\n                <Tooltip title=\"Open Layer + Settings Menu\">\n                    <Fab color=\"default\" onClick={toggleDrawer}>\n                        <MenuIcon />\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Toggle Edit Grid Mode, send to cityIO\">\n                    <Fab color=\"default\" onClick={handleToggle(\"EDIT\")}>\n                        {menuState.includes(\"EDIT\") ? (\n                            <CloudUploadIcon />\n                        ) : (\n                            <EditIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Reset View/Toggle Ortho\">\n                    <Fab color=\"default\" onClick={handleToggle(\"RESET_VIEW\")}>\n                        {menuState.includes(\"RESET_VIEW\") ? (\n                            <NavigationIcon />\n                        ) : (\n                            <NearMeIcon />\n                        )}\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n            <ListItem>\n                <Tooltip title=\"Save/Load Scenario\">\n                    <Fab\n                        disabled={menuState.includes(\"EDIT\")}\n                        color=\"default\"\n                        onClick={toggleSaveDrawer}\n                    >\n                        <InsertDriveFileIcon />\n                    </Fab>\n                </Tooltip>\n            </ListItem>\n        </List>\n    );\n}\n","import { makeStyles } from \"@material-ui/core/styles\";\n\nexport const useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(0, 1),\n\n        display: \"flex\",\n        paddingLeft: 16,\n        paddingRight: 16,\n    },\n    list: {\n        paddingLeft: 16,\n        paddingRight: 16,\n        width: 300,\n        padding: theme.spacing(0, 1),\n    },\n}));\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setLoadingState } from \"../../../../../../redux/actions\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport axios from \"axios\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function SaveAsScenario(props) {\n    const maxNumOfScenarios = 10;\n    const [open, setOpen] = React.useState(false);\n    const [name, setName] = React.useState(\"\");\n    const dispatch = useDispatch();\n    const { tableName, toggleDrawer } = props;\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const useStyles = makeStyles((theme) => ({\n        button: {\n            margin: theme.spacing(1),\n        },\n    }));\n\n    const classes = useStyles();\n\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n\n    const getScenarioIndex = () => {\n        var getURL = settings.cityIO.baseURL + tableName + \"/meta/hashes\";\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const metaDataKeys = Object.keys(res.data);\n                const scenarioIndices = metaDataKeys\n                    .filter((str) => str.includes(\"scenarios\"))\n                    .map((str) => parseInt(str.replace(\"scenarios\", \"\")));\n                console.log(\"successfully got scenarios\");\n                const newScenarioIndex = scenarioIndices.length\n                    ? Math.max(...scenarioIndices) + 1\n                    : 0;\n                postScenario(newScenarioIndex);\n            })\n            .catch((err) => {\n                console.log(\"Error getting scenarios\", err);\n            });\n    };\n\n    const postScenario = (id) => {\n        const data = {\n            GEOGRIDDATA: cityioData.GEOGRIDDATA,\n            info: {\n                id,\n                name,\n            },\n        };\n\n        var postURL =\n            settings.cityIO.baseURL + \"update/\" + tableName + \"/scenarios\" + id;\n\n        const options = {\n            method: \"post\",\n            url: postURL,\n            data,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                console.log(\"Successfully saved grid data and network\");\n                dispatch(setLoadingState(false));\n                toggleDrawer();\n                handleClose();\n            })\n            .catch((error) => {\n                console.log(\"%c\" + error);\n                console.log(\"ERROR:\", error);\n                handleClose();\n            });\n    };\n\n    return (\n        <div style={{ marginLeft: 12 }}>\n            <Button\n                disabled={scenarioNames.length >= maxNumOfScenarios}\n                variant=\"outlined\"\n                color=\"default\"\n                onClick={handleClickOpen}\n                className={classes.button}\n                startIcon={<CloudUploadIcon />}\n            >\n                Save Scenario\n            </Button>\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <DialogTitle id=\"form-dialog-title\">Save Scenario</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Name:</DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        fullWidth\n                        value={name}\n                        onChange={(event) => setName(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"default\">\n                        Cancel\n                    </Button>\n                    <Button\n                        onClick={() => {\n                            dispatch(setLoadingState(true));\n                            getScenarioIndex();\n                        }}\n                        color=\"default\"\n                    >\n                        Save\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n    setScenarioNames,\n    setLoadingState,\n} from \"../../../../../../redux/actions\";\nimport axios from \"axios\";\nimport settings from \"../../../../../../settings/settings.json\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { _postMapEditsToCityIO } from \"../../../../BaseMap/BaseMapUtils\";\nimport CancelIcon from \"@material-ui/icons/Cancel\";\nimport { getScenarioIndices } from \"../../../../CityIO/utils\";\n\nfunction ScenarioItems(props) {\n    const { toggleDrawer } = props;\n    const cityioData = useSelector((state) => state.CITYIO);\n    const scenarioNames = useSelector((state) => state.SCENARIO_NAMES);\n    const dispatch = useDispatch();\n\n    const getScenario = (tableName, id) => {\n        const getURL = settings.cityIO.baseURL + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                const { GEOGRIDDATA } = res.data;\n                _postMapEditsToCityIO(\n                    GEOGRIDDATA,\n                    cityioData.tableName,\n                    \"/GEOGRIDDATA\"\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const deleteScenario = (tableName, id) => {\n        const getURL =\n            settings.cityIO.baseURL + \"clear/\" + tableName + \"/scenarios\" + id;\n        const options = {\n            method: \"get\",\n            url: getURL,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n        axios(options)\n            .then((res) => {\n                getScenarioIndices(\n                    cityioData.tableName,\n                    (data) => dispatch(setScenarioNames(data)),\n                    (state) => dispatch(setLoadingState(state))\n                );\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    const generateListItems = () =>\n        scenarioNames.map((scenario) => (\n            <ListItem key={scenario.id}>\n                <Button\n                    style={{ textTransform: \"none\" }}\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        getScenario(cityioData.tableName, scenario.id);\n                        toggleDrawer();\n                    }}\n                >\n                    <Typography variant=\"h6\">{scenario.name}</Typography>\n                </Button>\n                <Button\n                    onClick={() => {\n                        dispatch(setLoadingState(true));\n                        deleteScenario(cityioData.tableName, scenario.id);\n                    }}\n                >\n                    <CancelIcon />\n                </Button>\n            </ListItem>\n        ));\n\n    return <div>{generateListItems()}</div>;\n}\n\nexport default ScenarioItems;\n","import React from \"react\";\nimport { useStyles } from \"./styles\";\nimport SaveAsScenario from \"./components/SaveAsScenario\";\nimport ScenarioItems from \"./components/ScenarioItems\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport List from \"@material-ui/core/List\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nexport default function SaveMenu(props) {\n    const classes = useStyles();\n\n    const { tableName, open, toggleDrawer } = props;\n\n    return (\n        <Drawer\n            className={classes.root}\n            BackdropProps={{\n                invisible: true,\n            }}\n            classes={{\n                paper: classes.paper,\n            }}\n            anchor=\"left\"\n            open={open}\n            onClose={toggleDrawer}\n        >\n            <List className={classes.list}>\n                <ListItem>\n                    <Typography variant=\"h5\" gutterBottom>\n                        Scenarios\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\" gutterBottom>\n                        Use this menu to save, load or delete design scenarios.\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <SaveAsScenario\n                        tableName={tableName}\n                        toggleDrawer={toggleDrawer}\n                    />\n                </ListItem>\n                <ScenarioItems toggleDrawer={toggleDrawer} />\n            </List>\n        </Drawer>\n    );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { listenToMenuUI } from \"../../../redux/actions\";\nimport EditMenu from \"./EditMenu/EditMenu\";\nimport TogglesMenu from \"./TogglesMenu\";\nimport FABMenu from \"./FABMenu\";\nimport SaveMenu from \"./SaveMenu\";\n\nfunction MenuContainer(props) {\n    const { tableName } = props;\n    const menuState = useSelector((state) => state.MENU);\n    const dispatch = useDispatch();\n\n    const [state, setState] = React.useState({\n        drawerOpen: false,\n        saveDrawerOpen: false,\n    });\n\n    const toggleDrawer = () => {\n        setState({ ...state, drawerOpen: !state.drawerOpen });\n    };\n\n    const toggleSaveDrawer = () => {\n        setState({ ...state, saveDrawerOpen: !state.saveDrawerOpen });\n    };\n\n    const handleToggle = (value) => () => {\n        const i = menuState.indexOf(value);\n        const updatedMenuState = [...menuState];\n        if (i === -1) {\n            updatedMenuState.push(value);\n        } else {\n            updatedMenuState.splice(i, 1);\n        }\n\n        dispatch(listenToMenuUI(updatedMenuState));\n    };\n\n    const showEditMenu = menuState && menuState.includes(\"EDIT\");\n\n    return (\n        <div>\n            <TogglesMenu\n                open={state.drawerOpen}\n                toggleDrawer={toggleDrawer}\n                handleToggle={handleToggle}\n            />\n            <FABMenu\n                toggleDrawer={toggleDrawer}\n                handleToggle={handleToggle}\n                toggleSaveDrawer={toggleSaveDrawer}\n            />\n            {showEditMenu && <EditMenu key={\"EDIT\"} />}\n            <SaveMenu\n                tableName={tableName}\n                handleToggle={handleToggle}\n                toggleDrawer={toggleSaveDrawer}\n                open={state.saveDrawerOpen}\n            />\n        </div>\n    );\n}\n\nexport default MenuContainer;\n","import React from \"react\";\n\n/**\n *\n * Cell meta comp\n */\n\nexport const CellMeta = (props) => {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n\n    return (\n        <div\n            style={{\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                pointerEvents: \"none\",\n                backgroundColor: \"rgba(0,0,0,0.5)\",\n                padding: \"1vw\",\n                color: \"rgba(255,255,255,0.9)\",\n                zIndex: 1,\n                left: mousePos.clientX,\n                top: mousePos.clientY,\n                fontSize: \"0.65em\",\n                fontWeight: 500,\n            }}\n        >\n            <p>\n                Type:\n                {props.hoveredObj.object.properties.name}\n            </p>\n            <p>\n                Floors:\n                {props.hoveredObj.object.properties.height}\n            </p>\n            <p>\n                ID:\n                {props.hoveredObj.object.properties.id}\n            </p>\n        </div>\n    );\n};\n","import React from \"react\";\nimport { testHex, hexToRgb } from \"../BaseMapUtils\";\nimport ErrorOutlineIcon from \"@material-ui/icons/ErrorOutline\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport const PaintBrush = (props) => {\n    if (!props.mousePos || !props.hoveredCells) return null;\n    const selectedType = props.selectedType;\n\n    const isInteractiveCell = props.hoveredCells.object.properties.interactive;\n    const mousePos = props.mousePos;\n    const divSize = props.divSize;\n    let col = selectedType.color;\n    if (testHex(col)) {\n        col = hexToRgb(col);\n    }\n    const color = \"rgb(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \")\";\n    const colorTrans = \"rgba(\" + col[0] + \",\" + col[1] + \",\" + col[2] + \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n\n    let msg = isInteractiveCell ? selectedType.name : \"Not-interactive\";\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: color,\n                color: color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.8em\",\n                }}\n            >\n                {!isInteractiveCell && <ErrorOutlineIcon />}\n                {msg}:\n            </div>\n        </div>\n    );\n};\n","import React from \"react\";\n\n/**\n * cell selection\n * meta div\n * @param {*} props\n */\n\nexport default function SelectionTarget(props) {\n    if (!props.mousePos) return null;\n    const mousePos = props.mousePos;\n    const selectedType = props.selectedType;\n    const divSize = props.divSize;\n\n    const colorTrans =\n        \"rgba(\" +\n        selectedType.color[0] +\n        \",\" +\n        selectedType.color[1] +\n        \",\" +\n        selectedType.color[2] +\n        \",0.6)\";\n    let mouseX = mousePos.clientX - divSize / 2;\n    let mouseY = mousePos.clientY - divSize / 2;\n    return (\n        <div\n            style={{\n                border: \"2px solid\",\n                backgroundColor: props.mouseDown ? colorTrans : \"rgba(0,0,0,0)\",\n                borderColor: selectedType.color,\n                color: selectedType.color,\n                borderRadius: \"15%\",\n                position: \"fixed\",\n                zIndex: 1,\n                pointerEvents: \"none\",\n                width: divSize,\n                height: divSize,\n                left: mouseX,\n                top: mouseY,\n            }}\n        >\n            <div\n                style={{\n                    position: \"relative\",\n                    left: divSize + 10,\n                    fontSize: \"0.5em\",\n                }}\n            >\n                {selectedType.name}\n            </div>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport EditorBrush from \"./EditorBrush\";\nimport { connect } from \"react-redux\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { GeoJsonLayer } from \"deck.gl\";\nimport { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\nimport settings from \"../GridEditorSettings.json\";\nimport { listenToBaseMapCenter } from \"../../../redux/actions\";\n\nexport const _hexToRgb = (hex) => {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result\n        ? [\n              parseInt(result[1], 16),\n              parseInt(result[2], 16),\n              parseInt(result[3], 16),\n          ]\n        : null;\n};\n\nclass BaseMap extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n\n        this.dirLightSettings = {\n            timestamp: Date.UTC(2019, 7, 1, 12),\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n        // setup sun effects\n        this._setupEffects();\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n    }\n\n    _toggleOrthoView = (viewState) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n    };\n\n    _onViewStateChange = ({ viewState }) => {\n        this.setState({ viewState });\n    };\n\n    componentDidUpdate = (prevProps) => {\n        if (this.props.mapCenter !== prevProps.mapCenter)\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    latitude: this.props.mapCenter.latCenter,\n                    longitude: this.props.mapCenter.lonCenter,\n                    pitch: 0,\n                    bearing: 0,\n                    orthographic: false,\n                },\n            });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                latitude: settings.GEOGRID.properties.header.latitude,\n                longitude: settings.GEOGRID.properties.header.longitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 0,\n                orthographic: true,\n            },\n        });\n    }\n\n    _setupEffects() {\n        const ambientLight = new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 0.85,\n        });\n        const dirLight = new _SunLight(this.dirLightSettings);\n        const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n        lightingEffect.shadowColor = [0, 0, 0, 0.5];\n        this._effects = [lightingEffect];\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        if (!this.props.selectedType) return;\n        const { height, name, color, interactive } = this.props.selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n\n        multiSelectedObj.forEach((selected) => {\n            let thisCellProps = selected.object.properties;\n            thisCellProps.color = _hexToRgb(color);\n            thisCellProps.height = parseInt(height);\n            thisCellProps.name = name;\n            if (interactive !== \"No\") {\n                thisCellProps.interactive = interactive;\n            } else {\n                delete thisCellProps.interactive;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderSelectionTarget = () => {\n        return (\n            this.props.selectedType && (\n                <EditorBrush\n                    mousePos={this.state.mousePos}\n                    selectedType={this.props.selectedType}\n                    divSize={this.state.pickingRadius}\n                    mouseDown={this.state.mouseDown}\n                />\n            )\n        );\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        // avoid common clicks\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        let layers = [];\n        layers.push(\n            new GeoJsonLayer({\n                id: \"GRID\",\n                opacity: 0.5,\n                stroked: false,\n                filled: true,\n                wireframe: true,\n                data: this.props.createdGrid,\n                visible: true,\n                pickable: true,\n                extruded: true,\n                lineWidthScale: 1,\n                lineWidthMinPixels: 1,\n                getElevation: (d) => d.properties.height,\n                getFillColor: (d) => d.properties.color,\n\n                onClick: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n\n                onDrag: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    )\n                        this._handleGridcellEditing(event);\n                },\n                onDragStart: (event, cellInfo) => {\n                    if (\n                        !cellInfo.rightButton &&\n                        this.state.keyDownState !== \"Shift\"\n                    ) {\n                        this.setState({ draggingWhileEditing: true });\n                    }\n                },\n                onDragEnd: () => {\n                    this.setState({ draggingWhileEditing: false });\n                },\n                updateTriggers: {\n                    getFillColor: this.state.selectedCellsState,\n                    getElevation: this.state.selectedCellsState,\n                },\n                transitions: {\n                    getFillColor: 500,\n                    getElevation: 500,\n                },\n            })\n        );\n\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                {this._renderSelectionTarget()}\n\n                <DeckGL\n                    // sets the cursor on paint\n                    // getCursor={() => \"none\"}\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    effects={this._effects}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.sat}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = {\n    listenToBaseMapCenter: listenToBaseMapCenter,\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        selectedType: state.ROW_EDIT,\n        mapCenter: state.BASE_MAP_CENTER,\n        createdGrid: state.GRID_CREATED,\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BaseMap);\n","import React, { Component } from \"react\";\nimport { CellMeta } from \"./CellMeta/CellMeta\";\nimport { PaintBrush } from \"./PaintBrush/PaintBrush\";\nimport { connect } from \"react-redux\";\nimport { listenToSlidersEvents } from \"../../../redux/actions\";\nimport {\n    _proccessAccessData,\n    _proccessGridData,\n    _postMapEditsToCityIO,\n    testHex,\n    hexToRgb,\n} from \"./BaseMapUtils\";\nimport { StaticMap } from \"react-map-gl\";\nimport DeckGL from \"@deck.gl/react\";\nimport { TripsLayer } from \"@deck.gl/geo-layers\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { HeatmapLayer, PathLayer, GeoJsonLayer } from \"deck.gl\";\nimport { LightingEffect, AmbientLight, _SunLight } from \"@deck.gl/core\";\nimport settings from \"../../../settings/settings.json\";\nimport { _hexToRgb } from \"../../GridEditor/EditorMap/EditorMap\";\n\nclass Map extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            menu: [],\n            cityioData: null,\n            selectedType: null,\n            draggingWhileEditing: false,\n            selectedCellsState: null,\n            pickingRadius: 40,\n            viewState: settings.map.initialViewState,\n        };\n        this.animationFrame = null;\n    }\n\n    componentWillUnmount() {\n        if (this.animationFrame) {\n            window.cancelAnimationFrame(this.animationFrame);\n        }\n    }\n\n    componentDidMount() {\n        // fix deck view rotate\n        this._rightClickViewRotate();\n        // setup sun effects\n        this._setupSunEffects();\n        // zoom map on CS table location\n        this._setViewStateToTableHeader();\n        // start ainmation/sim/roate\n        this._animate();\n    }\n\n    /**\n     * handels events as they derived from redux props\n     */\n    componentDidUpdate(prevProps, prevState) {\n        this._updateSunDirecation(this.props.sliders.time[1]);\n\n        if (prevProps.menu !== prevState.menu) {\n            this.setState({ menu: this.props.menu });\n        }\n\n        const { cityioData } = this.props;\n        if (prevState.cityioData !== cityioData) {\n            // get cityio data from props\n\n            this.setState({\n                cityioData: cityioData,\n                GEOGRID: _proccessGridData(cityioData),\n            });\n\n            // ! workaround for preloading access layer data\n            if (cityioData.access) {\n                this.setState({ access: _proccessAccessData(cityioData) });\n            }\n        }\n\n        // toggle ABM animation\n        if (\n            !prevProps.menu.includes(\"ABM\") &&\n            this.props.menu.includes(\"ABM\")\n        ) {\n            this.setState({ animateABM: true });\n        } else if (\n            prevProps.menu.includes(\"ABM\") &&\n            !this.props.menu.includes(\"ABM\")\n        ) {\n            this.setState({ animateABM: false });\n        }\n\n        // toggle rotate animation\n        if (\n            !prevProps.menu.includes(\"ROTATE\") &&\n            this.props.menu.includes(\"ROTATE\")\n        ) {\n            this.setState({ animateCamera: true });\n        } else if (\n            prevProps.menu.includes(\"ROTATE\") &&\n            !this.props.menu.includes(\"ROTATE\")\n        ) {\n            this.setState({ animateCamera: false });\n        }\n        if (\n            !prevProps.menu.includes(\"SHADOWS\") &&\n            this.props.menu.includes(\"SHADOWS\")\n        ) {\n            this._effects[0].shadowColor = [0, 0, 0, 0.5];\n        }\n\n        if (\n            prevProps.menu.includes(\"SHADOWS\") &&\n            !this.props.menu.includes(\"SHADOWS\")\n        ) {\n            this._effects[0].shadowColor = [0, 0, 0, 0];\n        }\n        //  toggle edit mode and send to cityio\n        if (\n            prevProps.menu.includes(\"EDIT\") &&\n            !this.props.menu.includes(\"EDIT\")\n        ) {\n            // take props from grid and send\n            let dataProps = [];\n            for (let i = 0; i < this.state.GEOGRID.features.length; i++) {\n                dataProps[i] = this.state.GEOGRID.features[i].properties;\n            }\n            _postMapEditsToCityIO(\n                dataProps,\n                cityioData.tableName,\n                \"/GEOGRIDDATA\"\n            );\n        }\n\n        // toggle reset view mode\n        if (\n            !prevProps.menu.includes(\"RESET_VIEW\") &&\n            this.props.menu.includes(\"RESET_VIEW\")\n        ) {\n            this._setViewStateToTableHeader();\n        } else if (\n            prevProps.menu.includes(\"RESET_VIEW\") &&\n            !this.props.menu.includes(\"RESET_VIEW\")\n        ) {\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    pitch: 45,\n                },\n            });\n        }\n    }\n\n    _onViewStateChange = ({ viewState }) => {\n        viewState.orthographic = this.props.menu.includes(\"RESET_VIEW\")\n            ? true\n            : false;\n\n        this.setState({ viewState });\n    };\n\n    /**\n     * resets the camera viewport\n     * to cityIO header data\n     * https://github.com/uber/deck.gl/blob/master/test/apps/viewport-transitions-flyTo/src/app.js\n     */\n    _setViewStateToTableHeader() {\n        const header = this.props.cityioData.GEOGRID.properties.header;\n\n        this.setState({\n            viewState: {\n                ...this.state.viewState,\n                longitude: header.longitude,\n                latitude: header.latitude,\n                zoom: 15,\n                pitch: 0,\n                bearing: 360 - header.rotation,\n                orthographic: true,\n            },\n        });\n    }\n\n    _setupSunEffects() {\n        const ambientLight = new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 0.85,\n        });\n        let dirLightSettings = {\n            timestamp: 1554927200000,\n            color: [255, 255, 255],\n            intensity: 1.0,\n            _shadow: true,\n        };\n        const dirLight = new _SunLight(dirLightSettings);\n        const lightingEffect = new LightingEffect({ ambientLight, dirLight });\n        lightingEffect.shadowColor = [0, 0, 0, 0.5];\n        this._effects = [lightingEffect];\n    }\n\n    _updateSunDirecation = (time) => {\n        var currentDateMidnight = new Date();\n        currentDateMidnight.setHours(0, 0, 0, 0);\n        var date = new Date(currentDateMidnight.getTime() + time * 1000);\n        this._effects[0].directionalLights[0].timestamp = Date.UTC(\n            date.getFullYear(),\n            date.getMonth(),\n            date.getDay(),\n            date.getHours(),\n            date.getMinutes(),\n            date.getSeconds()\n        );\n    };\n\n    _animate() {\n        if (this.state.animateCamera) {\n            let bearing = this.state.viewState.bearing\n                ? this.state.viewState.bearing\n                : 0;\n            bearing < 360 ? (bearing += 0.05) : (bearing = 0);\n            this.setState({\n                viewState: {\n                    ...this.state.viewState,\n                    bearing: bearing,\n                },\n            });\n        }\n\n        if (this.state.animateABM) {\n            const time = this.props.sliders.time[1];\n            const speed = this.props.sliders.speed;\n            const startHour = this.props.sliders.time[0];\n            const endHour = this.props.sliders.time[2];\n            let t = parseInt(time) + parseInt(speed);\n            if (time < startHour || time > endHour) {\n                t = startHour;\n            }\n\n            this.props.listenToSlidersEvents({\n                ...this.props.sliders,\n                time: [\n                    this.props.sliders.time[0],\n                    t,\n                    this.props.sliders.time[2],\n                ],\n            });\n\n            // upddate sun position\n            this._updateSunDirecation(t);\n        }\n        // ! start the req animation frame\n        this.animationFrame = window.requestAnimationFrame(\n            this._animate.bind(this)\n        );\n    }\n\n    /**\n     * Description. fix deck issue\n     * with rotate right botton\n     */\n    _rightClickViewRotate() {\n        document\n            .getElementById(\"deckgl-wrapper\")\n            .addEventListener(\"contextmenu\", (evt) => evt.preventDefault());\n    }\n\n    /**\n     * Description. uses deck api to\n     * collect objects in a region\n     * @argument{object} e  picking event\n     */\n    _mulipleObjPicked = (e) => {\n        const dim = this.state.pickingRadius;\n        const x = e.x - dim / 2;\n        const y = e.y - dim / 2;\n        let mulipleObj = this.deckGL.pickObjects({\n            x: x,\n            y: y,\n            width: dim,\n            height: dim,\n        });\n        return mulipleObj;\n    };\n\n    /**\n     * Description. allow only to pick cells that are\n     *  not of CityScope TUI & that are interactable\n     * so to not overlap TUI activity\n     */\n    _handleGridcellEditing = (e) => {\n        const { selectedType } = this.props;\n        const { height, color, name } = selectedType;\n        const multiSelectedObj = this._mulipleObjPicked(e);\n        multiSelectedObj.forEach((selected) => {\n            const thisCellProps = selected.object.properties;\n            if (thisCellProps && thisCellProps.interactive) {\n                thisCellProps.color = testHex(color) ? hexToRgb(color) : color;\n                thisCellProps.height = height;\n                thisCellProps.name = name;\n            }\n        });\n        this.setState({\n            selectedCellsState: multiSelectedObj,\n        });\n    };\n\n    /**\n     * Description.\n     * draw target area around mouse\n     */\n    _renderPaintBrush = () => {\n        if (this.props.menu.includes(\"EDIT\")) {\n            return (\n                this.props.selectedType && (\n                    <PaintBrush\n                        mousePos={this.state.mousePos}\n                        selectedType={this.props.selectedType}\n                        divSize={this.state.pickingRadius}\n                        mouseDown={this.state.mouseDown}\n                        hoveredCells={this.state.hoveredObj}\n                    />\n                )\n            );\n        } else {\n            return (\n                this.state.hoveredObj && (\n                    <CellMeta\n                        mousePos={this.state.mousePos}\n                        hoveredObj={this.state.hoveredObj}\n                    />\n                )\n            );\n        }\n    };\n\n    _handleKeyUp = () => {\n        this.setState({ keyDownState: null });\n    };\n\n    _handleKeyDown = (e) => {\n        this.setState({ keyDownState: e.nativeEvent.key });\n    };\n\n    /**\n     * remap line width\n     */\n    _remapValues = (value) => {\n        let remap =\n            value > 15 && value < 25 ? 3 : value < 15 && value > 10 ? 12 : 30;\n        return remap;\n    };\n\n    /**\n     * renders deck gl layers\n     */\n    _renderLayers() {\n        const zoomLevel = this.state.viewState.zoom;\n        const { cityioData, selectedType, menu } = this.props;\n\n        let layers = [];\n\n        if (menu.includes(\"ABM\")) {\n            layers.push(\n                new TripsLayer({\n                    id: \"ABM\",\n                    visible: menu.includes(\"ABM\") ? true : false,\n                    data: cityioData.ABM2.trips,\n                    getPath: (d) => d.path,\n                    getTimestamps: (d) => d.timestamps,\n                    getColor: (d) => {\n                        let col = _hexToRgb(\n                            cityioData.ABM2.attr.mode[d.mode].color\n                        );\n                        return col;\n                    },\n\n                    getWidth: 1,\n                    widthScale: this._remapValues(zoomLevel),\n                    opacity: 0.8,\n                    rounded: true,\n                    trailLength: 500,\n                    currentTime: this.props.sliders.time[1],\n                })\n            );\n        }\n\n        if (menu.includes(\"AGGREGATED_TRIPS\")) {\n            layers.push(\n                new PathLayer({\n                    id: \"AGGREGATED_TRIPS\",\n                    visible: menu.includes(\"AGGREGATED_TRIPS\") ? true : false,\n                    _shadow: false,\n                    data: cityioData.ABM2.trips,\n                    getPath: (d) => {\n                        const noisePath =\n                            Math.random() < 0.5\n                                ? Math.random() * 0.00005\n                                : Math.random() * -0.00005;\n                        for (let i in d.path) {\n                            d.path[i][0] = d.path[i][0] + noisePath;\n                            d.path[i][1] = d.path[i][1] + noisePath;\n                            d.path[i][2] = d.mode[0] * 2;\n                        }\n                        return d.path;\n                    },\n                    getColor: (d) => {\n                        let col = _hexToRgb(\n                            cityioData.ABM2.attr.mode[d.mode].color\n                        );\n                        return col;\n                    },\n                    opacity: 0.2,\n                    getWidth: 1.5,\n                })\n            );\n        }\n\n        if (menu.includes(\"GRID\")) {\n            layers.push(\n                new GeoJsonLayer({\n                    id: \"GRID\",\n                    data: this.state.GEOGRID,\n                    visible: menu.includes(\"GRID\") ? true : false,\n                    pickable: true,\n                    extruded: true,\n                    wireframe: true,\n                    lineWidthScale: 1,\n                    lineWidthMinPixels: 2,\n                    getElevation: (d) => d.properties.height,\n                    getFillColor: (d) => d.properties.color,\n\n                    onClick: (event) => {\n                        if (\n                            selectedType &&\n                            menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        )\n                            this._handleGridcellEditing(event);\n                    },\n\n                    onDrag: (event) => {\n                        if (\n                            selectedType &&\n                            menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        )\n                            this._handleGridcellEditing(event);\n                    },\n\n                    onDragStart: () => {\n                        if (\n                            selectedType &&\n                            menu.includes(\"EDIT\") &&\n                            this.state.keyDownState !== \"Shift\"\n                        ) {\n                            this.setState({ draggingWhileEditing: true });\n                        }\n                    },\n\n                    onHover: (e) => {\n                        if (e.object) {\n                            this.setState({ hoveredObj: e });\n                        }\n                    },\n\n                    onDragEnd: () => {\n                        this.setState({ draggingWhileEditing: false });\n                    },\n                    updateTriggers: {\n                        getFillColor: this.state.selectedCellsState,\n                        getElevation: this.state.selectedCellsState,\n                    },\n                    transitions: {\n                        getFillColor: 500,\n                        getElevation: 500,\n                    },\n                })\n            );\n        }\n\n        if (menu.includes(\"ACCESS\")) {\n            layers.push(\n                new HeatmapLayer({\n                    id: \"ACCESS\",\n                    visible: menu.includes(\"ACCESS\"),\n                    colorRange: settings.map.layers.heatmap.colors,\n                    radiusPixels: 200,\n                    opacity: 0.25,\n                    data: this.state.access,\n                    getPosition: (d) => d.coordinates,\n                    getWeight: (d) => d.values[this.props.accessToggle],\n                    updateTriggers: {\n                        getWeight: [this.props.accessToggle],\n                    },\n                })\n            );\n        }\n\n        return layers;\n    }\n\n    render() {\n        return (\n            <div\n                className=\"baseMap\"\n                onKeyDown={this._handleKeyDown}\n                onKeyUp={this._handleKeyUp}\n                onMouseMove={(e) =>\n                    this.setState({\n                        mousePos: e.nativeEvent,\n                    })\n                }\n                onMouseUp={() =>\n                    this.setState({\n                        mouseDown: false,\n                    })\n                }\n                onMouseDown={() =>\n                    this.setState({\n                        mouseDown: true,\n                    })\n                }\n            >\n                <React.Fragment>{this._renderPaintBrush()}</React.Fragment>\n\n                <DeckGL\n                    ref={(ref) => {\n                        // save a reference to the Deck instance\n                        this.deckGL = ref && ref.deck;\n                    }}\n                    viewState={this.state.viewState}\n                    onViewStateChange={this._onViewStateChange}\n                    layers={this._renderLayers()}\n                    effects={this._effects}\n                    controller={{\n                        touchZoom: true,\n                        touchRotate: true,\n                        dragPan: !this.state.draggingWhileEditing,\n                        dragRotate: !this.state.draggingWhileEditing,\n                        keyboard: false,\n                    }}\n                >\n                    <StaticMap\n                        asyncRender={false}\n                        dragRotate={true}\n                        reuseMaps={true}\n                        mapboxApiAccessToken={\n                            process.env.REACT_APP_MAPBOX_TOKEN\n                        }\n                        mapStyle={settings.map.mapStyle.blue}\n                        preventStyleDiffing={true}\n                    />\n                </DeckGL>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        sliders: state.SLIDERS,\n        menu: state.MENU,\n        accessToggle: state.ACCESS_TOGGLE,\n        selectedType: state.SELECTED_TYPE,\n    };\n};\n\nconst mapDispatchToProps = {\n    listenToSlidersEvents: listenToSlidersEvents,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Map);\n","import { Matrix3d, RectPoints, Vector } from \"./ProjectionMapping\";\nconst { solve } = require(\"numeric\");\n\nexport const round = (num: number, precision: number) => {\n    var factor = Math.pow(10, precision);\n    var tempNumber = num * factor;\n    var roundedTempNumber = Math.round(tempNumber);\n    return roundedTempNumber / factor;\n};\n\n// tslint:disable-next-line:no-any\nexport const range = (num: number) =>\n    (Array as any)(num)\n        .fill()\n        .map((_: any, i: any) => i * i);\n\nexport const transformPointsToMatrix = (\n    sourcePoints: RectPoints,\n    targetPoints: RectPoints\n): Matrix3d => {\n    const a: number[][] = [];\n    const b: number[] = [];\n\n    for (let i = 0, n = sourcePoints.length; i < n; ++i) {\n        const [fromX, fromY] = sourcePoints[i];\n        const [toX, toY] = targetPoints[i];\n\n        a.push(\n            [fromX, fromY, 1, 0, 0, 0, -fromX * toX, -fromY * toX],\n            [0, 0, 0, fromX, fromY, 1, -fromX * toY, -fromY * toY]\n        );\n\n        b.push(toX, toY);\n    }\n\n    const h = solve(a, b, true);\n\n    return [\n        h[0],\n        h[3],\n        0,\n        h[6],\n        h[1],\n        h[4],\n        0,\n        h[7],\n        0,\n        0,\n        1,\n        0,\n        h[2],\n        h[5],\n        0,\n        1,\n    ].map((num) => round(num, 10)) as Matrix3d;\n};\n\nexport const matrixToTransform = (matrix: Matrix3d) =>\n    `matrix3d(${matrix.join(\", \")})`;\n\nexport const vectorToTransform = (vector: Vector) =>\n    `translate(${vector[0]}px, ${vector[1]}px)`;\n","import * as React from \"react\";\nimport { Anchor, Vector } from \"./ProjectionMapping\";\nimport { vectorToTransform } from \"./util\";\n\nconst anchorSize = 30;\nconst halfAnchor = anchorSize / 2;\n\nconst styles = {\n    container: {\n        width: anchorSize,\n        height: anchorSize,\n        borderRadius: \"50%\",\n        position: \"absolute\" as \"absolute\",\n        border: \"4px solid white\",\n        cursor: \"move\",\n    },\n    \"top-left\": {\n        left: -halfAnchor,\n        top: -halfAnchor,\n    },\n    \"bottom-left\": {\n        left: -halfAnchor,\n        bottom: -halfAnchor,\n    },\n    \"top-right\": {\n        top: -halfAnchor,\n        right: -halfAnchor,\n    },\n    \"bottom-right\": {\n        bottom: -halfAnchor,\n        right: -halfAnchor,\n    },\n};\n\nexport interface Props {\n    position: Anchor;\n    onMouseEnter?: (position: Anchor) => void;\n    // tslint:disable-next-line:no-any\n    onMouseDown: (evt: any, position: Anchor) => void;\n    onMouseUp: (position: Anchor) => void;\n    translation: Vector;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nexport const AnchorComponent: React.StatelessComponent<Props> = ({\n    position,\n    translation,\n    onMouseEnter,\n    onMouseDown,\n    onMouseUp,\n    className = \"\",\n    style = {},\n}) => (\n    <div\n        onMouseEnter={() => onMouseEnter && onMouseEnter(position)}\n        onMouseDown={(evt) => onMouseDown(evt, position)}\n        onMouseUp={() => onMouseUp(position)}\n        className={className}\n        style={{\n            ...styles.container,\n            ...styles[position],\n            ...style,\n            transform: vectorToTransform(translation),\n        }}\n    />\n);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst useStyles = makeStyles(theme => ({\n    button: {\n        margin: theme.spacing(1),\n        position: \"fixed\",\n        top: \"50vh\",\n        zIndex: 1000\n    }\n}));\n\nexport default function DeleteLocalStorage() {\n    const classes = useStyles();\n\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\">\n            <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<DeleteIcon />}\n            >\n                Reset Projection Mapping\n            </Button>\n        </Grid>\n    );\n}\n","import * as React from \"react\";\nimport { AnchorComponent } from \"./anchor\";\nimport {\n    matrixToTransform,\n    transformPointsToMatrix,\n    vectorToTransform,\n} from \"./util\";\n\nimport DeleteLocalStorage from \"./deleteLocalStorage\";\n\n// Component interfaces\nexport interface Props {\n    style?: React.CSSProperties;\n    className?: string;\n    isEditMode?: boolean;\n    x?: number;\n    y?: number;\n    anchorStyle?: React.CSSProperties;\n    anchorClassName?: string;\n}\n\nexport interface Context {\n    isEditMode: boolean;\n}\n\nexport interface State {\n    matrix: Matrix3d;\n    translateDelta: { [key: string]: Vector };\n    sourcePoints?: RectPoints;\n    transformOrigin: Vector;\n    containerTranslate: Vector;\n}\n\nconst styles = {\n    container: {\n        position: \"relative\" as \"relative\",\n    },\n};\n\n// Sorted\nexport type Anchor = \"top-left\" | \"top-right\" | \"bottom-right\" | \"bottom-left\";\nconst anchors: Anchor[] = [\n    \"top-left\",\n    \"top-right\",\n    \"bottom-right\",\n    \"bottom-left\",\n];\n\n// 4x4 matrix\nexport type Matrix3d = [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n];\n\n// top-left, top-right, bottom-right, bottom-left\nexport type RectPoints = [Vector, Vector, Vector, Vector];\n\nexport type Vector = [number, number]; // [x, y]\n\nconst defaultMatrix: Matrix3d = [\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1,\n    0,\n    0,\n    0,\n    0,\n    1, // second and third for x and y position of element\n];\n\nconst _setDeltaVal = () => {\n    let deltaInitVals: any = {};\n    anchors.forEach((e) => {\n        deltaInitVals[e] = [0, 0];\n    });\n    return deltaInitVals;\n};\n\nexport class ProjectionMapping extends React.Component<Props, State> {\n    container: HTMLElement | null;\n    layerTranslateDelta: Vector | undefined;\n    anchorTranslateDelta: Vector | undefined;\n    isAnchorDragging = false;\n    targetPoints: RectPoints;\n    anchorMoving: Anchor | undefined;\n    state: State = {\n        matrix: defaultMatrix,\n        translateDelta: _setDeltaVal(),\n        sourcePoints: undefined,\n        transformOrigin: [0, 0],\n        containerTranslate: [this.props.x || 0, this.props.y || 0],\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.addEventListener(\"mousemove\", this.onMouseMove);\n        if (this.container) {\n            const { width, height } = this.container.getBoundingClientRect();\n            const sourcePoints = [\n                [0, 0],\n                [width, 0],\n                [width, height],\n                [0, height],\n            ] as RectPoints;\n\n            this.targetPoints = [...sourcePoints] as RectPoints;\n            this.setState({ sourcePoints });\n        }\n    }\n    componentDidUpdate(prevProps: any, prevState: State) {\n        // if entered keystone mode\n        if (!prevProps.isEditMode && this.props.isEditMode) {\n            // if found prev. keystone data\n            if (localStorage.getItem(\"projMap\")) {\n                console.log(\"loading prev. projMap...\");\n                let ls: any = localStorage.getItem(\"projMap\");\n                this.setState(JSON.parse(ls));\n            }\n            // if left keystone mode\n        } else if (prevProps.isEditMode && !this.props.isEditMode) {\n            console.log(\"saving edited projMap...\");\n            // save whatever keystone was in state\n            localStorage.setItem(\"projMap\", JSON.stringify(prevState));\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"mousemove\", this.onAnchorMouseMove);\n        window.removeEventListener(\"mousemove\", this.onMouseMove);\n    }\n\n    onAnchorMouseDown = (evt: any, position: any) => {\n        evt.stopPropagation();\n        this.anchorTranslateDelta = [\n            evt.pageX - this.state.translateDelta[position][0],\n            evt.pageY - this.state.translateDelta[position][1],\n        ];\n\n        this.anchorMoving = position;\n    };\n\n    onAnchorMouseMove = (evt: any) => {\n        if (\n            !this.anchorTranslateDelta ||\n            !this.state.sourcePoints ||\n            !this.anchorMoving\n        ) {\n            return;\n        }\n        evt.preventDefault();\n        evt.stopPropagation();\n        const vectorIndexToModify = anchors.indexOf(this.anchorMoving);\n\n        const deltaX = evt.pageX - this.anchorTranslateDelta[0];\n        const deltaY = evt.pageY - this.anchorTranslateDelta[1];\n\n        this.targetPoints[vectorIndexToModify] = [\n            this.state.sourcePoints[vectorIndexToModify][0] + deltaX,\n            this.state.sourcePoints[vectorIndexToModify][1] + deltaY,\n        ];\n\n        this.setState({\n            matrix: transformPointsToMatrix(\n                this.state.sourcePoints,\n                this.targetPoints!\n            ),\n            translateDelta: {\n                ...this.state.translateDelta,\n                [this.anchorMoving]: [deltaX, deltaY],\n            },\n        });\n    };\n\n    onAnchorMouseUp = (position: any) => {\n        this.anchorTranslateDelta = undefined;\n        this.anchorMoving = undefined;\n    };\n\n    onMouseUp = () => {\n        this.layerTranslateDelta = undefined;\n    };\n\n    onMouseMove = (evt: any) => {\n        if (!this.layerTranslateDelta || !this.props.isEditMode) {\n            return;\n        }\n\n        const newVector: Vector = [\n            evt.pageX - this.layerTranslateDelta[0],\n            evt.pageY - this.layerTranslateDelta[1],\n        ];\n\n        this.setState({\n            containerTranslate: newVector,\n        });\n    };\n\n    onMouseDown = (evt: any) => {\n        const { containerTranslate } = this.state;\n        this.layerTranslateDelta = [\n            evt.pageX - containerTranslate[0],\n            evt.pageY - containerTranslate[1],\n        ];\n    };\n\n    _clearLocalStraoge = () => {\n        if (localStorage.getItem(\"projMap\")) {\n            localStorage.removeItem(\"projMap\");\n        }\n        window.location.reload();\n    };\n\n    render() {\n        const {\n            style,\n            isEditMode,\n            className,\n            anchorStyle,\n            anchorClassName,\n        } = this.props;\n        const {\n            translateDelta,\n            matrix,\n            containerTranslate,\n            transformOrigin,\n        } = this.state;\n\n        return (\n            <React.Fragment>\n                {isEditMode && (\n                    <div onClick={() => this._clearLocalStraoge()}>\n                        <DeleteLocalStorage />\n                    </div>\n                )}\n\n                <div\n                    onMouseDown={this.onMouseDown}\n                    onMouseUp={this.onMouseUp}\n                    style={{\n                        cursor: isEditMode ? \"all-scroll\" : \"inherit\",\n                        position: \"relative\",\n                        display: \"inline-block\",\n                        transform: vectorToTransform(containerTranslate),\n                    }}\n                >\n                    <div\n                        ref={(ref) => {\n                            this.container = ref;\n                        }}\n                        style={{\n                            ...styles.container,\n                            ...style,\n                            pointerEvents: isEditMode ? \"none\" : \"all\",\n                            transform: matrixToTransform(matrix),\n                            transformOrigin: `${transformOrigin[0]}px ${transformOrigin[1]}px 0px`,\n                        }}\n                        className={className}\n                    >\n                        {this.props.children}\n                    </div>\n                    {isEditMode && (\n                        <div>\n                            {anchors.map((anchor, index) => (\n                                <AnchorComponent\n                                    style={anchorStyle}\n                                    className={anchorClassName}\n                                    key={anchor}\n                                    translation={translateDelta[anchor]}\n                                    position={anchor}\n                                    onMouseDown={this.onAnchorMouseDown}\n                                    onMouseUp={this.onAnchorMouseUp}\n                                />\n                            ))}\n                        </div>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport BaseMap from \"./BaseMap\";\nimport { connect } from \"react-redux\";\nimport { ProjectionMapping } from \"../ProjectionMapping/ProjectionMapping\";\n\nclass MapContainer extends Component {\n    _checkKeystone = () => {\n        return this.props.menu.includes(\"KEYSTONE\") ? true : false;\n    };\n\n    render() {\n        return (\n            <div\n                style={{\n                    height: \"100vh\",\n                    width: \"100vw\",\n                    overflow: \"hidden\",\n                }}\n            >\n                <ProjectionMapping\n                    style={{\n                        height: \"100vh\",\n                        width: \"100vw\",\n                    }}\n                    isEditMode={this._checkKeystone()}\n                >\n                    <BaseMap\n                        menu={this.props.menu}\n                        selectedType={this.props.selectedType}\n                    />\n                </ProjectionMapping>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        menu: state.MENU,\n        selectedType: state.SELECTED_TYPE,\n    };\n};\n\nexport default connect(mapStateToProps, null)(MapContainer);\n","import React, { Component } from \"react\";\nimport { CircularGridLines, RadarChart } from \"react-vis\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\nimport \"./Radar.css\";\nimport { DiscreteColorLegend } from \"react-vis\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            domains: [],\n            radarData: [],\n        };\n        this.radarSize = this.props.drawerWidth - 50;\n\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n        let radarData = {};\n        let refData = {};\n        let domains = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"radar\") {\n                radarData[indicators[i].name] = [indicators[i].value];\n                refData[indicators[i].name] = [indicators[i].ref_value];\n                indicators[i].domain = [0, 1];\n                domains.push(indicators[i]);\n            }\n        }\n        this.setState({ radarData: [radarData, refData], domains: domains });\n    }\n\n    componentDidMount() {\n        this.setState({ indicators: this.props.indicators });\n        this.generateData();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.setState({ indicators: this.props.indicators });\n            console.log(\"new radar data..\");\n            this.generateData();\n        }\n    }\n\n    render() {\n        if (this.props.cityioData.indicators) {\n            return (\n                <div>\n                    <RadarChart\n                        className=\"Radar blur\"\n                        animation\n                        data={this.state.radarData}\n                        domains={this.state.domains}\n                        colorRange={this.colorRange}\n                        style={{\n                            polygons: {\n                                fillOpacity: 0.2,\n                                strokeWidth: 2,\n                            },\n                            axes: {\n                                text: {\n                                    opacity: 0,\n                                    fontWeight: 700,\n                                    fill: \"white\",\n                                },\n                                strokeWidth: 0,\n                            },\n                            labels: {\n                                textAnchor: \"middle\",\n                                fontSize: 10,\n                                fill: \"white\",\n                            },\n                        }}\n                        margin={{\n                            left: this.radarSize / 6,\n                            top: this.radarSize / 6,\n                            bottom: this.radarSize / 6,\n                            right: this.radarSize / 6,\n                        }}\n                        width={this.radarSize}\n                        height={this.radarSize}\n                    >\n                        <CircularGridLines\n                            style={{\n                                fill: \"white\",\n                                fillOpacity: 0.1,\n                                backgroundColor: \"#FFF\",\n                                opacity: 0.5,\n                                stroke: \"white\",\n                                width: 0.1,\n                            }}\n                            tickValues={[...new Array(11)].map(\n                                (v, i) => i / 10 - 1\n                            )}\n                        />\n                    </RadarChart>\n\n                    <DiscreteColorLegend\n                        items={[\"Design\", \"Reference\"]}\n                        colors={this.colorRange}\n                    />\n                </div>\n            );\n        } else return null;\n    }\n}\n\nexport default Radar;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n    },\n}));\n\nconst downloadTxtFile = (props) => {\n    let data = JSON.stringify(props);\n    const element = document.createElement(\"a\");\n    const file = new Blob([data], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = \"data.json\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n};\n\nexport default function DownloadRawData(props) {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Button\n                onClick={() => {\n                    downloadTxtFile(props);\n                }}\n                size=\"small\"\n                variant=\"outlined\"\n                color=\"secondary\"\n                className={classes.button}\n                startIcon={<SaveIcon />}\n            >\n                {props.title}\n            </Button>\n        </div>\n    );\n}\n","import React, { Component } from \"react\";\nimport {\n    FlexibleWidthXYPlot,\n    XAxis,\n    YAxis,\n    VerticalBarSeries,\n} from \"react-vis\";\nimport \"../../../../../node_modules/react-vis/dist/style.css\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport Typography from \"@material-ui/core/Typography\";\n\nclass Radar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            barChartData: null,\n            hoverdNode: null,\n        };\n        this.colorRange = [\"#fc03ec\", \"#79C7E3\"];\n    }\n\n    componentDidMount() {\n        this.generateData();\n    }\n\n    /**\n   data format \n    [\n    { x: 2, y: 10 },\n    { x: 4, y: 5 },\n    { x: 12, y: 15 },\n    ]\n     */\n\n    generateData() {\n        const indicators = this.props.cityioData.indicators;\n\n        let dataArr = [];\n        // let refDataArr = [];\n        for (let i = 0; i < indicators.length; i++) {\n            if (indicators[i].viz_type === \"bar\") {\n                dataArr.push({\n                    x: indicators[i].name,\n                    y: indicators[i].value,\n                });\n\n                // refDataArr.push({\n                //     x: indicators[i].name,\n                //     y: indicators[i].ref_value,\n                // });\n            }\n        }\n\n        this.setState({\n            barChartData: dataArr,\n            // refChartData: refDataArr\n        });\n    }\n\n    componentDidUpdate(prevProps) {\n        if (\n            prevProps.cityioData.indicators !== this.props.cityioData.indicators\n        ) {\n            this.generateData();\n        }\n    }\n\n    render() {\n        const { hoveredNode } = this.state;\n\n        return (\n            <>\n                {this.state.barChartData && (\n                    <div>\n                        {hoveredNode && (\n                            <Typography gutterBottom>\n                                {hoveredNode.x} : {hoveredNode.y}\n                            </Typography>\n                        )}\n\n                        <FlexibleWidthXYPlot\n                            opacity={0.2}\n                            xType=\"ordinal\"\n                            width={this.props.drawerWidth - 50}\n                            height={this.props.drawerWidth - 50}\n                            stackBy=\"y\"\n                            yDomain={[0, 1]}\n                        >\n                            <XAxis\n                                style={{\n                                    text: {\n                                        fill: \"#FFF\",\n                                    },\n                                }}\n                                tickLabelAngle={90}\n                            />\n                            <YAxis style={{ text: { fill: \"#FFF\" } }} />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.barChartData}\n                            />\n                            <VerticalBarSeries\n                                animation={true}\n                                onValueMouseOver={(d) => {\n                                    this.setState({ hoveredNode: d });\n                                }}\n                                data={this.state.refChartData}\n                            />\n                        </FlexibleWidthXYPlot>\n\n                        <DownloadRawData\n                            data={this.props.cityioData.indicators}\n                            title={\"radar & bars data\"}\n                        />\n                    </div>\n                )}\n            </>\n        );\n    }\n}\n\nexport default Radar;\n","import React, { useState } from \"react\";\nimport { rgbToHex } from \"../../BaseMap/BaseMapUtils\";\nimport DownloadRawData from \"../DownloadRawData/DownloadRawData\";\nimport { RadialChart, Hint } from \"react-vis\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nexport default function AreaCalc(props) {\n    const radialRadius = props.drawerWidth - 100;\n    const [hoveredRadial, setHoveredRadial] = useState(false);\n\n    const useStyles = makeStyles((theme) => ({\n        list: {\n            width: props.drawerWidth - 50,\n        },\n    }));\n\n    const classes = useStyles();\n\n    const calcArea = () => {\n        let gridProps = props.cityioData.GEOGRID.properties;\n        let cellSize = gridProps.header.cellSize;\n        let geoGridData = props.cityioData.GEOGRIDDATA;\n        let calcAreaObj = {};\n        geoGridData.forEach((gridCellData) => {\n            let typeName = gridCellData.name;\n            if (\n                //    if this type is not null\n                gridCellData.name !== \"None\"\n            ) {\n                if (calcAreaObj.hasOwnProperty(typeName)) {\n                    calcAreaObj[typeName].count =\n                        calcAreaObj[typeName].count + 1;\n                    // avoid landuse with no height\n                    let height =\n                        gridCellData.height < 1 ? 1 : gridCellData.height;\n                    calcAreaObj[typeName].area =\n                        calcAreaObj[typeName].area + height * cellSize;\n                } else {\n                    calcAreaObj[typeName] = {};\n                    calcAreaObj[typeName].area = 0;\n                    calcAreaObj[typeName].count = 0;\n                    calcAreaObj[typeName].name = typeName;\n                    calcAreaObj[typeName].color = rgbToHex(\n                        gridCellData.color[0],\n                        gridCellData.color[1],\n                        gridCellData.color[2]\n                    );\n                }\n            }\n        });\n        //  convert to react-vis happy data format\n        let radialData = [];\n        for (const k in calcAreaObj) {\n            radialData.push(calcAreaObj[k]);\n        }\n\n        let data = {\n            children: radialData,\n            color: 1,\n        };\n        return data;\n    };\n\n    const data = calcArea();\n\n    return (\n        <List className={classes.list}>\n            <ListItem>\n                {hoveredRadial.name ? (\n                    <Typography gutterBottom>\n                        {hoveredRadial.name}: {hoveredRadial.area} sqm\n                    </Typography>\n                ) : (\n                    <Typography gutterBottom>Hover on chart...</Typography>\n                )}\n            </ListItem>\n\n            <ListItem>\n                <RadialChart\n                    colorType=\"literal\"\n                    animation={true}\n                    className={\"donut-chart-example\"}\n                    innerRadius={radialRadius / 2 - radialRadius / 5}\n                    radius={radialRadius / 2}\n                    getLabel={(d) => d.name}\n                    labelsRadiusMultiplier={0.95}\n                    labelsStyle={{\n                        textAnchor: \"middle\",\n\n                        fontSize: 11,\n                        fill: \"#FFF\",\n                        textShadow: \"2px 2px 2px #000\",\n                    }}\n                    showLabels\n                    getAngle={(d) => d.area}\n                    data={data.children}\n                    onValueMouseOver={(evt) => setHoveredRadial(evt)}\n                    onSeriesMouseOut={() => setHoveredRadial(false)}\n                    width={radialRadius}\n                    height={radialRadius}\n                    padAngle={0.01}\n                >\n                    {hoveredRadial !== false && (\n                        <Hint value={hoveredRadial}>\n                            <div\n                                style={{\n                                    background: \"rgba(0,0,0,0.8)\",\n                                    fontSize: 14,\n                                }}\n                            >\n                                <Typography variant={\"caption\"} gutterBottom>\n                                    Area: {hoveredRadial.area} sqm\n                                </Typography>\n                            </div>\n                        </Hint>\n                    )}\n                </RadialChart>\n            </ListItem>\n\n            <ListItem>\n                <DownloadRawData data={data.children} title={\"area data\"} />\n            </ListItem>\n        </List>\n    );\n}\n","import React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport { connect } from \"react-redux\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Radar from \"./Radar/Radar\";\nimport BarChart from \"./BarChart/BarChart\";\nimport AreaCalc from \"./AreaCalc/AreaCalc\";\n\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction VisContainer(props) {\n    const drawerWidth = 450;\n\n    const useStyles = makeStyles((theme) => ({\n        paper: {\n            display: \"flex\",\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n    }));\n\n    const classes = useStyles();\n    const showRadar = props.menu && props.menu.includes(\"RADAR\");\n\n    return (\n        <React.Fragment>\n            {showRadar && (\n                <Drawer\n                    variant=\"persistent\"\n                    anchor=\"right\"\n                    open={true}\n                    classes={{\n                        paper: classes.drawerPaper,\n                    }}\n                >\n                    <List className={classes.list}>\n                        <ListItem>\n                            <Typography variant=\"h6\" gutterBottom>\n                                Urban Indicators\n                            </Typography>\n                        </ListItem>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <Radar\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <BarChart\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n                        <div className={classes.paper}>\n                            <Paper elevation={10}>\n                                <ListItem>\n                                    <AreaCalc\n                                        cityioData={props.cityioData}\n                                        drawerWidth={drawerWidth}\n                                    />\n                                </ListItem>\n                            </Paper>\n                        </div>\n                    </List>\n                </Drawer>\n            )}\n        </React.Fragment>\n    );\n}\n\n// export default EditMenuMain;\n\nconst mapStateToProps = (state) => {\n    return {\n        cityioData: state.CITYIO,\n        menu: state.MENU,\n    };\n};\n\nexport default connect(mapStateToProps, null)(VisContainer);\n","import React from \"react\";\nimport { css } from \"@emotion/core\";\nimport { useSelector } from \"react-redux\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\n\nconst override = css`\n    display: block;\n    margin: 0 auto;\n    border-color: none;\n`;\n\nfunction LoadingSpinner() {\n    const loading = useSelector((state) => state.LOADING);\n    return (\n        <div\n            style={{\n                position: \"fixed\",\n                bottom: 50,\n                right: 50,\n                zIndex: 1,\n            }}\n        >\n            <PulseLoader\n                css={override}\n                size={20}\n                color=\"white\"\n                loading={loading}\n            />\n        </div>\n    );\n}\n\nexport default LoadingSpinner;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport CityIO from \"./CityIO/cityIO\";\nimport MenuContainer from \"./MenuContainer/MenuContainer\";\nimport MapContainer from \"./BaseMap/BaseMapContainer\";\nimport VisContainer from \"./VisContainer/VisContainer\";\nimport LoadingSpinner from \"./CityIO/LoadingSpinner\";\n\nexport default function App(props) {\n    // wait for 'ready' flag from cityIO when app is ready to start\n    const ready = useSelector((state) => state.READY);\n    // get the table name for cityIO comp\n    const { tableName } = props;\n\n    return (\n        <>\n            <CityIO tableName={tableName} />\n            {/* if ready, render the app*/}\n            {ready && (\n                <>\n                    <MenuContainer tableName={tableName} />\n                    <MapContainer />\n                    <VisContainer />\n                </>\n            )}\n            <LoadingSpinner />\n        </>\n    );\n}\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GitHubIcon from \"@material-ui/icons/GitHub\";\nimport Box from \"@material-ui/core/Box\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport Fab from \"@material-ui/core/Fab\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles((theme) => ({\n    button: {\n        margin: theme.spacing(2),\n    },\n\n    root: {\n        maxWidth: \"50%\",\n        \"& > *\": {\n            margin: theme.spacing(1),\n        },\n\n        textAlign: \"center\",\n        rounded: true,\n        maxHeight: \"50%\",\n        paddingTop: 65,\n        margin: \"auto\",\n    },\n\n    inputRoot: {\n        fontSize: 60,\n    },\n    labelRoot: {\n        fontSize: 50,\n        color: \"white\",\n        \"&$labelFocused\": {\n            fontSize: 10,\n            color: \"white\",\n        },\n    },\n    labelFocused: { color: \"white\" },\n    caption: { margin: \"auto\", maxWidth: \"30%\" },\n}));\n\nexport default function SplashScreen() {\n    const [textFieldContent, setTextFieldContent] = useState(null);\n\n    const handleTextFieldChange = (e) => {\n        const { value } = e.target;\n        setTextFieldContent(value);\n    };\n\n    const loadCityScopeJSproject = () => {\n        let url =\n            \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" +\n            textFieldContent;\n        window.location.href = url;\n    };\n\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <Typography variant=\"h1\" gutterBottom>\n                CityScopeJS\n            </Typography>\n            <Typography gutterBottom>\n                CityScopeJS is a unified front-end for MIT CityScope project, an\n                open-source urban modeling and simulation platform. CityScopeJS\n                allows users to examine different urban-design alternatives, and\n                observe their impact through multiple layers of urban analytics\n                modules, such as economy, traffic and ABM simulation, urban\n                access, storm-water, noise and more.\n            </Typography>\n            <Box p={5} />\n\n            <div>\n                <TextField\n                    autoComplete=\"off\"\n                    onChange={(event) => handleTextFieldChange(event)}\n                    InputProps={{ classes: { root: classes.inputRoot } }}\n                    InputLabelProps={{\n                        classes: {\n                            root: classes.labelRoot,\n                            focused: classes.labelFocused,\n                        },\n                    }}\n                    id=\"outlined-basic\"\n                    label=\"CityScope Project...\"\n                ></TextField>\n                <div>\n                    {textFieldContent && (\n                        <Button\n                            onClick={() => {\n                                loadCityScopeJSproject();\n                            }}\n                            variant=\"outlined\"\n                            className={classes.button}\n                        >\n                            <SendIcon />\n                            Load CityScope Project\n                        </Button>\n                    )}\n                </div>\n            </div>\n\n            <Box p={5} />\n            <div>\n                <Fab\n                    color=\"default\"\n                    href=\"https://cityscope.media.mit.edu/CS_cityscopeJS/?editor\"\n                >\n                    <EditIcon />\n                </Fab>\n            </div>\n\n            <div className={classes.caption}>\n                <Typography variant=\"caption\" gutterBottom>\n                    Click here to design and deploy a new CityScope project\n                    using Grid Editor\n                </Typography>\n            </div>\n\n            <Box p={2} />\n            <div>\n                <Fab\n                    href=\"http://github.com/CityScope/CS_cityscopeJS/\"\n                    color=\"default\"\n                >\n                    <GitHubIcon />\n                </Fab>\n            </div>\n            <div className={classes.caption}>\n                <Typography variant=\"caption\" gutterBottom>\n                    This open-source project is developed by the CityScope\n                    Network. Join us!\n                </Typography>\n            </div>\n            <Box p={5} />\n        </div>\n    );\n}\n","import MaterialTable from \"material-table\";\nimport React, { useState, useEffect } from \"react\";\nimport { Grid } from \"@material-ui/core\";\nimport {\n    listenToRowEdits,\n    listeonToTypesList,\n} from \"../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\nimport settings from \"../../GridEditorSettings.json\";\n\nexport default function TypesEditor() {\n    const createtypesArray = (LanduseTypesList) => {\n        let typesArray = [];\n        Object.keys(LanduseTypesList).forEach((type) => {\n            typesArray.push({\n                name: type,\n                color: LanduseTypesList[type].color,\n                height: LanduseTypesList[type].height\n                    ? LanduseTypesList[type].height\n                    : null,\n                LBCS: JSON.stringify(LanduseTypesList[type].LBCS),\n                NAICS: JSON.stringify(LanduseTypesList[type].NAICS),\n                interactive: LanduseTypesList[type].interactive,\n            });\n        });\n        return typesArray;\n    };\n\n    const [state, setState] = React.useState({\n        columns: [\n            { title: \"Type\", field: \"name\" },\n            { title: \"Height\", field: \"height\", type: \"numeric\" },\n            {\n                title: \"Interactive\",\n                field: \"interactive\",\n                lookup: { No: \"No\", Web: \"Web\", TUI: \"TUI\" },\n            },\n            { title: \"Color\", field: \"color\", type: \"string\" },\n            { title: \"LBCS\", field: \"LBCS\", type: \"string\" },\n            { title: \"NAICS\", field: \"NAICS\", type: \"string\" },\n        ],\n        data: createtypesArray(settings.GEOGRID.properties.types),\n    });\n    // redux the type list on every change\n    useEffect(() => {\n        dispatch(listeonToTypesList(state.data));\n    });\n    const dispatch = useDispatch();\n    const [selectedRow, setSelectedRow] = useState(null);\n    const [rowColor, setRowColor] = useState(null);\n\n    return (\n        <div style={{ maxWidth: \"100%\" }}>\n            <Grid container>\n                <Grid item xs={12}>\n                    <MaterialTable\n                        title=\"Types Editor\"\n                        columns={state.columns}\n                        data={state.data}\n                        options={{\n                            paging: false,\n                            search: false,\n                            selection: false,\n                            rowStyle: (rowData) => ({\n                                backgroundColor:\n                                    selectedRow === rowData.tableData.id\n                                        ? rowColor\n                                        : null,\n                            }),\n                        }}\n                        onRowClick={(evt, row) => {\n                            setSelectedRow(row.tableData.id);\n                            setRowColor(row.color);\n                            dispatch(listenToRowEdits(row));\n                        }}\n                        editable={{\n                            onRowAdd: (newData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data.push(newData);\n                                            return { ...prevState, data };\n                                        });\n                                    }, 600);\n                                }),\n                            onRowUpdate: (newData, oldData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        if (oldData) {\n                                            setState((prevState) => {\n                                                const data = [\n                                                    ...prevState.data,\n                                                ];\n                                                data[\n                                                    data.indexOf(oldData)\n                                                ] = newData;\n\n                                                return { ...prevState, data };\n                                            });\n                                        }\n\n                                        // dispath change to redux\n                                        dispatch(listenToRowEdits(newData));\n                                    }, 600);\n                                }),\n                            onRowDelete: (oldData) =>\n                                new Promise((resolve) => {\n                                    setTimeout(() => {\n                                        resolve();\n                                        setState((prevState) => {\n                                            const data = [...prevState.data];\n                                            data.splice(\n                                                data.indexOf(oldData),\n                                                1\n                                            );\n                                            return { ...prevState, data };\n                                        });\n                                    }, 600);\n                                }),\n                        }}\n                    />\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n","import proj4 from \"proj4\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport { _hexToRgb } from \"../../../EditorMap/EditorMap\";\n\nfunction deg_to_rad(deg) {\n    return (deg * Math.PI) / 180;\n}\nfunction rad_to_deg(rad) {\n    return (rad * 180) / Math.PI;\n}\n\nconst randomProperty = (obj) => {\n    var keys = Object.keys(obj);\n    return obj[keys[(keys.length * Math.random()) << 0]];\n};\n\nexport const gridCreator = (gridProps) => {\n    let top_left_lon = parseFloat(gridProps.longitude);\n    let top_left_lat = parseFloat(gridProps.latitude);\n    let rotation = parseFloat(gridProps.rotation);\n    let userPrj = gridProps.projection;\n    let cell_size = parseFloat(gridProps.cellSize);\n    let nrows = parseFloat(gridProps.nrows);\n    let ncols = parseFloat(gridProps.ncols);\n\n    const webMercator = proj4.defs(\"EPSG:4326\");\n    let EARTH_RADIUS_M = 6.371e6;\n    let top_left_lon_lat = { lon: top_left_lon, lat: top_left_lat };\n    let bearing = (90 - rotation + 360) % 360;\n    let Ad = (cell_size * ncols) / EARTH_RADIUS_M;\n    let la1 = deg_to_rad(top_left_lon_lat.lat);\n    let lo1 = deg_to_rad(top_left_lon_lat.lon);\n    let bearing_rad = deg_to_rad(bearing);\n    let la2 = Math.asin(\n        Math.sin(la1) * Math.cos(Ad) +\n            Math.cos(la1) * Math.sin(Ad) * Math.cos(bearing_rad)\n    );\n    let lo2 =\n        lo1 +\n        Math.atan2(\n            Math.sin(bearing_rad) * Math.sin(Ad) * Math.cos(la1),\n            Math.cos(Ad) - Math.sin(la1) * Math.sin(la2)\n        );\n    let top_right_lon_lat = { lon: rad_to_deg(lo2), lat: rad_to_deg(la2) };\n    let top_left_xy = proj4(webMercator, userPrj, [\n        top_left_lon_lat.lon,\n        top_left_lon_lat.lat,\n    ]);\n\n    let top_right_xy = proj4(webMercator, userPrj, [\n        top_right_lon_lat.lon,\n        top_right_lon_lat.lat,\n    ]);\n\n    let dydx =\n        (top_right_xy[1] - top_left_xy[1]) / (top_right_xy[0] - top_left_xy[0]);\n    let theta = Math.atan(dydx);\n    let cosTheta = Math.cos(theta);\n    let sinTheta = Math.sin(theta);\n    // create rotate matrix\n    let x_unRot = [];\n    let y_unRot = [];\n    for (let i = 0; i < nrows; i++) {\n        for (let j = 0; j < ncols; j++) {\n            x_unRot.push(j * cell_size);\n            y_unRot.push(-i * cell_size);\n        }\n    }\n\n    let x_rot = [];\n    let y_rot = [];\n    for (let i = 0; i < x_unRot.length; i++) {\n        x_rot.push(x_unRot[i] * cosTheta - y_unRot[i] * sinTheta);\n        y_rot.push(x_unRot[i] * sinTheta + y_unRot[i] * cosTheta);\n    }\n\n    let x_rot_trans = [];\n    let y_rot_trans = [];\n    for (let i = 0; i < x_rot.length; i++) {\n        x_rot_trans.push(top_left_xy[0] + x_rot[i]);\n        y_rot_trans.push(top_left_xy[1] + y_rot[i]);\n    }\n\n    var dxdCol = x_rot_trans[1] - x_rot_trans[0];\n    var dydCol = y_rot_trans[1] - y_rot_trans[0];\n    var dxdRow = x_rot_trans[ncols] - x_rot_trans[0];\n    var dydRow = y_rot_trans[ncols] - y_rot_trans[0];\n\n    let gridPnts = [];\n    let geojsonFeatureCollection = {\n        type: \"FeatureCollection\",\n        // polygons go here\n        features: [],\n    };\n\n    let types = settings.GEOGRID.properties.types;\n\n    for (let i = 0; i < x_rot_trans.length; i++) {\n        let rndType = randomProperty(types);\n\n        let geojsonPolygon = {\n            type: \"Feature\",\n            geometry: {\n                type: \"Polygon\",\n                coordinates: null,\n            },\n            properties: {\n                color: _hexToRgb(rndType.color),\n                height: rndType.height,\n                name: rndType.name,\n                interactive: rndType.interactive,\n            },\n        };\n\n        var polygon_xy = [\n            [x_rot_trans[i], y_rot_trans[i]],\n            [x_rot_trans[i] + dxdRow, y_rot_trans[i] + dydRow],\n            [\n                x_rot_trans[i] + dxdRow + dxdCol,\n                y_rot_trans[i] + dydRow + dydCol,\n            ],\n            [x_rot_trans[i] + dxdCol, y_rot_trans[i] + dydCol],\n            [x_rot_trans[i], y_rot_trans[i]],\n        ];\n\n        var polygon_ll = [];\n        for (var v = 0; v < 5; v++) {\n            let ll = proj4(userPrj, webMercator, polygon_xy[v]);\n\n            polygon_ll.push(ll);\n        }\n\n        geojsonPolygon.geometry.coordinates = [polygon_ll];\n        gridPnts.push(geojsonPolygon);\n    }\n    geojsonFeatureCollection.features = gridPnts;\n\n    return geojsonFeatureCollection;\n};\n","import React from \"react\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport Button from \"@material-ui/core/Button\";\nimport { gridCreator } from \"./gridCreator\";\nimport { listenToGridCreator } from \"../../../../../redux/actions\";\nimport { useDispatch } from \"react-redux\";\n\nexport default function GridMaker(props) {\n    const dispatch = useDispatch();\n\n    const handleGridCreation = () => {\n        let grid = gridCreator(props.gridProps);\n        dispatch(listenToGridCreator(grid));\n    };\n\n    return (\n        <Button\n            onClick={() => {\n                handleGridCreation();\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<AppsIcon />}\n        >\n            Create Grid\n        </Button>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CloudUploadIcon from \"@material-ui/icons/CloudUpload\";\nimport CloudDownloadIcon from \"@material-ui/icons/CloudDownload\";\nimport axios from \"axios\";\nimport settings from \"../../../GridEditorSettings.json\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { useSelector } from \"react-redux\";\nimport Link from \"@material-ui/core/Link\";\n\nconst reqResonseUI = (response, tableName) => {\n    let cityscopeJSendpoint =\n        \"https://cityscope.media.mit.edu/CS_cityscopeJS/?cityscope=\" +\n        tableName;\n    // create the feedback text\n    let resText = (\n        <Typography variant=\"caption\">\n            CityIO is {response.data.status}. Grid deployed to{\" \"}\n            <Link href={cityscopeJSendpoint}>{cityscopeJSendpoint}</Link>\n        </Typography>\n    );\n\n    return resText;\n};\n\n/**\n *\n * @param {typesList} typesList List of types form table editor\n *\n */\nconst prepareData = (struct, typesList, geoJsonFeatures, gridProps) => {\n    let geoGridObject = struct;\n\n    // take types list and prepare to csJS format\n    let newTypesList = {};\n\n    typesList.forEach((oldType) => {\n        newTypesList[oldType.name] = oldType;\n\n        // // fixes JSON => string in material-table\n        // newTypesList[oldType.name].LBCS = JSON.parse(\n        //     JSON.stringify(oldType.LBCS)\n        // );\n        // newTypesList[oldType.name].NAICS = JSON.parse(\n        //     JSON.stringify(oldType.NAICS)\n        // );\n    });\n\n    geoGridObject.properties.types = newTypesList;\n\n    // inject table props to grid\n    geoGridObject.properties.header = gridProps;\n    geoGridObject.properties.header.longitude = parseFloat(\n        geoGridObject.properties.header.longitude\n    );\n    geoGridObject.properties.header.latitude = parseFloat(\n        geoGridObject.properties.header.latitude\n    );\n    geoGridObject.properties.header.rotation = parseFloat(\n        geoGridObject.properties.header.rotation\n    );\n    geoGridObject.properties.header.nrows = parseFloat(\n        geoGridObject.properties.header.nrows\n    );\n    geoGridObject.properties.header.ncols = parseFloat(\n        geoGridObject.properties.header.ncols\n    );\n    geoGridObject.properties.header.cellSize = parseFloat(\n        geoGridObject.properties.header.cellSize\n    );\n\n    // lastly get the grid features\n    geoGridObject.features = geoJsonFeatures;\n\n    return geoGridObject;\n};\n\nexport default function CommitGrid(props) {\n    const [reqResonse, setReqResonse] = React.useState(null);\n\n    const reduxState = useSelector((state) => state);\n    const hasGrid = reduxState.GRID_CREATED;\n\n    const downloadObjectAsJson = () => {\n        let struct = settings.GEOGRID;\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        let geoGridObj = prepareData(\n            struct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n        var dataStr =\n            \"data:text/json;charset=utf-8,\" +\n            encodeURIComponent(JSON.stringify(geoGridObj));\n        var downloadAnchorNode = document.createElement(\"a\");\n        downloadAnchorNode.setAttribute(\"href\", dataStr);\n        downloadAnchorNode.setAttribute(\"download\", \"grid.json\");\n        document.body.appendChild(downloadAnchorNode); // required for firefox\n        downloadAnchorNode.click();\n        downloadAnchorNode.remove();\n    };\n\n    const postGridToCityIO = () => {\n        let struct = settings.GEOGRID;\n        let typesList = reduxState.TYPES_LIST;\n        let geoJsonFeatures = reduxState.GRID_CREATED.features;\n        let gridProps = props.gridProps;\n        // take grid struct from settings\n        let geoGridObj = prepareData(\n            struct,\n            typesList,\n            geoJsonFeatures,\n            gridProps\n        );\n\n        let tableName = geoGridObj.properties.header.tableName.toLowerCase();\n        let requestsList = {\n            geoGridURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRID\",\n\n            geoGridDataURL:\n                \"https://cityio.media.mit.edu/api/table/update/\" +\n                tableName +\n                \"/GEOGRIDDATA\",\n        };\n\n        const options = {\n            method: \"post\",\n            url: requestsList.geoGridURL,\n            data: geoGridObj,\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Accept: \"application/json\",\n            },\n        };\n\n        axios(options)\n            .then(function (response) {\n                setReqResonse(reqResonseUI(response, tableName));\n            })\n            // then reset GEOGRIDDATA of that new grid\n\n            .then(function () {\n                options.url = requestsList.geoGridDataURL;\n                options.data = {};\n                axios(options);\n                console.log(\"removed GEOGRIDDATA\");\n            })\n            .catch((error) => {\n                console.log(\"ERROR:\", error);\n            });\n    };\n\n    return (\n        <>\n            {hasGrid && (\n                <>\n                    <Button\n                        onClick={() => {\n                            postGridToCityIO();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudUploadIcon />}\n                    >\n                        Commit Grid to cityIO\n                    </Button>\n\n                    <Button\n                        onClick={() => {\n                            // ! download as json\n                            downloadObjectAsJson();\n                        }}\n                        variant=\"outlined\"\n                        color=\"default\"\n                        startIcon={<CloudDownloadIcon />}\n                    >\n                        Download JSON\n                    </Button>\n\n                    <div style={{ width: \"100%\" }}> {reqResonse}</div>\n                </>\n            )}\n        </>\n    );\n}\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport CenterFocusStrongIcon from \"@material-ui/icons/CenterFocusStrong\";\nimport { useDispatch } from \"react-redux\";\n\nimport { listenToBaseMapCenter } from \"../../../../../redux/actions\";\n\nexport default function CenterMapButton(props) {\n    const dispatch = useDispatch();\n\n    return (\n        <Button\n            onClick={() => {\n                dispatch(\n                    listenToBaseMapCenter({\n                        latCenter: parseFloat(props.mapCenter[0]),\n                        lonCenter: parseFloat(props.mapCenter[1]),\n                    })\n                );\n            }}\n            variant=\"outlined\"\n            color=\"default\"\n            startIcon={<CenterFocusStrongIcon />}\n            style={{ fontSize: \"12px\" }}\n        >\n            Center Map\n        </Button>\n    );\n}\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport GridMaker from \"./GridMaker/GridMaker\";\nimport CommitGrid from \"./CommitGrid/CommitGrid\";\nimport CenterMapButton from \"./CenterMapButton/CenterMapButton\";\nimport settings from \"../../GridEditorSettings.json\";\nimport Paper from \"@material-ui/core/Paper\";\n\nexport default function GridProps() {\n    const useStyles = makeStyles((theme) => ({\n        root: {\n            \"& .MuiTextField-root\": {\n                margin: theme.spacing(1),\n                flexWrap: \"wrap\",\n            },\n            \"& > *\": {\n                margin: theme.spacing(1),\n            },\n        },\n        paper: {\n            width: \"100%\",\n        },\n    }));\n\n    const [formValues, setformValues] = React.useState({\n        tableName: \"CityScopeJS\",\n        latitude: settings.GEOGRID.properties.header.latitude,\n        longitude: settings.GEOGRID.properties.header.longitude,\n        nrows: settings.GEOGRID.properties.header.nrows,\n        ncols: settings.GEOGRID.properties.header.nrows,\n        rotation: settings.GEOGRID.properties.header.rotation,\n        cellSize: settings.GEOGRID.properties.header.cellSize,\n        projection: settings.GEOGRID.properties.header.projection,\n    });\n\n    const handleChangeForm = (event) => {\n        const { id, value } = event.target;\n        setformValues({ ...formValues, [id]: value });\n    };\n\n    const classes = useStyles();\n\n    //  get all data\n    // https://stackoverflow.com/questions/56641235/react-how-to-get-values-from-material-ui-textfield-components\n    return (\n        <Paper elevation={3} className={classes.paper}>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <Typography variant=\"h6\">Grid Properties</Typography>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"tableName\"\n                        label=\"CityScope Project Name\"\n                        defaultValue={formValues.tableName}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"latitude\"\n                        label=\"Latitude\"\n                        defaultValue={formValues.latitude}\n                        type=\"number\"\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"longitude\"\n                        label=\"Longitude\"\n                        defaultValue={formValues.longitude}\n                        type=\"number\"\n                    />\n                </div>\n                <div className={classes.root}>\n                    <CenterMapButton\n                        mapCenter={[formValues.latitude, formValues.longitude]}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"nrows\"\n                        label=\"Rows\"\n                        defaultValue={formValues.nrows}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 100,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"ncols\"\n                        label=\"Columns\"\n                        defaultValue={formValues.ncols}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 100,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"rotation\"\n                        label=\"Rotation (deg)\"\n                        defaultValue={formValues.rotation}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 360,\n                                min: 0,\n                            },\n                        }}\n                    />\n\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        className={classes.textField}\n                        id=\"cellSize\"\n                        label=\"Cell Size (m^2)\"\n                        defaultValue={formValues.cellSize}\n                        type=\"number\"\n                        InputProps={{\n                            inputProps: {\n                                max: 1000,\n                                min: 0,\n                            },\n                        }}\n                    />\n                </div>\n                <div className={classes.root}>\n                    <TextField\n                        onChange={(event) => handleChangeForm(event)}\n                        variant=\"outlined\"\n                        id=\"projection\"\n                        label=\"Projection\"\n                        defaultValue={formValues.projection}\n                        type=\"string\"\n                        helperText=\"Note: wrong projection might break app. Find the relevant projection at: https://epsg.io/\"\n                    />\n                </div>\n                <div className={classes.root}>\n                    <GridMaker gridProps={formValues} />\n                    <CommitGrid gridProps={formValues} />\n                </div>\n            </form>\n        </Paper>\n    );\n}\n","// // export default EditMenuMain;\n\nimport React from \"react\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TypesEditor from \"./TypesEditor/TypesEditor\";\nimport GridProps from \"./GridProps/GridProps\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function EditMenu() {\n    const useStyles = makeStyles((theme) => ({\n        drawer: {\n            width: \"50%\",\n        },\n    }));\n\n    const classes = useStyles();\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"persistent\"\n            anchor=\"right\"\n            open={true}\n            classes={{\n                paper: classes.drawer,\n            }}\n        >\n            <List>\n                <ListItem>\n                    <Typography variant=\"h5\">CityScope Grid Editor</Typography>\n                </ListItem>\n                <ListItem>\n                    <Typography variant=\"caption\">\n                        Tool for creating CityScope endpoints with virtual\n                        editable girds, types, and props, and deploy them to\n                        cityIO.\n                    </Typography>\n                </ListItem>\n                <ListItem>\n                    <GridProps />\n                </ListItem>\n                <ListItem>\n                    <TypesEditor />\n                </ListItem>\n            </List>\n        </Drawer>\n    );\n}\n","import React, { Component } from \"react\";\nimport EditorMap from \"./EditorMap/EditorMap\";\nimport EditorMenu from \"./EditorMenu/EditorMenu\";\nexport default class GridEditor extends Component {\n    render() {\n        return (\n            <>\n                <EditorMap />\n                <EditorMenu />\n            </>\n        );\n    }\n}\n","import Provider from \"../../redux/Provider\";\nimport \"./Router.css\";\nimport configureStore from \"../../redux/store\";\nimport CityScopeJS from \"../CityScopeJS/CityScopeJS\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport React, { Component } from \"react\";\nimport { createMuiTheme } from \"@material-ui/core\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport SplashScreen from \"../SplashScreen/SplashScreen\";\nimport GridEditor from \"../GridEditor/GridEditor\";\n\n/**\n *  ! https://material-ui.com/customization/palette/\n */\nconst theme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        background: { default: \"#000\", paper: \"#29323c\" },\n    },\n});\n\nconst AppRouter = () => {\n    let url = window.location.toString();\n    let pre = \"cityscope=\";\n    let cityscopePrjName = url.substring(url.indexOf(pre) + pre.length);\n    let app = null;\n    // check URL for proper CS project link\n    if (url.indexOf(pre) !== -1 && cityscopePrjName.length > 0) {\n        console.log(\"Loading CityScope project: \" + cityscopePrjName);\n        app = <CityScopeJS tableName={cityscopePrjName} />;\n    } else if (window.location.search === \"?editor\") {\n        app = <GridEditor />;\n    } else {\n        app = <SplashScreen />;\n    }\n\n    return app;\n};\n\nexport default class Router extends Component {\n    render() {\n        return (\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Provider store={configureStore()}>\n                    <AppRouter />\n                </Provider>\n            </ThemeProvider>\n        );\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Router from \"./components/Router/Router\";\n\nconst root = document.getElementById(\"root\");\nconst render = () => {\n    return ReactDOM.render(<Router />, root);\n};\n\nrender(Router);\n\nif (module.hot) {\n    module.hot.accept(Router, () => {\n        const hotModule = require(\"./components/Router/Router\").default;\n        render(hotModule);\n    });\n}\n"],"sourceRoot":""}